[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Creating beautiful tables in R with {gt}",
    "section": "",
    "text": "Introduction\nTables don’t have to be dull lists of numbers. If done correctly, they can, in fact, be beautiful & engaging. And in this book, we’re going to learn how to create such tables with R. More precisely, we will learn how to use the {gt} package.\nChapter 1 is the starting point of our {gt} journey. It will cover useful guidelines for any table and how to implement them with {gt}. You can think of this chapter as a quickstart guide.\nAfterwards, we’re learning how to add eye-catching elements like plots, icons and images to our table in Chapter 2. Many of these elements are powered through the amazing {gtExtras} package. But you will also learn how to add any plot to your table (regardless of whether it is implemented in {gtExtras} or not.)\nNext, we’ll talk about formatting the entries of your table in Chapter 3. {gt} has two powerful sets of functions to get this job done, namely fmt_*() and sub_*(). These functions all work the same and are pretty easy to pick up. Hence, it’s easy to format the data in your table the way you want or need.\nIn Chapter 4, we’re learning how to change the theme of our table. This will be a long chapter. After all, we can basically change anything about our table’s appearance.\nAll of the knowledge that we’ve acquired in the previous chapters culminate in Chapter 5. That’s where we will build elaborate tables with {gt}.\nFinally, Chapter 6 is a special chapter dedicated to the interactions between Quarto and {gt}. As of right now (Quarto v1.2.267 & {gt} v0.8.0), Quarto’s default theme can interact with your {gt} table and change its theme. But there are ways to isolate Quarto from {gt}. This is what you’ll learn in this chapter."
  },
  {
    "objectID": "index.html#prerequisites",
    "href": "index.html#prerequisites",
    "title": "Creating beautiful tables in R with {gt}",
    "section": "Prerequisites",
    "text": "Prerequisites\nThis book is meant for people with an intermediate knowledge of R, specifically the Tidyverse. I do not expect people to know HTML/CSS for the most parts.\nThroughout most of the book, we’ll only to do small changes with HTML/CSS and these bits will be explained. But there will be parts in Chapter 4 and the subsequent chapters that will talk about changing CSS styles. Feel free to skip these parts if you’re uncomfortable with CSS. But I’ll do my best to help you with CSS."
  },
  {
    "objectID": "index.html#about-this-book",
    "href": "index.html#about-this-book",
    "title": "Creating beautiful tables in R with {gt}",
    "section": "About this book",
    "text": "About this book\nThis book is completely free and the code is open-source. If you find the things you learn here useful, I’d appreciate it if you sponsor my work via Buy Me Coffee.\n\n\n\nAlso, if you’re interested in working with me, I’m open to freelance work. You can book an appointment with me on Calendly."
  },
  {
    "objectID": "index.html#session-info",
    "href": "index.html#session-info",
    "title": "Creating beautiful tables in R with {gt}",
    "section": "Session info",
    "text": "Session info\nJust so you’re sure what versions I’m using. Here’s my session info and my Quarto version.\n\nsessioninfo::session_info(\"installed\")\n## ─ Session info ───────────────────────────────────────────────────────────────\n##  setting  value\n##  version  R version 4.2.2 Patched (2022-11-10 r83330)\n##  os       Ubuntu 20.04.5 LTS\n##  system   x86_64, linux-gnu\n##  ui       X11\n##  language (EN)\n##  collate  en_US.UTF-8\n##  ctype    en_US.UTF-8\n##  tz       Europe/Berlin\n##  date     2022-11-27\n##  pandoc   2.5 @ /usr/bin/ (via rmarkdown)\n## \n## ─ Packages ───────────────────────────────────────────────────────────────────\n##  ! package        * version    date (UTC) lib source\n##    AsioHeaders      1.22.1-1   2022-06-14 [1] CRAN (R 4.2.1)\n##    askpass          1.1        2019-01-13 [1] CRAN (R 4.0.0)\n##    assertthat       0.2.1      2019-03-21 [1] CRAN (R 4.0.0)\n##    backports        1.4.1      2021-12-13 [1] CRAN (R 4.1.2)\n##    base64enc        0.1-3      2015-07-28 [1] CRAN (R 4.0.0)\n##    bigD             0.2.0      2022-09-05 [1] CRAN (R 4.2.2)\n##    bit              4.0.4      2020-08-04 [1] CRAN (R 4.0.2)\n##    bit64            4.0.5      2020-08-30 [1] CRAN (R 4.0.2)\n##    bitops           1.0-7      2021-04-24 [1] CRAN (R 4.0.5)\n##    blob             1.2.3      2022-04-10 [1] CRAN (R 4.1.3)\n##    boot             1.3-28     2021-05-03 [2] CRAN (R 4.0.5)\n##    brew             1.0-8      2022-09-29 [1] CRAN (R 4.2.1)\n##    brio             1.1.3      2021-11-30 [1] CRAN (R 4.2.1)\n##    broom            1.0.1      2022-08-29 [1] CRAN (R 4.2.1)\n##    broom.helpers    1.9.0      2022-09-23 [1] CRAN (R 4.2.1)\n##    bslib            0.4.1      2022-11-02 [1] CRAN (R 4.2.2)\n##    cachem           1.0.6      2021-08-19 [1] CRAN (R 4.2.0)\n##    callr            3.7.3      2022-11-02 [1] CRAN (R 4.2.2)\n##    cellranger       1.1.0      2016-07-27 [1] CRAN (R 4.0.0)\n##    chromote         0.1.1      2022-09-07 [1] CRAN (R 4.2.1)\n##    class            7.3-20     2022-01-13 [2] CRAN (R 4.1.2)\n##  P cli              3.4.1      2022-09-23 [?] CRAN (R 4.2.1)\n##    clipr            0.8.0      2022-02-22 [1] CRAN (R 4.1.2)\n##    cluster          2.1.4      2022-08-22 [2] CRAN (R 4.2.1)\n##    codetools        0.2-18     2020-11-04 [2] CRAN (R 4.0.3)\n##    colorspace       2.0-3      2022-02-21 [1] CRAN (R 4.1.2)\n##    commonmark       1.8.1      2022-10-14 [1] CRAN (R 4.2.2)\n##    cpp11            0.4.3      2022-10-12 [1] CRAN (R 4.2.1)\n##    crayon           1.5.2      2022-09-29 [1] CRAN (R 4.2.1)\n##    credentials      1.3.2      2021-11-29 [1] CRAN (R 4.2.1)\n##    curl             4.3.3      2022-10-06 [1] CRAN (R 4.2.1)\n##    data.table       1.14.4     2022-10-17 [1] CRAN (R 4.2.2)\n##    DBI              1.1.3      2022-06-18 [1] CRAN (R 4.2.1)\n##    dbplyr           2.2.1      2022-06-27 [1] CRAN (R 4.2.1)\n##    desc             1.4.2      2022-09-08 [1] CRAN (R 4.2.1)\n##    devtools         2.4.5      2022-10-11 [1] CRAN (R 4.2.2)\n##    diffobj          0.3.5      2021-10-05 [1] CRAN (R 4.2.1)\n##  P digest           0.6.30     2022-10-18 [?] CRAN (R 4.2.1)\n##    downlit          0.4.2      2022-07-05 [1] CRAN (R 4.2.1)\n##    dplyr            1.0.10     2022-09-01 [1] CRAN (R 4.2.1)\n##    dtplyr           1.2.2      2022-08-20 [1] CRAN (R 4.2.1)\n##    ellipsis         0.3.2      2021-04-29 [1] CRAN (R 4.0.5)\n##    emoji            15.0       2022-11-03 [1] CRAN (R 4.2.2)\n##  P evaluate         0.18       2022-11-07 [?] CRAN (R 4.2.2)\n##    exams            2.4-0      2022-10-17 [1] CRAN (R 4.2.2)\n##    fansi            1.0.3      2022-03-24 [1] CRAN (R 4.1.3)\n##    farver           2.1.1      2022-07-06 [1] CRAN (R 4.2.1)\n##  P fastmap          1.1.0      2021-01-25 [?] CRAN (R 4.0.3)\n##    fontawesome      0.4.0      2022-10-25 [1] CRAN (R 4.2.2)\n##    forcats          0.5.2      2022-08-19 [1] CRAN (R 4.2.1)\n##    foreign          0.8-82     2022-01-13 [2] CRAN (R 4.1.2)\n##    fs               1.5.2      2021-12-08 [1] CRAN (R 4.1.2)\n##    gapminder        0.3.0      2017-10-31 [1] CRAN (R 4.2.1)\n##    gargle           1.2.1      2022-09-08 [1] CRAN (R 4.2.1)\n##    generics         0.1.3      2022-07-05 [1] CRAN (R 4.2.1)\n##    gert             1.9.1      2022-10-05 [1] CRAN (R 4.2.2)\n##    ggplot2          3.4.0      2022-11-04 [1] CRAN (R 4.2.2)\n##    gh               1.3.1      2022-09-08 [1] CRAN (R 4.2.1)\n##    gitcreds         0.1.2      2022-09-08 [1] CRAN (R 4.2.1)\n##  P glue             1.6.2      2022-02-24 [?] CRAN (R 4.1.2)\n##    googledrive      2.0.0      2021-07-08 [1] CRAN (R 4.1.0)\n##    googlesheets4    1.0.1      2022-08-13 [1] CRAN (R 4.2.1)\n##    gt               0.8.0      2022-11-16 [1] CRAN (R 4.2.2)\n##    gtable           0.3.1      2022-09-01 [1] CRAN (R 4.2.1)\n##    gtExtras         0.4.3      2022-11-05 [1] CRAN (R 4.2.2)\n##    gtsummary        1.6.2      2022-09-30 [1] CRAN (R 4.2.1)\n##    haven            2.5.1      2022-08-22 [1] CRAN (R 4.2.1)\n##    here             1.0.1      2020-12-13 [1] CRAN (R 4.2.0)\n##    highr            0.9        2021-04-16 [1] CRAN (R 4.0.5)\n##    hms              1.1.2      2022-08-19 [1] CRAN (R 4.2.1)\n##  P htmltools        0.5.3      2022-07-18 [?] CRAN (R 4.2.1)\n##  P htmlwidgets      1.5.4      2021-09-08 [?] CRAN (R 4.2.1)\n##    httpuv           1.6.6      2022-09-08 [1] CRAN (R 4.2.1)\n##    httr             1.4.4      2022-08-17 [1] CRAN (R 4.2.1)\n##    ids              1.0.1      2017-05-31 [1] CRAN (R 4.0.0)\n##    ini              0.3.1      2018-05-20 [1] CRAN (R 4.2.1)\n##    isoband          0.2.6      2022-10-06 [1] CRAN (R 4.2.1)\n##    janitor          2.1.0      2021-01-05 [1] CRAN (R 4.2.0)\n##    jquerylib        0.1.4      2021-04-26 [1] CRAN (R 4.0.5)\n##  P jsonlite         1.8.3      2022-10-21 [?] CRAN (R 4.2.1)\n##    juicyjuice       0.1.0      2022-11-10 [1] CRAN (R 4.2.2)\n##    KernSmooth       2.23-20    2021-05-03 [2] CRAN (R 4.0.5)\n##  P knitr            1.40       2022-08-24 [?] CRAN (R 4.2.1)\n##    labeling         0.4.2      2020-10-20 [1] CRAN (R 4.0.3)\n##    labelled         2.10.0     2022-09-14 [1] CRAN (R 4.2.1)\n##    later            1.3.0      2021-08-18 [1] CRAN (R 4.2.0)\n##    lattice          0.20-45    2021-09-22 [2] CRAN (R 4.2.0)\n##  P lifecycle        1.0.3      2022-10-07 [?] CRAN (R 4.2.1)\n##    lubridate        1.9.0      2022-11-06 [1] CRAN (R 4.2.2)\n##  P magrittr         2.0.3      2022-03-30 [?] CRAN (R 4.1.3)\n##    markdown         1.3        2022-10-29 [1] CRAN (R 4.2.2)\n##    MASS             7.3-58.1   2022-08-03 [2] CRAN (R 4.2.1)\n##    Matrix           1.5-3      2022-11-11 [2] CRAN (R 4.2.2)\n##    memoise          2.0.1      2021-11-26 [1] CRAN (R 4.2.0)\n##    mgcv             1.8-41     2022-10-21 [2] CRAN (R 4.2.1)\n##    mime             0.12       2021-09-28 [1] CRAN (R 4.1.1)\n##    miniUI           0.1.1.1    2018-05-18 [1] CRAN (R 4.2.1)\n##    modelr           0.1.9      2022-08-19 [1] CRAN (R 4.2.1)\n##    munsell          0.5.0      2018-06-12 [1] CRAN (R 4.0.0)\n##    nlme             3.1-160    2022-10-10 [2] CRAN (R 4.2.1)\n##    nnet             7.3-18     2022-09-28 [2] CRAN (R 4.2.1)\n##    openssl          2.0.4      2022-10-17 [1] CRAN (R 4.2.2)\n##    packrat          0.8.1      2022-06-29 [1] CRAN (R 4.2.1)\n##    paletteer        1.5.0      2022-10-19 [1] CRAN (R 4.2.2)\n##    palmerpenguins   0.1.1      2022-08-15 [1] CRAN (R 4.2.1)\n##    pillar           1.8.1      2022-08-19 [1] CRAN (R 4.2.1)\n##    pkgbuild         1.3.1      2021-12-20 [1] CRAN (R 4.2.1)\n##    pkgconfig        2.0.3      2019-09-22 [1] CRAN (R 4.0.0)\n##    pkgdown          2.0.6      2022-07-16 [1] CRAN (R 4.2.1)\n##    pkgload          1.3.1      2022-10-28 [1] CRAN (R 4.2.2)\n##    praise           1.0.0      2015-08-11 [1] CRAN (R 4.2.1)\n##    prettyunits      1.1.1      2020-01-24 [1] CRAN (R 4.0.0)\n##    prismatic        1.1.1      2022-08-15 [1] CRAN (R 4.2.1)\n##    processx         3.8.0      2022-10-26 [1] CRAN (R 4.2.2)\n##    profvis          0.3.7      2020-11-02 [1] CRAN (R 4.2.1)\n##    progress         1.2.2      2019-05-16 [1] CRAN (R 4.0.0)\n##    promises         1.2.0.1    2021-02-11 [1] CRAN (R 4.2.0)\n##    ps               1.7.2      2022-10-26 [1] CRAN (R 4.2.2)\n##    purrr            0.3.5      2022-10-06 [1] CRAN (R 4.2.1)\n##    R6               2.5.1      2021-08-19 [1] CRAN (R 4.1.1)\n##    ragg             1.2.4      2022-10-24 [1] CRAN (R 4.2.2)\n##    rappdirs         0.3.3      2021-01-31 [1] CRAN (R 4.0.3)\n##    rcmdcheck        1.4.0      2021-09-27 [1] CRAN (R 4.2.1)\n##    RColorBrewer     1.1-3      2022-04-03 [1] CRAN (R 4.1.3)\n##    Rcpp             1.0.9      2022-07-08 [1] CRAN (R 4.2.1)\n##    readr            2.1.3      2022-10-01 [1] CRAN (R 4.2.1)\n##    readxl           1.4.1      2022-08-17 [1] CRAN (R 4.2.1)\n##    rematch          1.0.1      2016-04-21 [1] CRAN (R 4.0.0)\n##    rematch2         2.1.2      2020-05-01 [1] CRAN (R 4.0.0)\n##    remotes          2.4.2      2021-11-30 [1] CRAN (R 4.2.1)\n##    renv             0.15.5     2022-05-26 [1] CRAN (R 4.2.0)\n##    reprex           2.0.2      2022-08-17 [1] CRAN (R 4.2.1)\n##  P rlang            1.0.6      2022-09-24 [?] CRAN (R 4.2.1)\n##  P rmarkdown        2.18       2022-11-09 [?] CRAN (R 4.2.2)\n##    roxygen2         7.2.1      2022-07-18 [1] CRAN (R 4.2.1)\n##    rpart            4.1.19     2022-10-21 [2] CRAN (R 4.2.1)\n##    rprojroot        2.0.3      2022-04-02 [1] CRAN (R 4.1.3)\n##    rsconnect        0.8.28     2022-10-24 [1] CRAN (R 4.2.2)\n##    rstudioapi       0.14       2022-08-22 [1] CRAN (R 4.2.1)\n##    rversions        2.1.2      2022-08-31 [1] CRAN (R 4.2.1)\n##    rvest            1.0.3      2022-08-19 [1] CRAN (R 4.2.1)\n##    sass             0.4.2      2022-07-16 [1] CRAN (R 4.2.1)\n##    scales           1.2.1      2022-08-20 [1] CRAN (R 4.2.1)\n##    selectr          0.4-2      2019-11-20 [1] CRAN (R 4.0.0)\n##  P sessioninfo      1.2.2      2021-12-06 [?] CRAN (R 4.2.1)\n##    shiny            1.7.3      2022-10-25 [1] CRAN (R 4.2.2)\n##    snakecase        0.11.0     2019-05-25 [1] CRAN (R 4.2.0)\n##    sourcetools      0.1.7      2018-04-25 [1] CRAN (R 4.2.0)\n##    spatial          7.3-15     2022-01-13 [2] CRAN (R 4.1.2)\n##  P stringi          1.7.8      2022-07-11 [?] CRAN (R 4.2.1)\n##  P stringr          1.4.1.9000 2022-11-09 [?] Github (tidyverse/stringr@f482fb0)\n##    survival         3.4-0      2022-08-09 [2] CRAN (R 4.2.1)\n##    svglite          2.1.0      2022-02-03 [1] CRAN (R 4.2.1)\n##    sys              3.4.1      2022-10-18 [1] CRAN (R 4.2.2)\n##    systemfonts      1.0.4      2022-02-11 [1] CRAN (R 4.1.2)\n##    testthat         3.1.5      2022-10-08 [1] CRAN (R 4.2.2)\n##    textshaping      0.3.6      2021-10-13 [1] CRAN (R 4.2.1)\n##    thematic         0.1.2.1    2021-06-09 [1] CRAN (R 4.2.0)\n##    tibble           3.1.8      2022-07-22 [1] CRAN (R 4.2.1)\n##    tidyr            1.2.1      2022-09-08 [1] CRAN (R 4.2.1)\n##    tidyselect       1.2.0      2022-10-10 [1] CRAN (R 4.2.1)\n##    tidyverse        1.3.2      2022-07-18 [1] CRAN (R 4.2.1)\n##    timechange       0.1.1      2022-11-04 [1] CRAN (R 4.2.2)\n##    tinytex          0.42       2022-09-27 [1] CRAN (R 4.2.1)\n##    tzdb             0.3.0      2022-03-28 [1] CRAN (R 4.1.3)\n##    urlchecker       1.0.1      2021-11-30 [1] CRAN (R 4.2.1)\n##    usethis          2.1.6      2022-05-25 [1] CRAN (R 4.2.1)\n##    utf8             1.2.2      2021-07-24 [1] CRAN (R 4.1.0)\n##    uuid             1.1-0      2022-04-19 [1] CRAN (R 4.2.0)\n##    V8               4.2.2      2022-11-03 [1] CRAN (R 4.2.2)\n##    vctrs            0.5.1.9000 2022-11-18 [1] Github (r-lib/vctrs@48794fd)\n##    viridisLite      0.4.1      2022-08-22 [1] CRAN (R 4.2.1)\n##    vroom            1.6.0      2022-09-30 [1] CRAN (R 4.2.1)\n##    waldo            0.4.0      2022-03-16 [1] CRAN (R 4.2.1)\n##    webshot2         0.1.0      2022-05-18 [1] CRAN (R 4.2.1)\n##    websocket        1.4.1      2021-08-18 [1] CRAN (R 4.2.1)\n##    whisker          0.4        2019-08-28 [1] CRAN (R 4.2.1)\n##    withr            2.5.0      2022-03-03 [1] CRAN (R 4.1.3)\n##  P xfun             0.34       2022-10-18 [?] CRAN (R 4.2.2)\n##    xml2             1.3.3      2021-11-30 [1] CRAN (R 4.1.2)\n##    xopen            1.0.0      2018-09-17 [1] CRAN (R 4.2.1)\n##    xtable           1.8-4      2019-04-21 [1] CRAN (R 4.2.0)\n##    yaml             2.3.6      2022-10-18 [1] CRAN (R 4.2.1)\n##    zip              2.2.2      2022-10-26 [1] CRAN (R 4.2.2)\n## \n##  [1] /media/albert/Files/NextCloud/R Projects/gt_book/renv/library/R-4.2/x86_64-pc-linux-gnu\n##  [2] /usr/lib/R/library\n## \n##  P ── Loaded and on-disk path mismatch.\n## \n## ──────────────────────────────────────────────────────────────────────────────\n\n\nquarto check\n## \n## \n[✓] Checking Quarto installation......OK\n##       Version: 1.2.267\n##       Path: /opt/quarto/bin\n## \n## \n(|) Checking basic markdown render....\n(/) Checking basic markdown render....\u001b[2K\u001b[G\n[✓] Checking basic markdown render....OK\n## \n## \u001b[2K\u001b[G\n[✓] Checking Python 3 installation....OK\n##       Version: 3.8.10\n##       Path: /usr/bin/python3\n##       Jupyter: (None)\n## \n##       Jupyter is not available in this Python installation.\n##       Install with \u001b[1mpython3 -m pip install jupyter\u001b[22m\n## \n## \n(|) Checking R installation...........\n(/) Checking R installation...........\n(-) Checking R installation...........\n(\\) Checking R installation...........\u001b[2K\u001b[G\n[✓] Checking R installation...........OK\n##       Version: 4.2.2\n##       Path: /usr/lib/R\n##       LibPaths:\n##         - /media/albert/Files/NextCloud/R Projects/gt_book/renv/library/R-4.2/x86_64-pc-linux-gnu\n##         - /usr/lib/R/library\n##       rmarkdown: 2.18\n## \n## \n(|) Checking Knitr engine render......\n(/) Checking Knitr engine render......\n(-) Checking Knitr engine render......\n(\\) Checking Knitr engine render......\n(|) Checking Knitr engine render......\n(/) Checking Knitr engine render......\n(-) Checking Knitr engine render......\n(\\) Checking Knitr engine render......\n(|) Checking Knitr engine render......\u001b[2K\u001b[G\n[✓] Checking Knitr engine render......OK"
  },
  {
    "objectID": "getting_started.html#avoid-vertical-lines",
    "href": "getting_started.html#avoid-vertical-lines",
    "title": "1  Getting started",
    "section": "1.1 Avoid vertical lines",
    "text": "1.1 Avoid vertical lines\nThis is the guideline that gives you the biggest bang for your buck. The above table uses waaaay to many grid lines. Without vertical lines, the table will look less cramped.\nThankfully, {gt} seems to live by this rule as it is implemented by default. Thus, we only need to pass our data set penguin_counts_wider to gt(). You can think of this function as the ggplot() analogue: It’s the starting point of any table in the {gt} universe.\n\nlibrary(gt)\npenguin_counts_wider |> \n  gt() \n\n\n\n\n  \n  \n  \n  \n    \n      island\n      year\n      Adelie_female\n      Adelie_male\n      Chinstrap_female\n      Chinstrap_male\n      Gentoo_female\n      Gentoo_male\n    \n  \n  \n    Biscoe\n2007\n5\n5\n0\n0\n16\n17\n    Biscoe\n2008\n9\n9\n0\n0\n22\n23\n    Biscoe\n2009\n8\n8\n0\n0\n20\n21\n    Dream\n2007\n9\n10\n13\n13\n0\n0\n    Dream\n2008\n8\n8\n9\n9\n0\n0\n    Dream\n2009\n10\n10\n12\n12\n0\n0\n    Torgersen\n2007\n8\n7\n0\n0\n0\n0\n    Torgersen\n2008\n8\n8\n0\n0\n0\n0\n    Torgersen\n2009\n8\n8\n0\n0\n0\n0\n  \n  \n  \n\n\n\n\n\nThis isn’t a great table yet but it’s a start. In any case, it feels more open due to less grid lines. Of course, the column labels could be better which brings us to our next point."
  },
  {
    "objectID": "getting_started.html#use-better-column-names",
    "href": "getting_started.html#use-better-column-names",
    "title": "1  Getting started",
    "section": "1.2 Use better column names",
    "text": "1.2 Use better column names\nTo change the column names use the “layer” called cols_layer(). Much like {ggplot2}, {gt} works with layers. To change anything about the table, we just pass the table from layer to the next. This works with piping. Armed with that knowledge, we could label the columns like we did in Figure 1.1.\n\npenguin_counts_wider |> \n  gt() |> \n  cols_label(\n    island = 'Island',\n    year = 'Year',\n    Adelie_female = 'Adelie (female)',\n    Adelie_male = 'Adelie (male)',\n    Chinstrap_female = 'Chinstrap (female)',\n    Chinstrap_male = 'Chinstrap (male)',\n    Gentoo_female = 'Gentoo (female)',\n    Gentoo_male = 'Gentoo (male)',\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      Island\n      Year\n      Adelie (female)\n      Adelie (male)\n      Chinstrap (female)\n      Chinstrap (male)\n      Gentoo (female)\n      Gentoo (male)\n    \n  \n  \n    Biscoe\n2007\n5\n5\n0\n0\n16\n17\n    Biscoe\n2008\n9\n9\n0\n0\n22\n23\n    Biscoe\n2009\n8\n8\n0\n0\n20\n21\n    Dream\n2007\n9\n10\n13\n13\n0\n0\n    Dream\n2008\n8\n8\n9\n9\n0\n0\n    Dream\n2009\n10\n10\n12\n12\n0\n0\n    Torgersen\n2007\n8\n7\n0\n0\n0\n0\n    Torgersen\n2008\n8\n8\n0\n0\n0\n0\n    Torgersen\n2009\n8\n8\n0\n0\n0\n0\n  \n  \n  \n\n\n\n\n\nBut this isn’t a great way to label the columns. So let’s do something else instead. First, let us create so-called spanners. These are joined columns and can be created with tab_spanner() layers. You’ll need one layer for each spanner.\n\npenguin_counts_wider |> \n  gt() |> \n  cols_label(\n    island = 'Island',\n    year = 'Year',\n    Adelie_female = 'Adelie (female)',\n    Adelie_male = 'Adelie (male)',\n    Chinstrap_female = 'Chinstrap (female)',\n    Chinstrap_male = 'Chinstrap (male)',\n    Gentoo_female = 'Gentoo (female)',\n    Gentoo_male = 'Gentoo (male)',\n  ) |> \n  tab_spanner(\n    label = md('**Adelie**'),\n    columns = 3:4\n  ) |> \n  tab_spanner(\n    label = md('**Chinstrap**'),\n    columns = c('Chinstrap_female', 'Chinstrap_male')\n  ) |> \n  tab_spanner(\n    label =  md('**Gentoo**'),\n    columns = contains('Gentoo')\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      Island\n      Year\n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Adelie (female)\n      Adelie (male)\n      Chinstrap (female)\n      Chinstrap (male)\n      Gentoo (female)\n      Gentoo (male)\n    \n  \n  \n    Biscoe\n2007\n5\n5\n0\n0\n16\n17\n    Biscoe\n2008\n9\n9\n0\n0\n22\n23\n    Biscoe\n2009\n8\n8\n0\n0\n20\n21\n    Dream\n2007\n9\n10\n13\n13\n0\n0\n    Dream\n2008\n8\n8\n9\n9\n0\n0\n    Dream\n2009\n10\n10\n12\n12\n0\n0\n    Torgersen\n2007\n8\n7\n0\n0\n0\n0\n    Torgersen\n2008\n8\n8\n0\n0\n0\n0\n    Torgersen\n2009\n8\n8\n0\n0\n0\n0\n  \n  \n  \n\n\n\n\n\nAs you can see, tab_spanner() always requires two arguments label and columns. For the columns argument I have shown you three ways to get the job done:\n\nVector of column numbers\nVector of column names\ntidyselect helpers\n\nFor the label argument you can either just state a character vector or you can wrap one in md() to enable Markdown syntax (like **bold text**).\nOkay, now we don’t really need the Species labels in the actual column names anymore. The spanners already state that for us. So, let us modify our previous code to rename the columns. To do so, let me show you a cool trick that may save you some tedious typing.\nFirst, we create a named vector that contains the actual and the desired column names.\n\nactual_colnames <- colnames(penguin_counts_wider)\nactual_colnames\n## [1] \"island\"           \"year\"             \"Adelie_female\"    \"Adelie_male\"     \n## [5] \"Chinstrap_female\" \"Chinstrap_male\"   \"Gentoo_female\"    \"Gentoo_male\"\ndesired_colnames <- actual_colnames |> \n  str_remove('(Adelie|Gentoo|Chinstrap)_') |> \n  str_to_title()\n\nnames(desired_colnames) <- actual_colnames\ndesired_colnames\n##           island             year    Adelie_female      Adelie_male \n##         \"Island\"           \"Year\"         \"Female\"           \"Male\" \n## Chinstrap_female   Chinstrap_male    Gentoo_female      Gentoo_male \n##         \"Female\"           \"Male\"         \"Female\"           \"Male\"\n\nThen, we can use this named vector as the .list argument in cols_label().\n\npenguin_counts_wider |> \n  gt() |> \n  cols_label(.list = desired_colnames) |> \n  tab_spanner(\n    label = md('**Adelie**'),\n    columns = 3:4\n  ) |> \n  tab_spanner(\n    label = md('**Chinstrap**'),\n    columns = c('Chinstrap_female', 'Chinstrap_male')\n  ) |> \n  tab_spanner(\n    label =  md('**Gentoo**'),\n    columns = contains('Gentoo')\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      Island\n      Year\n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    Biscoe\n2007\n5\n5\n0\n0\n16\n17\n    Biscoe\n2008\n9\n9\n0\n0\n22\n23\n    Biscoe\n2009\n8\n8\n0\n0\n20\n21\n    Dream\n2007\n9\n10\n13\n13\n0\n0\n    Dream\n2008\n8\n8\n9\n9\n0\n0\n    Dream\n2009\n10\n10\n12\n12\n0\n0\n    Torgersen\n2007\n8\n7\n0\n0\n0\n0\n    Torgersen\n2008\n8\n8\n0\n0\n0\n0\n    Torgersen\n2009\n8\n8\n0\n0\n0\n0\n  \n  \n  \n\n\n\n\n\nFinally, while we’re currently changing labels, let us add one important label - the title. The tab_header() layer does the trick.\n\npenguin_counts_wider |> \n  gt() |> \n  cols_label(.list = desired_colnames) |> \n  tab_spanner(\n    label = md('**Adelie**'),\n    columns = 3:4\n  ) |> \n  tab_spanner(\n    label = md('**Chinstrap**'),\n    columns = c('Chinstrap_female', 'Chinstrap_male')\n  ) |> \n  tab_spanner(\n    label =  md('**Gentoo**'),\n    columns = contains('Gentoo')\n  ) |> \n  tab_header(\n    title = 'Penguins in the Palmer Archipelago',\n    subtitle = 'Data is courtesy of the {palmerpenguins} R package'\n  ) \n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      Island\n      Year\n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    Biscoe\n2007\n5\n5\n0\n0\n16\n17\n    Biscoe\n2008\n9\n9\n0\n0\n22\n23\n    Biscoe\n2009\n8\n8\n0\n0\n20\n21\n    Dream\n2007\n9\n10\n13\n13\n0\n0\n    Dream\n2008\n8\n8\n9\n9\n0\n0\n    Dream\n2009\n10\n10\n12\n12\n0\n0\n    Torgersen\n2007\n8\n7\n0\n0\n0\n0\n    Torgersen\n2008\n8\n8\n0\n0\n0\n0\n    Torgersen\n2009\n8\n8\n0\n0\n0\n0\n  \n  \n  \n\n\n\n\n\nBy the same trick we could also add a caption for a Quarto document (tab_caption()), a footnote (tab_footnote()) or another source note (tab_sourcenote()), In this case it’s a bit much, though. So I won’t add them. Just know that these functions exist in case you need them. For now, let us talk about our next guideline.\nBefore we can do that, let me mention one small thing: Our spanners and headers will not change as we move along this tutorial. To avoid repeating them all the time, let me wrap them in a function.\n\nspanners_and_header <- function(gt_tbl) {\n  gt_tbl |> \n    tab_spanner(\n      label = md('**Adelie**'),\n      columns = 3:4\n    ) |> \n    tab_spanner(\n      label = md('**Chinstrap**'),\n      columns = c('Chinstrap_female', 'Chinstrap_male')\n    ) |> \n    tab_spanner(\n      label =  md('**Gentoo**'),\n      columns = contains('Gentoo')\n    ) |> \n    tab_header(\n      title = 'Penguins in the Palmer Archipelago',\n      subtitle = 'Data is courtesy of the {palmerpenguins} R package'\n    ) \n}\n\n# This produces the same output\npenguin_counts_wider |> \n  gt() |> \n  cols_label(.list = desired_colnames)  |> \n  spanners_and_header() \n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      Island\n      Year\n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    Biscoe\n2007\n5\n5\n0\n0\n16\n17\n    Biscoe\n2008\n9\n9\n0\n0\n22\n23\n    Biscoe\n2009\n8\n8\n0\n0\n20\n21\n    Dream\n2007\n9\n10\n13\n13\n0\n0\n    Dream\n2008\n8\n8\n9\n9\n0\n0\n    Dream\n2009\n10\n10\n12\n12\n0\n0\n    Torgersen\n2007\n8\n7\n0\n0\n0\n0\n    Torgersen\n2008\n8\n8\n0\n0\n0\n0\n    Torgersen\n2009\n8\n8\n0\n0\n0\n0"
  },
  {
    "objectID": "getting_started.html#align-columns",
    "href": "getting_started.html#align-columns",
    "title": "1  Getting started",
    "section": "1.3 Align columns",
    "text": "1.3 Align columns\nDid you notice that gt() aligned the columns differently? That’s because the columns of the corresponding data.frame/tibble contained different data types. Specifically:\n\nthe counts are integers and aligned to the right\nthe year column is a character vector and uses alignment to the left (though it’s not totally visible because the column is narrow)\nthe island column is a factor and uses center alignment (even though its entries are characters)\n\nIt’s a good default to align numbers to the right and texts to the left. Why? Because it’s more readable. Need an example? Here’s one. Most (western) people will probably say that the left column is the easiest to read because we read from left to right.\n\n\n\n\n\nFor numbers it’s the other way around. That’s because right-aligned numbers make it easy to see how many digits a number has compared to other numbers. This assumes that your numbers use a font that assigns equal width to all digits (monospace fonts).\nSo, let us align the island and year column. We can either do this by transforming the data types before even calling gt(). Or we use the cols_align() layer. Once again, this layer understands text locations and tidyselection helpers.\n\nConversionAlign\n\n\n\npenguin_counts_wider |> \n  mutate(\n    island = as.character(island), \n    year = as.numeric(year)\n  ) |> \n  gt() |> \n  cols_label(.list = desired_colnames) |> \n  spanners_and_header() \n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      Island\n      Year\n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    Biscoe\n2007\n5\n5\n0\n0\n16\n17\n    Biscoe\n2008\n9\n9\n0\n0\n22\n23\n    Biscoe\n2009\n8\n8\n0\n0\n20\n21\n    Dream\n2007\n9\n10\n13\n13\n0\n0\n    Dream\n2008\n8\n8\n9\n9\n0\n0\n    Dream\n2009\n10\n10\n12\n12\n0\n0\n    Torgersen\n2007\n8\n7\n0\n0\n0\n0\n    Torgersen\n2008\n8\n8\n0\n0\n0\n0\n    Torgersen\n2009\n8\n8\n0\n0\n0\n0\n  \n  \n  \n\n\n\n\n\n\n\n\npenguin_counts_wider |> \n  gt() |> \n  cols_label(.list = desired_colnames) |> \n  spanners_and_header()  |> \n  cols_align(align = 'right', columns = 'year') |> \n  cols_align(\n    align = 'left', \n    columns = where(is.factor)\n  )\n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      Island\n      Year\n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    Biscoe\n2007\n5\n5\n0\n0\n16\n17\n    Biscoe\n2008\n9\n9\n0\n0\n22\n23\n    Biscoe\n2009\n8\n8\n0\n0\n20\n21\n    Dream\n2007\n9\n10\n13\n13\n0\n0\n    Dream\n2008\n8\n8\n9\n9\n0\n0\n    Dream\n2009\n10\n10\n12\n12\n0\n0\n    Torgersen\n2007\n8\n7\n0\n0\n0\n0\n    Torgersen\n2008\n8\n8\n0\n0\n0\n0\n    Torgersen\n2009\n8\n8\n0\n0\n0\n0"
  },
  {
    "objectID": "getting_started.html#use-groups-instead-of-repetitive-columns",
    "href": "getting_started.html#use-groups-instead-of-repetitive-columns",
    "title": "1  Getting started",
    "section": "1.4 Use groups instead of repetitive columns",
    "text": "1.4 Use groups instead of repetitive columns\nThe island column is somewhat repetitive. In cases like these, I’d rather remove the column. Instead, I would group the table using additional rows. I like to think that this comes with better readability.\nWith {gt}, this grouping is easy. We only need to specify the groupname_col argument in gt(). If we want, we can also set the rowname_col argument to year. This will format the “Year” column a bit differently.\n\nGroupsGroups + row names\n\n\n\npenguin_counts_wider |> \n  mutate(\n    island = as.character(island), \n    year = as.numeric(year)\n  ) |> \n  gt(groupname_col = 'island') |> \n  cols_label(.list = desired_colnames) |> \n  spanners_and_header() \n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      Year\n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Biscoe\n    \n    2007\n5\n5\n0\n0\n16\n17\n    2008\n9\n9\n0\n0\n22\n23\n    2009\n8\n8\n0\n0\n20\n21\n    \n      Dream\n    \n    2007\n9\n10\n13\n13\n0\n0\n    2008\n8\n8\n9\n9\n0\n0\n    2009\n10\n10\n12\n12\n0\n0\n    \n      Torgersen\n    \n    2007\n8\n7\n0\n0\n0\n0\n    2008\n8\n8\n0\n0\n0\n0\n    2009\n8\n8\n0\n0\n0\n0\n  \n  \n  \n\n\n\n\n\n\n\n\npenguin_counts_wider |> \n  mutate(\n    island = as.character(island), \n    year = as.numeric(year)\n  ) |> \n  gt(groupname_col = 'island', rowname_col = 'year') |> \n  cols_label(.list = desired_colnames) |> \n  spanners_and_header() \n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      \n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Biscoe\n    \n    2007\n5\n5\n0\n0\n16\n17\n    2008\n9\n9\n0\n0\n22\n23\n    2009\n8\n8\n0\n0\n20\n21\n    \n      Dream\n    \n    2007\n9\n10\n13\n13\n0\n0\n    2008\n8\n8\n9\n9\n0\n0\n    2009\n10\n10\n12\n12\n0\n0\n    \n      Torgersen\n    \n    2007\n8\n7\n0\n0\n0\n0\n    2008\n8\n8\n0\n0\n0\n0\n    2009\n8\n8\n0\n0\n0\n0\n  \n  \n  \n\n\n\n\n\n\n\n\nIn this case, I prefer the latter style because we don’t really need a “Year” label to identify 2007, 2008 and 2009 as years. But an island label could be nice (I’m really bad with geography). The easiest way to add that to the group names is via string manipulation before gt() is called.\n\npenguin_counts_wider |> \n  mutate(\n    island = as.character(island), \n    year = as.numeric(year),\n    island = paste0('Island: ', island)\n  ) |> \n  gt(groupname_col = 'island', rowname_col = 'year') |> \n  cols_label(.list = desired_colnames) |> \n  spanners_and_header() \n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      \n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Island: Biscoe\n    \n    2007\n5\n5\n0\n0\n16\n17\n    2008\n9\n9\n0\n0\n22\n23\n    2009\n8\n8\n0\n0\n20\n21\n    \n      Island: Dream\n    \n    2007\n9\n10\n13\n13\n0\n0\n    2008\n8\n8\n9\n9\n0\n0\n    2009\n10\n10\n12\n12\n0\n0\n    \n      Island: Torgersen\n    \n    2007\n8\n7\n0\n0\n0\n0\n    2008\n8\n8\n0\n0\n0\n0\n    2009\n8\n8\n0\n0\n0\n0"
  },
  {
    "objectID": "getting_started.html#remove-missing-numbers",
    "href": "getting_started.html#remove-missing-numbers",
    "title": "1  Getting started",
    "section": "1.5 Remove missing numbers",
    "text": "1.5 Remove missing numbers\nNotice that our table has a lot of zeroes in it. For better readability, let us replace the zeroes with something more lightweight. We accomplish this with the sub_zero() layer.\n\npenguin_counts_wider |> \n  mutate(\n    island = as.character(island), \n    year = as.numeric(year),\n    island = paste0('Island: ', island)\n  ) |> \n  gt(groupname_col = 'island', rowname_col = 'year') |> \n  cols_label(.list = desired_colnames) |> \n  spanners_and_header()  |> \n  sub_zero(zero_text = '-') \n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      \n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Island: Biscoe\n    \n    2007\n5\n5\n-\n-\n16\n17\n    2008\n9\n9\n-\n-\n22\n23\n    2009\n8\n8\n-\n-\n20\n21\n    \n      Island: Dream\n    \n    2007\n9\n10\n13\n13\n-\n-\n    2008\n8\n8\n9\n9\n-\n-\n    2009\n10\n10\n12\n12\n-\n-\n    \n      Island: Torgersen\n    \n    2007\n8\n7\n-\n-\n-\n-\n    2008\n8\n8\n-\n-\n-\n-\n    2009\n8\n8\n-\n-\n-\n-\n  \n  \n  \n\n\n\n\n\nThere are more sub_*() functions in {gt}. We will learn about them in Section 3.2."
  },
  {
    "objectID": "getting_started.html#add-summaries",
    "href": "getting_started.html#add-summaries",
    "title": "1  Getting started",
    "section": "1.6 Add summaries",
    "text": "1.6 Add summaries\nNow, this table looks already cleaner than what we started with. In this format, we could even add more information at little cost.\nFor example, we could add a summary for each group. In this case, a summary could be as simple as a total or maximum over all years (we’ll just assume that this makes sense for our penguin data).\nHere, the key layer is summary_rows(). Let’s have a look at what it can produce and then I’ll explain.\n\npenguin_counts_wider |> \n  mutate(\n    island = as.character(island), \n    year = as.numeric(year),\n    island = paste0('Island: ', island)\n  ) |> \n  gt(groupname_col = 'island', rowname_col = 'year') |> \n  cols_label(.list = desired_colnames) |> \n  spanners_and_header()  |> \n  sub_zero(zero_text = '-') |>\n  summary_rows(\n    groups = TRUE,\n    fns = list(\n      'Maximum' = ~max(.),\n      'Total' = ~sum(.)\n    ),\n    formatter = fmt_number,\n    decimals = 0\n  ) \n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      \n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Island: Biscoe\n    \n    2007\n5\n5\n-\n-\n16\n17\n    2008\n9\n9\n-\n-\n22\n23\n    2009\n8\n8\n-\n-\n20\n21\n    Maximum\n9\n9\n0\n0\n22\n23\n    Total\n22\n22\n0\n0\n58\n61\n    \n      Island: Dream\n    \n    2007\n9\n10\n13\n13\n-\n-\n    2008\n8\n8\n9\n9\n-\n-\n    2009\n10\n10\n12\n12\n-\n-\n    Maximum\n10\n10\n13\n13\n0\n0\n    Total\n27\n28\n34\n34\n0\n0\n    \n      Island: Torgersen\n    \n    2007\n8\n7\n-\n-\n-\n-\n    2008\n8\n8\n-\n-\n-\n-\n    2009\n8\n8\n-\n-\n-\n-\n    Maximum\n8\n8\n0\n0\n0\n0\n    Total\n24\n23\n0\n0\n0\n0\n  \n  \n  \n\n\n\n\n\nThe summary_rows() function works with a named list of functions (one function for each summary). As you’ve seen, you can create one using list('Name' = ~fct(.)). In this case, . represents the column data. All other arguments can be named as usual. For example, you could do something like ~mean(., na.rm = TRUE).1\nNotice that I had to set groups = TRUE. Otherwise, we would get summary rows at the end of the table (using all data). This is also known as a “grand summary”.\nFurther, the output of the summary function had to be formatted. By default, the output would contain two decimals. So, we’d get numbers like 9.00. Here, fmt_number() is the formatter that corrected that. But we had to tell it to use decimals = 0. We’ll learn more about the fmt_*() family in Section 3.1.\nNow that we’ve added more information to the table, it became quite long. We can amend that by reducing the row heights. Frankly, they have been too large for my taste for some time now.\nTo do so, we could set the so-called data_row.padding to 2 pixels. This is done with tab_options(), the premier layer to style the table2. Similarly, there are padding options for summary_row and row_group3. And while we’re at it, why not apply a pre-defined theme to our table with opt_stylize()?\n\npenguin_counts_wider |> \n  mutate(\n    island = as.character(island), \n    year = as.numeric(year),\n    island = paste0('Island: ', island)\n  ) |> \n  gt(groupname_col = 'island', rowname_col = 'year') |> \n  cols_label(.list = desired_colnames) |> \n  spanners_and_header()  |> \n  sub_zero(zero_text = '-') |>\n  summary_rows(\n    groups = TRUE,\n    fns = list(\n      'Maximum' = ~max(.),\n      'Total' = ~sum(.)\n    ),\n    formatter = fmt_number,\n    decimals = 0\n  )  |> \n  tab_options(\n    data_row.padding = px(2),\n    summary_row.padding = px(3), # A bit more padding for summaries\n    row_group.padding = px(4)    # And even more for our groups\n  ) |> \n  opt_stylize(style = 6, color = 'gray')\n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      \n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Island: Biscoe\n    \n    2007\n5\n5\n-\n-\n16\n17\n    2008\n9\n9\n-\n-\n22\n23\n    2009\n8\n8\n-\n-\n20\n21\n    Maximum\n9\n9\n0\n0\n22\n23\n    Total\n22\n22\n0\n0\n58\n61\n    \n      Island: Dream\n    \n    2007\n9\n10\n13\n13\n-\n-\n    2008\n8\n8\n9\n9\n-\n-\n    2009\n10\n10\n12\n12\n-\n-\n    Maximum\n10\n10\n13\n13\n0\n0\n    Total\n27\n28\n34\n34\n0\n0\n    \n      Island: Torgersen\n    \n    2007\n8\n7\n-\n-\n-\n-\n    2008\n8\n8\n-\n-\n-\n-\n    2009\n8\n8\n-\n-\n-\n-\n    Maximum\n8\n8\n0\n0\n0\n0\n    Total\n24\n23\n0\n0\n0\n0\n  \n  \n  \n\n\n\n\n\nThis has been a little foretaste of styling a table. We’ll learn more about changing a table’s theme in Section 4.1.\nFinally, let me address the big inconsistency in the room. We have replaced the zeroes by - earlier. However, the summary rows still display 0. Unfortunately, there is no sub_zero() function that targets the summary rows. So, we’ll do something else instead.\nIn our data set we have replaced all NAs with zero. But we didn’t have to do that. We could just let them be NAs and use sub_missing() to replace them. In summary_rows(), we could then use missing_text = \"-\". I think you get the idea, so I’m just going to fold the code (so you can focus on the result).\n\n\nCode\npenguin_counts_wider |> \n  mutate(across(.cols = -(1:2), ~if_else(. == 0, NA_integer_, .))) |> \n  mutate(\n    island = as.character(island), \n    year = as.numeric(year),\n    island = paste0('Island: ', island)\n  ) |> \n  gt(groupname_col = 'island', rowname_col = 'year') |> \n  cols_label(.list = desired_colnames) |> \n  spanners_and_header()  |> \n  sub_missing(missing_text = '-') |>\n  summary_rows(\n    groups = TRUE,\n    fns = list(\n      'Maximum' = ~max(.),\n      'Total' = ~sum(.) \n    ),\n    formatter = fmt_number,\n    decimals = 0,\n    missing_text = '-'\n  )  |> \n  tab_options(\n    data_row.padding = px(2),\n    summary_row.padding = px(3), # A bit more padding for summaries\n    row_group.padding = px(4)    # And even more for our groups\n  ) |> \n  opt_stylize(style = 6, color = 'gray')\n\n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      \n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Island: Biscoe\n    \n    2007\n5\n5\n-\n-\n16\n17\n    2008\n9\n9\n-\n-\n22\n23\n    2009\n8\n8\n-\n-\n20\n21\n    Maximum\n9\n9\n-\n-\n22\n23\n    Total\n22\n22\n-\n-\n58\n61\n    \n      Island: Dream\n    \n    2007\n9\n10\n13\n13\n-\n-\n    2008\n8\n8\n9\n9\n-\n-\n    2009\n10\n10\n12\n12\n-\n-\n    Maximum\n10\n10\n13\n13\n-\n-\n    Total\n27\n28\n34\n34\n-\n-\n    \n      Island: Torgersen\n    \n    2007\n8\n7\n-\n-\n-\n-\n    2008\n8\n8\n-\n-\n-\n-\n    2009\n8\n8\n-\n-\n-\n-\n    Maximum\n8\n8\n-\n-\n-\n-\n    Total\n24\n23\n-\n-\n-\n-"
  },
  {
    "objectID": "getting_started.html#summary",
    "href": "getting_started.html#summary",
    "title": "1  Getting started",
    "section": "1.7 Summary",
    "text": "1.7 Summary\nWe’ve started this chapter with a terrible table that needed improvement. Over the course of this chapter, we learned and applied six guidelines with {gt}. These guidelines were\n\nAvoid vertical lines\nUse better column names\nAlign columns\nUse groups instead of repetitive columns\nRemove missing numbers\nAdd summaries\n\nIn the table business, these guidelines are pretty basic. I don’t mean basic in a bad or boring way. It’s just that these are solid recommendations that improve tables without any fancy stuff. No icons, no pictures, no other eye-catching elements. Just plain data formatted carefully.\nSo now we’ve learned the basics. No need to stop there. Let’s learn the fancy stuff too. That’s what we’ll do in the next chapter."
  },
  {
    "objectID": "fancy_stuff.html#transform-columns-into-heatmaps",
    "href": "fancy_stuff.html#transform-columns-into-heatmaps",
    "title": "2  Fancy stuff / Eye catchers",
    "section": "2.1 Transform columns into heatmaps",
    "text": "2.1 Transform columns into heatmaps\nIn this table, we can see that Sierra Leone had by far the lowest life expectancy in 2007 (among the depicted countries). We can figure this out by comparing the numbers in the most recent column one-by-one.\nBut that takes quite a lot of effort. Instead, let us make that easier to see by transforming that column into a heat map. To do so, just pass our table to gt_color_rows()1. What you’ll need to specify, is\n\nthe targeted columns\nthe range of the values that are supposed to be colored\ntwo colors that are used in a linear gradient\n\n\n# Two colors from the Okabe Ito color palette\ncolor_palette <- c(\"#CC79A7\", \"#009E73\")\n\nselected_countries |> \n  gt(groupname_col = 'continent') |> \n  tab_header(\n    title = 'Life Expectancies over time',\n    subtitle = 'Data is courtesy of the Gapminder foundation'\n  ) |> \n  cols_label(.list = new_colnames) |> \n  fmt_number(columns = where(is.numeric), decimals = 2) |> \n  gt_theme_538() |> \n  gt_color_rows(\n    columns = year2007, \n    domain = c(30, 85),\n    palette = color_palette\n  )\n\n\n\n\n  \n  \n  \n    \n      Life Expectancies over time\n    \n    \n      Data is courtesy of the Gapminder foundation\n    \n  \n  \n    \n      \n      1957\n      1967\n      1977\n      1987\n      1997\n      2007\n    \n  \n  \n    \n      Africa\n    \n    Egypt\n44.44\n49.29\n53.32\n59.80\n67.22\n71.34\n    Sierra Leone\n31.57\n34.11\n36.79\n40.01\n39.90\n42.57\n    \n      Americas\n    \n    Nicaragua\n45.43\n51.88\n57.47\n62.01\n68.43\n72.90\n    Jamaica\n62.61\n67.51\n70.11\n71.77\n72.26\n72.57\n    \n      Asia\n    \n    Syria\n48.28\n53.66\n61.20\n66.97\n71.53\n74.14\n    Singapore\n63.18\n67.95\n70.80\n73.56\n77.16\n79.97\n    \n      Europe\n    \n    Netherlands\n72.99\n73.82\n75.24\n76.83\n78.03\n79.76\n    United Kingdom\n70.42\n71.36\n72.76\n75.01\n77.22\n79.42\n    \n      Oceania\n    \n    New Zealand\n70.26\n71.52\n72.22\n74.32\n77.55\n80.20\n    Australia\n70.33\n71.10\n73.49\n76.32\n78.83\n81.23\n  \n  \n  \n\n\n\n\n\nWe could also do this for more columns. For example, we could also do the same with the 1957 column.\n\n# Two colors from the Okabe Ito color palette\ncolor_palette <- c(\"#CC79A7\", \"#009E73\")\n\nselected_countries |> \n  gt(groupname_col = 'continent') |> \n  tab_header(\n    title = 'Life Expectancies over time',\n    subtitle = 'Data is courtesy of the Gapminder foundation'\n  ) |> \n  cols_label(.list = new_colnames) |> \n  fmt_number(columns = where(is.numeric), decimals = 2) |> \n  gt_theme_538() |> \n  gt_color_rows(\n    columns = c(year1957, year2007), \n    domain = c(30, 85),\n    palette = color_palette\n  )\n\n\n\n\n  \n  \n  \n    \n      Life Expectancies over time\n    \n    \n      Data is courtesy of the Gapminder foundation\n    \n  \n  \n    \n      \n      1957\n      1967\n      1977\n      1987\n      1997\n      2007\n    \n  \n  \n    \n      Africa\n    \n    Egypt\n44.44\n49.29\n53.32\n59.80\n67.22\n71.34\n    Sierra Leone\n31.57\n34.11\n36.79\n40.01\n39.90\n42.57\n    \n      Americas\n    \n    Nicaragua\n45.43\n51.88\n57.47\n62.01\n68.43\n72.90\n    Jamaica\n62.61\n67.51\n70.11\n71.77\n72.26\n72.57\n    \n      Asia\n    \n    Syria\n48.28\n53.66\n61.20\n66.97\n71.53\n74.14\n    Singapore\n63.18\n67.95\n70.80\n73.56\n77.16\n79.97\n    \n      Europe\n    \n    Netherlands\n72.99\n73.82\n75.24\n76.83\n78.03\n79.76\n    United Kingdom\n70.42\n71.36\n72.76\n75.01\n77.22\n79.42\n    \n      Oceania\n    \n    New Zealand\n70.26\n71.52\n72.22\n74.32\n77.55\n80.20\n    Australia\n70.33\n71.10\n73.49\n76.32\n78.83\n81.23\n  \n  \n  \n\n\n\n\n\nYou could even do that with all columns. But I am not sure whether that’s a good idea here. After all, we may not want to overload our table with colors."
  },
  {
    "objectID": "fancy_stuff.html#add-sparklines",
    "href": "fancy_stuff.html#add-sparklines",
    "title": "2  Fancy stuff / Eye catchers",
    "section": "2.2 Add sparklines",
    "text": "2.2 Add sparklines\nIt is quite hard to figure out that each depicted country increased its life expectancy in each year. Sure, you may have an idea that this is the case. But to be sure for real, you will have to compare each cell of each row.\nWhy don’t we make that a little bit easier? Let us add small line charts. This kind of chart is known as a sparkline. It’s main advantage is that it can make patterns really obvious. Have a look for yourself.\n\n\n\n\n\n\n\n\n  \n  \n  \n    \n      Life Expectancies over time\n    \n    \n      Data is courtesy of the Gapminder foundation\n    \n  \n  \n    \n      \n      1957\n      1967\n      1977\n      1987\n      1997\n      2007\n      Timeline\n    \n  \n  \n    \n      Africa\n    \n    Egypt\n44.44\n49.29\n53.32\n59.80\n67.22\n71.34\n          71.3\n    Sierra Leone\n31.57\n34.11\n36.79\n40.01\n39.90\n42.57\n          42.6\n    \n      Americas\n    \n    Nicaragua\n45.43\n51.88\n57.47\n62.01\n68.43\n72.90\n          72.9\n    Jamaica\n62.61\n67.51\n70.11\n71.77\n72.26\n72.57\n          72.6\n    \n      Asia\n    \n    Syria\n48.28\n53.66\n61.20\n66.97\n71.53\n74.14\n          74.1\n    Singapore\n63.18\n67.95\n70.80\n73.56\n77.16\n79.97\n          80.0\n    \n      Europe\n    \n    Netherlands\n72.99\n73.82\n75.24\n76.83\n78.03\n79.76\n          79.8\n    United Kingdom\n70.42\n71.36\n72.76\n75.01\n77.22\n79.42\n          79.4\n    \n      Oceania\n    \n    New Zealand\n70.26\n71.52\n72.22\n74.32\n77.55\n80.20\n          80.2\n    Australia\n70.33\n71.10\n73.49\n76.32\n78.83\n81.23\n          81.2\n  \n  \n  \n\n\n\n\n\nTo create such a table we first need a tibble that has a column Timeline that contains the values from 1957 to 2007. A column that contains more than one value per cell, you say? Yes, you heard that correctly. What we need is a tibble with list-like columns. Sounds fancy if you’ve never heard it before but it is not actually that hard to create one. Here’s what we’re going to do.\n\nTake the original data set gapminder_data and filter it such that it contains the same years and countries as our data set selected_countries\nGroup the filtered data set by country and run summarise(Timeline = list(c(life_exp))).\n\nThe trick here is to wrap the combine function c() into list(). This way, the new list will become one object that will be saved into a tibble’s cell.\n\nFilterSummary\n\n\n\ngapminder_data |> \n  filter(\n    str_ends(year, \"7\"),\n    country %in% selected_countries$country\n  )\n## # A tibble: 60 × 4\n##    continent country   year  life_exp\n##    <fct>     <chr>     <chr>    <dbl>\n##  1 Oceania   Australia 1957      70.3\n##  2 Oceania   Australia 1967      71.1\n##  3 Oceania   Australia 1977      73.5\n##  4 Oceania   Australia 1987      76.3\n##  5 Oceania   Australia 1997      78.8\n##  6 Oceania   Australia 2007      81.2\n##  7 Africa    Egypt     1957      44.4\n##  8 Africa    Egypt     1967      49.3\n##  9 Africa    Egypt     1977      53.3\n## 10 Africa    Egypt     1987      59.8\n## # … with 50 more rows\n\n\n\n\nlife_exps_timeline <- gapminder_data |> \n  filter(\n    str_ends(year, \"7\"),\n    country %in% selected_countries$country\n  ) |> \n  group_by(country) |> \n  summarise(Timeline = list(c(life_exp)))\nlife_exps_timeline\n## # A tibble: 10 × 2\n##    country        Timeline \n##    <chr>          <list>   \n##  1 Australia      <dbl [6]>\n##  2 Egypt          <dbl [6]>\n##  3 Jamaica        <dbl [6]>\n##  4 Netherlands    <dbl [6]>\n##  5 New Zealand    <dbl [6]>\n##  6 Nicaragua      <dbl [6]>\n##  7 Sierra Leone   <dbl [6]>\n##  8 Singapore      <dbl [6]>\n##  9 Syria          <dbl [6]>\n## 10 United Kingdom <dbl [6]>\n\n\n\n\nNow we can run a quick left_join() to, well, join our two data sets. Then it’s gt()-time. This will list all values of the Timeline column in the {gt} table. Have a look.\n\nselected_countries |> \n  left_join(life_exps_timeline, by = 'country') |> \n  gt(groupname_col = 'continent') |> \n  tab_header(\n    title = 'Life Expectancies over time',\n    subtitle = 'Data is courtesy of the Gapminder foundation'\n  ) |> \n  cols_label(.list = new_colnames) |> \n  fmt_number(columns = where(is.numeric), decimals = 2) |> \n  gt_theme_538() |> \n  gt_color_rows(\n    columns = c(year1957, year2007), \n    domain = c(30, 85),\n    palette = color_palette\n  )\n\n\n\n\n  \n  \n  \n    \n      Life Expectancies over time\n    \n    \n      Data is courtesy of the Gapminder foundation\n    \n  \n  \n    \n      \n      1957\n      1967\n      1977\n      1987\n      1997\n      2007\n      Timeline\n    \n  \n  \n    \n      Africa\n    \n    Egypt\n44.44\n49.29\n53.32\n59.80\n67.22\n71.34\n44.444, 49.293, 53.319, 59.797, 67.217, 71.338\n    Sierra Leone\n31.57\n34.11\n36.79\n40.01\n39.90\n42.57\n31.570, 34.113, 36.788, 40.006, 39.897, 42.568\n    \n      Americas\n    \n    Nicaragua\n45.43\n51.88\n57.47\n62.01\n68.43\n72.90\n45.432, 51.884, 57.470, 62.008, 68.426, 72.899\n    Jamaica\n62.61\n67.51\n70.11\n71.77\n72.26\n72.57\n62.610, 67.510, 70.110, 71.770, 72.262, 72.567\n    \n      Asia\n    \n    Syria\n48.28\n53.66\n61.20\n66.97\n71.53\n74.14\n48.284, 53.655, 61.195, 66.974, 71.527, 74.143\n    Singapore\n63.18\n67.95\n70.80\n73.56\n77.16\n79.97\n63.179, 67.946, 70.795, 73.560, 77.158, 79.972\n    \n      Europe\n    \n    Netherlands\n72.99\n73.82\n75.24\n76.83\n78.03\n79.76\n72.990, 73.820, 75.240, 76.830, 78.030, 79.762\n    United Kingdom\n70.42\n71.36\n72.76\n75.01\n77.22\n79.42\n70.420, 71.360, 72.760, 75.007, 77.218, 79.425\n    \n      Oceania\n    \n    New Zealand\n70.26\n71.52\n72.22\n74.32\n77.55\n80.20\n70.260, 71.520, 72.220, 74.320, 77.550, 80.204\n    Australia\n70.33\n71.10\n73.49\n76.32\n78.83\n81.23\n70.330, 71.100, 73.490, 76.320, 78.830, 81.235\n  \n  \n  \n\n\n\n\n\nFinally, the last ingredient is to target the Timeline column with the gt_plt_sparkline() layer. In that layer, we can adjust the colors and the dimensions of our sparkline too.\n\n## Join First\nselected_countries |> \n  left_join(life_exps_timeline, by = 'country') |> \n## Do table as before\n  gt(groupname_col = 'continent') |> \n  tab_header(\n    title = 'Life Expectancies over time',\n    subtitle = 'Data is courtesy of the Gapminder foundation'\n  ) |> \n  cols_label(.list = new_colnames) |> \n  fmt_number(columns = where(is.numeric), decimals = 2) |> \n  gt_theme_538() |> \n  gt_color_rows(\n    columns = c(year1957, year2007), \n    domain = c(30, 85),\n    palette = color_palette\n  ) |> \n## Target Timeline column\n  gt_plt_sparkline(\n    column = Timeline,\n    palette = c(\"grey40\", \"grey40\", \"grey40\", \"dodgerblue1\", \"grey40\"),\n    fig_dim = c(5, 28)\n  )\n\n\n\n\n  \n  \n  \n    \n      Life Expectancies over time\n    \n    \n      Data is courtesy of the Gapminder foundation\n    \n  \n  \n    \n      \n      1957\n      1967\n      1977\n      1987\n      1997\n      2007\n      Timeline\n    \n  \n  \n    \n      Africa\n    \n    Egypt\n44.44\n49.29\n53.32\n59.80\n67.22\n71.34\n          71.3\n    Sierra Leone\n31.57\n34.11\n36.79\n40.01\n39.90\n42.57\n          42.6\n    \n      Americas\n    \n    Nicaragua\n45.43\n51.88\n57.47\n62.01\n68.43\n72.90\n          72.9\n    Jamaica\n62.61\n67.51\n70.11\n71.77\n72.26\n72.57\n          72.6\n    \n      Asia\n    \n    Syria\n48.28\n53.66\n61.20\n66.97\n71.53\n74.14\n          74.1\n    Singapore\n63.18\n67.95\n70.80\n73.56\n77.16\n79.97\n          80.0\n    \n      Europe\n    \n    Netherlands\n72.99\n73.82\n75.24\n76.83\n78.03\n79.76\n          79.8\n    United Kingdom\n70.42\n71.36\n72.76\n75.01\n77.22\n79.42\n          79.4\n    \n      Oceania\n    \n    New Zealand\n70.26\n71.52\n72.22\n74.32\n77.55\n80.20\n          80.2\n    Australia\n70.33\n71.10\n73.49\n76.32\n78.83\n81.23\n          81.2\n  \n  \n  \n\n\n\n\n\nAlright, we’ve created the our first table that contains a plot. The pattern to add fancy plots/images/fancy stuff is always the same, so let’s recap.\n\nStep 1: Get the necessary data for the image into the tibble before even calling gt(). This will give you additional columns.\nStep 2: Target the additional columns with a new layer.\n\nFor completeness’ sake let me mention that we could also use the rowwise() and c_across() functions in step 1.2\n\nselected_countries |> \n  rowwise() |> \n  mutate(Timeline = list(c_across(year1957:year2007))) |> \n  ungroup()\n## # A tibble: 10 × 9\n##    continent country     year1…¹ year1…² year1…³ year1…⁴ year1…⁵ year2…⁶ Timel…⁷\n##    <fct>     <chr>         <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <list> \n##  1 Africa    Egypt          44.4    49.3    53.3    59.8    67.2    71.3 <dbl>  \n##  2 Africa    Sierra Leo…    31.6    34.1    36.8    40.0    39.9    42.6 <dbl>  \n##  3 Americas  Nicaragua      45.4    51.9    57.5    62.0    68.4    72.9 <dbl>  \n##  4 Americas  Jamaica        62.6    67.5    70.1    71.8    72.3    72.6 <dbl>  \n##  5 Asia      Syria          48.3    53.7    61.2    67.0    71.5    74.1 <dbl>  \n##  6 Asia      Singapore      63.2    67.9    70.8    73.6    77.2    80.0 <dbl>  \n##  7 Europe    Netherlands    73.0    73.8    75.2    76.8    78.0    79.8 <dbl>  \n##  8 Europe    United Kin…    70.4    71.4    72.8    75.0    77.2    79.4 <dbl>  \n##  9 Oceania   New Zealand    70.3    71.5    72.2    74.3    77.6    80.2 <dbl>  \n## 10 Oceania   Australia      70.3    71.1    73.5    76.3    78.8    81.2 <dbl>  \n## # … with abbreviated variable names ¹​year1957, ²​year1967, ³​year1977, ⁴​year1987,\n## #   ⁵​year1997, ⁶​year2007, ⁷​Timeline"
  },
  {
    "objectID": "fancy_stuff.html#add-bullet-charts",
    "href": "fancy_stuff.html#add-bullet-charts",
    "title": "2  Fancy stuff / Eye catchers",
    "section": "2.3 Add bullet charts",
    "text": "2.3 Add bullet charts\nAs we know, the gapminder data set is much larger than what we show here. In fact, we have the same data for many more countries. But showing all of that information would make the table HUUUGE.\nWe could still use that information, though. Here, we could put the life expectancy of our selected countries into context. For example, for each country let us compare its life expectancy to the mean life expectancy of its continent . A so-called bullet chart will do the trick. Check it out.\n\n\n\n\n\n\n\n\n  \n  \n  \n    \n      Life Expectancies over time\n    \n    \n      Data is courtesy of the Gapminder foundation\n    \n  \n  \n    \n      \n      1957\n      1967\n      1977\n      1987\n      1997\n      2007\n      Comparison 2007continent mean | country\n    \n  \n  \n    \n      Africa\n    \n    Egypt\n44.44\n49.29\n53.32\n59.80\n67.22\n71.34\n          \n    Sierra Leone\n31.57\n34.11\n36.79\n40.01\n39.90\n42.57\n          \n    \n      Americas\n    \n    Nicaragua\n45.43\n51.88\n57.47\n62.01\n68.43\n72.90\n          \n    Jamaica\n62.61\n67.51\n70.11\n71.77\n72.26\n72.57\n          \n    \n      Asia\n    \n    Syria\n48.28\n53.66\n61.20\n66.97\n71.53\n74.14\n          \n    Singapore\n63.18\n67.95\n70.80\n73.56\n77.16\n79.97\n          \n    \n      Europe\n    \n    Netherlands\n72.99\n73.82\n75.24\n76.83\n78.03\n79.76\n          \n    United Kingdom\n70.42\n71.36\n72.76\n75.01\n77.22\n79.42\n          \n    \n      Oceania\n    \n    New Zealand\n70.26\n71.52\n72.22\n74.32\n77.55\n80.20\n          \n    Australia\n70.33\n71.10\n73.49\n76.32\n78.83\n81.23\n          \n  \n  \n  \n\n\n\n\n\nIn this table you can see that Sierra Leone’s life expectancy in 2007 is way below Africa’s mean life expectancy. In contrast, Egypt’s life expectancy is much higher than Africa’s mean life expectancy.\nSo, how do we create this table? Well, do you remember the first step of getting fancy plots into your table? That’s right. Expand your tibble with the necessary data for your plot.\nIn this case, that’s two things: The life expectancy of a country in 2007 and the continent’s mean life expectancy. So, we’re going to add two new columns. One of the columns will just be a duplicate of an already existent column though.\n\nmean_life_exps <- gapminder_data |> \n  filter(year == \"2007\") |> \n  group_by(continent) |> \n  summarise(mean_life_exp = mean(life_exp))\n\nselected_countries_joined_info <- selected_countries |> \n  left_join(mean_life_exps, by = 'continent') |> \n  mutate(rep2007 = year2007)\nselected_countries_joined_info\n## # A tibble: 10 × 10\n##    continent country     year1…¹ year1…² year1…³ year1…⁴ year1…⁵ year2…⁶ mean_…⁷\n##    <fct>     <chr>         <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>   <dbl>\n##  1 Africa    Egypt          44.4    49.3    53.3    59.8    67.2    71.3    54.8\n##  2 Africa    Sierra Leo…    31.6    34.1    36.8    40.0    39.9    42.6    54.8\n##  3 Americas  Nicaragua      45.4    51.9    57.5    62.0    68.4    72.9    73.6\n##  4 Americas  Jamaica        62.6    67.5    70.1    71.8    72.3    72.6    73.6\n##  5 Asia      Syria          48.3    53.7    61.2    67.0    71.5    74.1    70.7\n##  6 Asia      Singapore      63.2    67.9    70.8    73.6    77.2    80.0    70.7\n##  7 Europe    Netherlands    73.0    73.8    75.2    76.8    78.0    79.8    77.6\n##  8 Europe    United Kin…    70.4    71.4    72.8    75.0    77.2    79.4    77.6\n##  9 Oceania   New Zealand    70.3    71.5    72.2    74.3    77.6    80.2    80.7\n## 10 Oceania   Australia      70.3    71.1    73.5    76.3    78.8    81.2    80.7\n## # … with 1 more variable: rep2007 <dbl>, and abbreviated variable names\n## #   ¹​year1957, ²​year1967, ³​year1977, ⁴​year1987, ⁵​year1997, ⁶​year2007,\n## #   ⁷​mean_life_exp\n\nNext step is using the two new columns in a layer that creates the bullet chart. That’s gt_plt_bullet(). Two of its arguments are designed for the two new columns.\n\nselected_countries_joined_info |> \n## Do table as before\n  gt(groupname_col = 'continent') |> \n  tab_header(\n    title = 'Life Expectancies over time',\n    subtitle = 'Data is courtesy of the Gapminder foundation'\n  ) |> \n  cols_label(.list = new_colnames) |> \n  fmt_number(columns = where(is.numeric), decimals = 2) |> \n  gt_theme_538() |> \n  gt_color_rows(\n    columns = c(year1957, year2007), \n    domain = c(30, 85),\n    palette = color_palette\n  ) |> \n## Use mean_life_exp and rep2007\n  gt_plt_bullet(\n    column = rep2007,\n    target = mean_life_exp,\n    palette = c(\"dodgerblue4\", \"dodgerblue1\"),\n    width = 45 # width in px\n  )\n\n\n\n\n  \n  \n  \n    \n      Life Expectancies over time\n    \n    \n      Data is courtesy of the Gapminder foundation\n    \n  \n  \n    \n      \n      1957\n      1967\n      1977\n      1987\n      1997\n      2007\n      rep2007\n    \n  \n  \n    \n      Africa\n    \n    Egypt\n44.44\n49.29\n53.32\n59.80\n67.22\n71.34\n          \n    Sierra Leone\n31.57\n34.11\n36.79\n40.01\n39.90\n42.57\n          \n    \n      Americas\n    \n    Nicaragua\n45.43\n51.88\n57.47\n62.01\n68.43\n72.90\n          \n    Jamaica\n62.61\n67.51\n70.11\n71.77\n72.26\n72.57\n          \n    \n      Asia\n    \n    Syria\n48.28\n53.66\n61.20\n66.97\n71.53\n74.14\n          \n    Singapore\n63.18\n67.95\n70.80\n73.56\n77.16\n79.97\n          \n    \n      Europe\n    \n    Netherlands\n72.99\n73.82\n75.24\n76.83\n78.03\n79.76\n          \n    United Kingdom\n70.42\n71.36\n72.76\n75.01\n77.22\n79.42\n          \n    \n      Oceania\n    \n    New Zealand\n70.26\n71.52\n72.22\n74.32\n77.55\n80.20\n          \n    Australia\n70.33\n71.10\n73.49\n76.32\n78.83\n81.23\n          \n  \n  \n  \n\n\n\n\n\nFinally, we need to relabel the rep2007 column with cols_label(). And to make the new label use colors, we will have to write a label with HTML. Here’s what you need to know for that:\n\n<br> is a line break in HTML\n<span style=\"color:red;font-size:24pt;\">some text</span> would result in some text.\n\nSo, just create a character variable in R that uses this Syntax and let gt() know that you mean business HTML. The latter can be done with html().\n\n# I like to use str_c() to connect strings to make the text less messy\nhtml_text <- str_c(\n  'Comparison 2007',\n  '<br>',\n  '<span style=\"color:#1e90ff;display:inline;\">',\n  'continent mean', \n  '</span> | ',\n  '<span style=\"color:#104e8b;display:inline;\">',\n  'country',\n  '</span>'\n)\n\nselected_countries_joined_info |> \n## Do table as before\n  gt(groupname_col = 'continent') |> \n  tab_header(\n    title = 'Life Expectancies over time',\n    subtitle = 'Data is courtesy of the Gapminder foundation'\n  ) |> \n  cols_label(.list = new_colnames) |> \n  fmt_number(columns = where(is.numeric), decimals = 2) |> \n  gt_theme_538() |> \n  gt_color_rows(\n    columns = c(year1957, year2007), \n    domain = c(30, 85),\n    palette = color_palette\n  ) |> \n## Target mean_life_exp column and change it's column name\n  gt_plt_bullet(\n    column = rep2007,\n    target = mean_life_exp,\n    palette = c(\"dodgerblue4\", \"dodgerblue1\"),\n    width = 45\n  ) |> \n  cols_label(rep2007 = html(html_text))\n\n\n\n\n  \n  \n  \n    \n      Life Expectancies over time\n    \n    \n      Data is courtesy of the Gapminder foundation\n    \n  \n  \n    \n      \n      1957\n      1967\n      1977\n      1987\n      1997\n      2007\n      Comparison 2007continent mean | country\n    \n  \n  \n    \n      Africa\n    \n    Egypt\n44.44\n49.29\n53.32\n59.80\n67.22\n71.34\n          \n    Sierra Leone\n31.57\n34.11\n36.79\n40.01\n39.90\n42.57\n          \n    \n      Americas\n    \n    Nicaragua\n45.43\n51.88\n57.47\n62.01\n68.43\n72.90\n          \n    Jamaica\n62.61\n67.51\n70.11\n71.77\n72.26\n72.57\n          \n    \n      Asia\n    \n    Syria\n48.28\n53.66\n61.20\n66.97\n71.53\n74.14\n          \n    Singapore\n63.18\n67.95\n70.80\n73.56\n77.16\n79.97\n          \n    \n      Europe\n    \n    Netherlands\n72.99\n73.82\n75.24\n76.83\n78.03\n79.76\n          \n    United Kingdom\n70.42\n71.36\n72.76\n75.01\n77.22\n79.42\n          \n    \n      Oceania\n    \n    New Zealand\n70.26\n71.52\n72.22\n74.32\n77.55\n80.20\n          \n    Australia\n70.33\n71.10\n73.49\n76.32\n78.83\n81.23"
  },
  {
    "objectID": "fancy_stuff.html#include-icons-in-your-tables",
    "href": "fancy_stuff.html#include-icons-in-your-tables",
    "title": "2  Fancy stuff / Eye catchers",
    "section": "2.4 Include icons in your tables",
    "text": "2.4 Include icons in your tables\nAdding icons to any {gt} table is easy. You don’t actually need anything but the icon itself. Thankfully, R has just the right {emoji} package to get the work done. Once you’ve got the data, just send that to gt() and you’re done.\n\nvegetables <- tibble(\n  Vegetable = c('eggplant', 'cucumber', 'broccoli', 'garlic', 'onion')\n) |> \n  mutate(\n# Apply emoji() function to every text from Vegetable column\n    Emoji = map_chr(Vegetable, emoji::emoji),\n    Vegetable = str_to_title(Vegetable)\n  ) \nvegetables\n## # A tibble: 5 × 2\n##   Vegetable Emoji\n##   <chr>     <chr>\n## 1 Eggplant  🍆   \n## 2 Cucumber  🥒   \n## 3 Broccoli  🥦   \n## 4 Garlic    🧄   \n## 5 Onion     🧅\n\nvegetables |> \n  gt() |> \n  tab_header(\n    title = 'VegeTABLE',\n    subtitle = 'Emojis are taken from the {emoji} package'\n  ) |> \n# This part makes emojis larger\n  tab_style(\n    style = list(cell_text(size = px(25))),\n    locations = cells_body(columns = 'Emoji')\n  )\n\n\n\n\n  \n  \n  \n    \n      VegeTABLE\n    \n    \n      Emojis are taken from the {emoji} package\n    \n  \n  \n    \n      Vegetable\n      Emoji\n    \n  \n  \n    Eggplant\n🍆\n    Cucumber\n🥒\n    Broccoli\n🥦\n    Garlic\n🧄\n    Onion\n🧅\n  \n  \n  \n\n\n\n\n\nNotice that I have increased the size of the emojis here. Think of this as a teaser for what we’re going to do in Section 4.1.\nThe same works with fontawesome icons as well. But you have to be a little bit more careful in that case. The {fontawesome} package will give you an icon as HTML code. Thus, you need to wrap the output from fontawesome::fa() in html().\n\nbrands <- tibble(\n  Brand = c('twitter', 'facebook', 'linkedin', 'github'),\n  color = c('#1DA1F2', '#4267B2', '#0077B5', '#333' )\n) |>\n  mutate(\n# Apply fa() function with all values from columns Brand and color\n    Emoji = map2(Brand, color, ~fontawesome::fa(.x, fill = .y)),\n# Apply html() function to previous results\n    Emoji = map(Emoji, html),\n    Brand = str_to_title(Brand)\n  ) |>\n  select(-color)\nbrands\n## # A tibble: 4 × 2\n##   Brand    Emoji     \n##   <chr>    <list>    \n## 1 Twitter  <html [1]>\n## 2 Facebook <html [1]>\n## 3 Linkedin <html [1]>\n## 4 Github   <html [1]>\n\nbrands |>\n  gt() |>\n  tab_header(\n    title = 'Brand table',\n    subtitle = 'Icons are taken from the {fontawesome} package'\n  )  |>\n# This part makes emojis larger\n  tab_style(\n    style = list(cell_text(size = px(25))),\n    locations = cells_body(columns = 'Emoji')\n  ) \n\n\n\n\n  \n  \n  \n    \n      Brand table\n    \n    \n      Icons are taken from the {fontawesome} package\n    \n  \n  \n    \n      Brand\n      Emoji\n    \n  \n  \n    Twitter\n\n    Facebook\n\n    Linkedin\n\n    Github"
  },
  {
    "objectID": "fancy_stuff.html#include-images-in-your-tables",
    "href": "fancy_stuff.html#include-images-in-your-tables",
    "title": "2  Fancy stuff / Eye catchers",
    "section": "2.5 Include images in your tables",
    "text": "2.5 Include images in your tables\nThe easiest way to add images to your table is to rely on gt_img_rows() from {gtExtras}. Just add a column with file paths/URLs of images to your tibble. Then, target that column with gt_img_rows() and your work is done.\nFor example, you could use this to get images of the last four British prime ministers from Wikipedia and use them in a table.3\n\npm_data <- tribble(\n  ~Name, ~Image,\n  'Rishi Sunak', 'https://upload.wikimedia.org/wikipedia/commons/thumb/0/09/Rishi_Sunak%27s_first_speech_as_Prime_Minister_Front_%28cropped%29.jpg/1024px-Rishi_Sunak%27s_first_speech_as_Prime_Minister_Front_%28cropped%29.jpg',\n  'Liz Truss', 'https://upload.wikimedia.org/wikipedia/commons/thumb/1/16/Liz_Truss_official_portrait_%28cropped%292.jpg/292px-Liz_Truss_official_portrait_%28cropped%292.jpg',\n  'Boris Johnson', 'https://upload.wikimedia.org/wikipedia/commons/thumb/7/76/Boris_Johnson_official_portrait_%28cropped%29.jpg/288px-Boris_Johnson_official_portrait_%28cropped%29.jpg',\n  'Theresa May', 'https://upload.wikimedia.org/wikipedia/commons/thumb/a/af/Theresa_May_cropped.png/291px-Theresa_May_cropped.png'\n)\n\npm_data |>\n  gt() |>\n  gt_img_rows(columns = 'Image', height = 100)\n\n\n\n\n  \n  \n  \n  \n    \n      Name\n      Image\n    \n  \n  \n    Rishi Sunak\n\n    Liz Truss\n\n    Boris Johnson\n\n    Theresa May\n\n  \n  \n  \n\n\n\n\n\nAlternatively, you can use gt_img_circle(). This will give you round images. But you have to be careful that your column width matches the height of your image. You can achieve that with cols_width(). This function’s syntax is really simple. Basically, it’s cols_width(column ~ px(<number of pixels>)).\n\npm_data_round <- tribble(\n  ~Name, ~Image,\n  'Rishi Sunak', 'https://pbs.twimg.com/profile_images/1572638567381307394/AEahAxu5_400x400.jpg',\n  'Liz Truss', 'https://pbs.twimg.com/profile_images/1514636699946602499/hUoOgAOz_400x400.jpg',\n  'Boris Johnson', 'https://pbs.twimg.com/profile_images/1500170386520129536/Rr2G6A-N_400x400.jpg',\n  'Theresa May', 'https://pbs.twimg.com/profile_images/936639677121081344/_e5l_DEG_400x400.jpg'\n)\n\npm_data_round |>\n  gt() |>\n  gt_img_circle(column = 'Image', height = 100, border_weight = 1) |>\n  cols_width(Image ~ px(110)) # 110 = 100 (height) + 10 (padding around imgs)\n\n\n\n\n  \n  \n  \n    \n    \n  \n  \n  \n    \n      Name\n      Image\n    \n  \n  \n    Rishi Sunak\n\n    Liz Truss\n\n    Boris Johnson\n\n    Theresa May"
  },
  {
    "objectID": "fancy_stuff.html#add-arbitrary-plots-to-your-table",
    "href": "fancy_stuff.html#add-arbitrary-plots-to-your-table",
    "title": "2  Fancy stuff / Eye catchers",
    "section": "2.6 Add arbitrary plots to your table",
    "text": "2.6 Add arbitrary plots to your table\nSo far we’ve learned to add spark lines, bullet charts, icons and images to our tables. There are some other cool visual elements that can be added with help from {gtExtras}. You should definitely check out its documentation to see the full list.\nFor my final trick of this chapter, I’m going to show you how you can add any ggplot to your table. For example, we could look at our penguins from the last chapter again. Here’s a table about their weight and its distribution (visualized with a violin plot.)\n\n\n\n\n\n  \n  \n  \n  \n    \n      Species\n      \n        Penguin's Weight\n      \n    \n    \n      Min\n      Mean\n      Max\n      Distribution\n    \n  \n  \n    Adelie\n2850\n3706.16\n4775\n\n    Chinstrap\n2700\n3733.09\n4800\n\n    Gentoo\n3950\n5092.44\n6300\n\n  \n  \n  \n\n\n\n\n\nTo create this table, let us begin with the basics. Let’s compute the numeric values first.\n\nfiltered_penguins <- palmerpenguins::penguins |>\n    filter(!is.na(sex))\n\npenguin_weights <- filtered_penguins |>\n  group_by(species) |>\n  summarise(\n    Min = min(body_mass_g),\n    Mean = mean(body_mass_g) |> round(digits = 2),\n    Max = max(body_mass_g)\n  ) |>\n  mutate(species = as.character(species)) |>\n  rename(Species = species)\n\npenguin_weights |>\n  gt() |>\n  tab_spanner(\n    label = 'Penguin\\'s Weight',\n    columns = -Species\n  ) \n\n\n\n\n  \n  \n  \n  \n    \n      Species\n      \n        Penguin's Weight\n      \n    \n    \n      Min\n      Mean\n      Max\n    \n  \n  \n    Adelie\n2850\n3706.16\n4775\n    Chinstrap\n2700\n3733.09\n4800\n    Gentoo\n3950\n5092.44\n6300\n  \n  \n  \n\n\n\n\n\nNext, let us write a function plot_violin_species(my_species) that depends on a penguin species and creates one violin plot.\n\nplot_density_species <- function(my_species) {\n  full_range <- filtered_penguins |>\n    pull(body_mass_g) |>\n    range()\n\n  filtered_penguins |>\n    filter(species == my_species) |>\n    ggplot(aes(x = body_mass_g, y = species)) +\n    geom_violin(fill = 'dodgerblue4') +\n    theme_minimal() +\n    scale_y_discrete(breaks = NULL) +\n    scale_x_continuous(breaks = NULL) +\n    labs(x = element_blank(), y = element_blank()) +\n    coord_cartesian(xlim = full_range)\n}\nplot_density_species('Adelie')\n\n\n\n\nNotice that I have set the coordinate system of the plot to the full range of the data (regardless of the species). This part is important. Without this trick, the three plots would not share a common x-axis. Then, our table might look something like this:\n\n\n\n\n\n  \n  \n  \n  \n    \n      Species\n      \n        Penguin's Weight\n      \n    \n    \n      Min\n      Mean\n      Max\n      Distribution\n    \n  \n  \n    Adelie\n2850\n3706.16\n4775\n\n    Chinstrap\n2700\n3733.09\n4800\n\n    Gentoo\n3950\n5092.44\n6300\n\n  \n  \n  \n\nWATCH OUT: The violin plots are not using a shared axis here and are misleading\n\n\n\nOk, so now we have a function that creates the desired plots. Time to apply it to our table. For this to work, we need an additional column that we can target (just like before).\n\npenguin_weights |>\n  mutate(Distribution = Species) |> \n  gt() |>\n  tab_spanner(\n    label = 'Penguin\\'s Weight',\n    columns = -Species\n  ) \n\n\n\n\n  \n  \n  \n  \n    \n      Species\n      \n        Penguin's Weight\n      \n    \n    \n      Min\n      Mean\n      Max\n      Distribution\n    \n  \n  \n    Adelie\n2850\n3706.16\n4775\nAdelie\n    Chinstrap\n2700\n3733.09\n4800\nChinstrap\n    Gentoo\n3950\n5092.44\n6300\nGentoo\n  \n  \n  \n\n\n\n\n\nNext, use the text_transform() layer to turn the species names into ggplot images. This layer can actually target not just the data rows but everything including column labels or the table header.\nSo, we have to make sure that we attempt to turn only the data table cells into an image and not, say, the spanner. This is done with the helper function cells_body() (more on this function in Section 4.1). Here’s how that will look.\n\npenguin_weights |>\n  mutate(Distribution = Species) |> \n  gt() |>\n  tab_spanner(\n    label = 'Penguin\\'s Weight',\n    columns = -Species\n  ) |>\n  text_transform(\n    locations = cells_body(columns = 'Distribution'),\n    fn = #Put function here\n  ) \n\nFinally, we need to set the fn argument to a function that takes a column and returns actual images. This is not our plot_density_species() function. This one takes only one species name and returns one ggplot object.\nBut we can wrap it in map() such that a column is turned into a list of ggplot objects. The conversion to images is performed by ggplot_image(). We can use it to also specify the height and width (indirectly via aspect ratio) of the image.\n\npenguin_weights |>\n  mutate(Distribution = Species) |> \n  gt() |>\n  tab_spanner(\n    label = 'Penguin\\'s Weight',\n    columns = -Species\n  ) |>\n  text_transform(\n    locations = cells_body(columns = 'Distribution'),\n    fn = function(column) {\n      map(column, plot_density_species) |>\n        ggplot_image(height = px(50), aspect_ratio = 3)\n    }\n  ) \n\n\n\n\n  \n  \n  \n  \n    \n      Species\n      \n        Penguin's Weight\n      \n    \n    \n      Min\n      Mean\n      Max\n      Distribution\n    \n  \n  \n    Adelie\n2850\n3706.16\n4775\n\n    Chinstrap\n2700\n3733.09\n4800\n\n    Gentoo\n3950\n5092.44\n6300\n\n  \n  \n  \n\n\n\n\n\nWe can take this up a notch. What if our plot depends on two or more variables? For example, we could label the mean weight of each species with a white line and the maximum with a red dot.\nYeah, I know. Totally arbitrary example. But it’s as good as any example, I suppose.\nSo first you will need a new function that depends on three arguments. But you have to make sure that all numeric variables are understood as characters. Because that’s how they will come in (you’ll see why in a sec). To use them as actual numbers, convert them from text to number via parse_number().\n\nplot_density_species_with_mean <- function(my_species, my_mean, my_max) {\n  full_range <- filtered_penguins |>\n    pull(body_mass_g) |>\n    range()\n\n  filtered_penguins |>\n    filter(species == my_species) |>\n    ggplot(aes(x = body_mass_g, y = species)) +\n    geom_violin(fill = 'dodgerblue4') +\n    geom_vline(\n      xintercept = parse_number(my_mean), # Parse number\n      color = 'white',\n      linewidth = 3\n    ) +\n    annotate(\n      'point', \n      x = parse_number(my_max), # Parse number\n      y = 1, \n      color = 'red', \n      size = 25 ## Needs to be large since the image is small\n    ) +\n    theme_minimal() +\n    scale_y_discrete(breaks = NULL) +\n    scale_x_continuous(breaks = NULL) +\n    labs(x = element_blank(), y = element_blank()) +\n    coord_cartesian(xlim = full_range)\n}\nplot_density_species_with_mean('Adelie', '3700', '4775')\n\n\n\n\nNext, we have to create a new column in our tibble that contains all the data. In this case, this means collecting Species, Mean and Max in a vector and wrapping that vector in a list.\n\npenguins_new <- penguin_weights |> \n  group_by(Species) |> \n  mutate(Distribution = list(c(Species, Mean, Max))) |> \n  ungroup()\npenguins_new\n## # A tibble: 3 × 5\n##   Species     Min  Mean   Max Distribution\n##   <chr>     <int> <dbl> <int> <list>      \n## 1 Adelie     2850 3706.  4775 <chr [3]>   \n## 2 Chinstrap  2700 3733.  4800 <chr [3]>   \n## 3 Gentoo     3950 5092.  6300 <chr [3]>\n\nNow comes the hard part. It requires a little bit of hacking. In principle, you have to write a function that transforms our table column Distribution into a ggplot. But take a look how Distribution looks in the table.\n\npenguins_new |> \n  gt()\n\n\n\n\n  \n  \n  \n  \n    \n      Species\n      Min\n      Mean\n      Max\n      Distribution\n    \n  \n  \n    Adelie\n2850\n3706.16\n4775\nAdelie, 3706.16, 4775\n    Chinstrap\n2700\n3733.09\n4800\nChinstrap, 3733.09, 4800\n    Gentoo\n3950\n5092.44\n6300\nGentoo, 5092.44, 6300\n  \n  \n  \n\n\n\n\n\nOur beautiful list of arguments for plot_density_species_with_mean() is saved as a text. This means that this extra function fn that we’re going to pass to text_transform() needs to do a couple of things.\n\nSplit the texts into separate arguments with str_split_1() (better output than str_split())\nPass the lists of arguments to plot_density_species_with_mean() and make sure that the arguments are placed correctly.\nConvert ggplot objects to images with ggplot_image().\n\nAnd task 1 and 2 need to be wrapped in map() because they don’t work on whole columns.\n\npenguins_new |> \n  gt() |>\n  text_transform(\n    locations = cells_body(columns = 'Distribution'),\n    fn = function(column) {\n      map(column, ~str_split_1(., ', ')) |>\n        map(~plot_density_species_with_mean(.[1], .[2], .[3])) |>\n        ggplot_image(height = px(50), aspect_ratio = 3)\n    }\n  ) \n\n\n\n\n  \n  \n  \n  \n    \n      Species\n      Min\n      Mean\n      Max\n      Distribution\n    \n  \n  \n    Adelie\n2850\n3706.16\n4775\n\n    Chinstrap\n2700\n3733.09\n4800\n\n    Gentoo\n3950\n5092.44\n6300"
  },
  {
    "objectID": "fancy_stuff.html#summary-1",
    "href": "fancy_stuff.html#summary-1",
    "title": "2  Fancy stuff / Eye catchers",
    "section": "2.7 Summary",
    "text": "2.7 Summary\nSweet! We’ve learned a lot of fancy table elements. Some of them were quite easy to implement. Some of them not so much.\nIn the next chapter, we’re going to take a breather. We’re going to learn about the two families of sub_* and fmt_*. They’re super easy to learn and crucial for formatting the data in your table."
  },
  {
    "objectID": "formatting.html#sec-fmt-functions",
    "href": "formatting.html#sec-fmt-functions",
    "title": "3  Formatting",
    "section": "3.1 fmt_* functions",
    "text": "3.1 fmt_* functions\nFirst, we need some example data to practice on. Thankfully, {gt} already comes with data sets that use many different data formats. Let me introduce you to {gt}’s example tibble, or exibble for short.\n\nlibrary(tidyverse)\nlibrary(gt)\nexibble\n## # A tibble: 8 × 9\n##           num char       fctr  date       time  datetime    currency row   group\n##         <dbl> <chr>      <fct> <chr>      <chr> <chr>          <dbl> <chr> <chr>\n## 1       0.111 apricot    one   2015-01-15 13:35 2018-01-01…    50.0  row_1 grp_a\n## 2       2.22  banana     two   2015-02-15 14:40 2018-02-02…    18.0  row_2 grp_a\n## 3      33.3   coconut    three 2015-03-15 15:45 2018-03-03…     1.39 row_3 grp_a\n## 4     444.    durian     four  2015-04-15 16:50 2018-04-04… 65100    row_4 grp_a\n## 5    5550     <NA>       five  2015-05-15 17:55 2018-05-05…  1326.   row_5 grp_b\n## 6      NA     fig        six   2015-06-15 <NA>  2018-06-06…    13.3  row_6 grp_b\n## 7  777000     grapefruit seven <NA>       19:10 2018-07-07…    NA    row_7 grp_b\n## 8 8880000     honeydew   eight 2015-08-15 20:20 <NA>            0.44 row_8 grp_b\n\nLet’s put this into a {gt} table. We’re going to use one of the pre-defined themes that come with opt_stylize().\n\nexibble |> \n  select(-(row:group)) |> \n  gt() |> \n  opt_stylize(style = 3)\n\n\n\n\n  \n  \n  \n  \n    \n      num\n      char\n      fctr\n      date\n      time\n      datetime\n      currency\n    \n  \n  \n    1.111e-01\napricot\none\n2015-01-15\n13:35\n2018-01-01 02:22\n49.950\n    2.222e+00\nbanana\ntwo\n2015-02-15\n14:40\n2018-02-02 14:33\n17.950\n    3.333e+01\ncoconut\nthree\n2015-03-15\n15:45\n2018-03-03 03:44\n1.390\n    4.444e+02\ndurian\nfour\n2015-04-15\n16:50\n2018-04-04 15:55\n65100.000\n    5.550e+03\nNA\nfive\n2015-05-15\n17:55\n2018-05-05 04:00\n1325.810\n    NA\nfig\nsix\n2015-06-15\nNA\n2018-06-06 16:11\n13.255\n    7.770e+05\ngrapefruit\nseven\nNA\n19:10\n2018-07-07 05:22\nNA\n    8.880e+06\nhoneydew\neight\n2015-08-15\n20:20\nNA\n0.440\n  \n  \n  \n\n\n\n\n\nPhew! This is table won’t win awards any time soon. Let’s clean it up by working us through the columns one by one.\n\n3.1.1 Numbers\nFirst, we’re getting rid of the scientific notation in the num column. While we’re at it, we’re going to round the numbers to one decimal.\n\nexibble |> \n  select(num) |>\n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(\n    columns = 'num',\n    decimals = 1\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      num\n    \n  \n  \n    0.1\n    2.2\n    33.3\n    444.4\n    5,550.0\n    NA\n    777,000.0\n    8,880,000.0\n  \n  \n  \n\n\n\n\n\nNext, we may want to adjust our marks , and . in the output. For example, in German we write one million as 1.000.000 and a quarter as 0,25. Hence, we could change the sep_mark and dec_mark argument in fmt_number(). But the easier way is to just change the locale to \"de\" (German).\n\nexibble |> \n  select(num) |>\n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(\n    columns = 'num',\n    decimals = 1,\n    locale = 'de'\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      num\n    \n  \n  \n    0,1\n    2,2\n    33,3\n    444,4\n    5.550,0\n    NA\n    777.000,0\n    8.880.000,0\n  \n  \n  \n\n\n\n\n\nSince we also have some very large numbers in the num column, we could add suffixes instead of displaying a lot of zeroes. This means that we transform e.g. 1000 to 1K.\n\nexibble |> \n  select(num) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(\n    columns = 'num',\n    decimals = 1,\n    suffixing = TRUE\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      num\n    \n  \n  \n    0.1\n    2.2\n    33.3\n    444.4\n    5.5K\n    NA\n    777.0K\n    8.9M\n  \n  \n  \n\n\n\n\n\nWe could also use our own suffixes.\n\n# Thousand - Million - Billion - Trillion\ncustom_suffixes <- c(\"k\", \"mil\", \"bil\", \"tril\")\n\nexibble |> \n  select(num) |>\n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(\n    columns = 'num',\n    decimals = 1,\n    suffixing = custom_suffixes\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      num\n    \n  \n  \n    0.1\n    2.2\n    33.3\n    444.4\n    5.5k\n    NA\n    777.0k\n    8.9mil\n  \n  \n  \n\n\n\n\n\n\n\n3.1.2 Currency\nNow, let’s format the currency column. The default currency is USD. That will give you $ signs.\n\nexibble |> \n  select(num, currency) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = 'num', decimals = 1) |>\n  fmt_currency(columns = 'currency')\n\n\n\n\n  \n  \n  \n  \n    \n      num\n      currency\n    \n  \n  \n    0.1\n$49.95\n    2.2\n$17.95\n    33.3\n$1.39\n    444.4\n$65,100.00\n    5,550.0\n$1,325.81\n    NA\n$13.26\n    777,000.0\nNA\n    8,880,000.0\n$0.44\n  \n  \n  \n\n\n\n\n\nSince I mostly use Euros in my real life, let me change the currency argument here. Also, we’re going to set locale to German again.\n\nexibble |> \n  select(num, currency) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = 'num', decimals = 1) |>\n  fmt_currency(\n    columns = 'currency', currency = 'EUR', locale = 'de'\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      num\n      currency\n    \n  \n  \n    0.1\n€49,95\n    2.2\n€17,95\n    33.3\n€1,39\n    444.4\n€65.100,00\n    5,550.0\n€1.325,81\n    NA\n€13,26\n    777,000.0\nNA\n    8,880,000.0\n€0,44\n  \n  \n  \n\n\n\n\n\nYou’d think that this is the correct way to state a price in Germany. But it’s not. Unfortunately, the locale did not catch that we use the Euro symbol at the end of a number. But no worries, we can fix that manually.\nInstead of fmt_currency(), we’re going to use fmt_number() and apply the Euro symbol manually via pattern. The fmt_*() functions use {x} as placeholder for the function’s regular output. That way, we can modify outputs as we see fit. Here are two examples.\n\nEuro symbol (trailing)Euro text (leading)\n\n\n\nexibble |> \n  select(num, currency) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = 'num', decimals = 1) |>\n  fmt_number(\n    columns = 'currency',\n    decimals = 2,\n    locale = 'de',\n    pattern = '{x}€'\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      num\n      currency\n    \n  \n  \n    0.1\n49,95€\n    2.2\n17,95€\n    33.3\n1,39€\n    444.4\n65.100,00€\n    5,550.0\n1.325,81€\n    NA\n13,26€\n    777,000.0\nNA\n    8,880,000.0\n0,44€\n  \n  \n  \n\n\n\n\n\n\n\n\nexibble |> \n  select(num, currency) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = 'num', decimals = 1) |>\n  fmt_number(\n    columns = 'currency',\n    decimals = 2,\n    locale = 'de',\n    pattern = 'EUR {x}'\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      num\n      currency\n    \n  \n  \n    0.1\nEUR 49,95\n    2.2\nEUR 17,95\n    33.3\nEUR 1,39\n    444.4\nEUR 65.100,00\n    5,550.0\nEUR 1.325,81\n    NA\nEUR 13,26\n    777,000.0\nNA\n    8,880,000.0\nEUR 0,44\n  \n  \n  \n\n\n\n\n\n\n\n\nWe have rounded the num column to one decimal with the first fmt_number() layer. It’s interesting to find out what happens if we had targeted the currency column in that layer too. Would the next fmt_number() layer round the previously rounded number or the original number? Let’s check.\n\nRound both columns in first layerRound only num in first layer\n\n\n\n\nCode\nexibble |> \n  select(num, currency) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = c('num', 'currency'), decimals = 1) |>\n  fmt_number(\n    columns = 'currency',\n    decimals = 2,\n    locale = 'de',\n    pattern = '{x}€'\n  )\n\n\n\n\n\n  \n  \n  \n  \n    \n      num\n      currency\n    \n  \n  \n    0.1\n49,95€\n    2.2\n17,95€\n    33.3\n1,39€\n    444.4\n65.100,00€\n    5,550.0\n1.325,81€\n    NA\n13,26€\n    777,000.0\nNA\n    8,880,000.0\n0,44€\n  \n  \n  \n\n\n\n\n\n\n\n\n\nCode\nexibble |> \n  select(num, currency) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = 'num', decimals = 1) |>\n  fmt_number(\n    columns = 'currency',\n    decimals = 2,\n    locale = 'de',\n    pattern = '{x}€'\n  )\n\n\n\n\n\n  \n  \n  \n  \n    \n      num\n      currency\n    \n  \n  \n    0.1\n49,95€\n    2.2\n17,95€\n    33.3\n1,39€\n    444.4\n65.100,00€\n    5,550.0\n1.325,81€\n    NA\n13,26€\n    777,000.0\nNA\n    8,880,000.0\n0,44€\n  \n  \n  \n\n\n\n\n\n\n\n\nAs you can see, the output is the same. This means that the fmt_*() functions always use the original data. That’s good to know.\nFun fact: That’s also what’s happening when you rename a column with cols_label(). Internally, the column names always remain the same.\n\n\n3.1.3 Dates, times and datetimes\nWe can format any date using fmt_date(). And there are quite a few date_styles we can choose from. Here, are a few examples.\n\nwday_month_day_yearday_m_yearyMMMdyMMMEd\n\n\n\nexibble |> \n  select(num, currency, date) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = 'num', decimals = 1) |>\n  fmt_number(\n    columns = 'currency', \n    decimals = 2, \n    locale = 'de', \n    pattern = '{x}€'\n  ) |> \n  fmt_date(columns = 'date', date_style = \"wday_month_day_year\")\n\n\n\n\n  \n  \n  \n  \n    \n      num\n      currency\n      date\n    \n  \n  \n    0.1\n49,95€\nThursday, January 15, 2015\n    2.2\n17,95€\nSunday, February 15, 2015\n    33.3\n1,39€\nSunday, March 15, 2015\n    444.4\n65.100,00€\nWednesday, April 15, 2015\n    5,550.0\n1.325,81€\nFriday, May 15, 2015\n    NA\n13,26€\nMonday, June 15, 2015\n    777,000.0\nNA\nNA\n    8,880,000.0\n0,44€\nSaturday, August 15, 2015\n  \n  \n  \n\n\n\n\n\n\n\n\nexibble |> \n  select(num, currency, date) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = 'num', decimals = 1) |>\n  fmt_number(\n    columns = 'currency', \n    decimals = 2, \n    locale = 'de', \n    pattern = '{x}€'\n  ) |> \n  fmt_date(columns = 'date', date_style = \"day_m_year\")\n\n\n\n\n  \n  \n  \n  \n    \n      num\n      currency\n      date\n    \n  \n  \n    0.1\n49,95€\n15 Jan 2015\n    2.2\n17,95€\n15 Feb 2015\n    33.3\n1,39€\n15 Mar 2015\n    444.4\n65.100,00€\n15 Apr 2015\n    5,550.0\n1.325,81€\n15 May 2015\n    NA\n13,26€\n15 Jun 2015\n    777,000.0\nNA\nNA\n    8,880,000.0\n0,44€\n15 Aug 2015\n  \n  \n  \n\n\n\n\n\n\n\n\nexibble |> \n  select(num, currency, date) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = 'num', decimals = 1) |>\n  fmt_number(\n    columns = 'currency', \n    decimals = 2, \n    locale = 'de', \n    pattern = '{x}€'\n  ) |> \n  fmt_date(columns = 'date', date_style = \"yMMMd\")\n\n\n\n\n  \n  \n  \n  \n    \n      num\n      currency\n      date\n    \n  \n  \n    0.1\n49,95€\nJan 15, 2015\n    2.2\n17,95€\nFeb 15, 2015\n    33.3\n1,39€\nMar 15, 2015\n    444.4\n65.100,00€\nApr 15, 2015\n    5,550.0\n1.325,81€\nMay 15, 2015\n    NA\n13,26€\nJun 15, 2015\n    777,000.0\nNA\nNA\n    8,880,000.0\n0,44€\nAug 15, 2015\n  \n  \n  \n\n\n\n\n\n\n\n\nexibble |> \n  select(num, currency, date) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = 'num', decimals = 1) |>\n  fmt_number(\n    columns = 'currency', \n    decimals = 2, \n    locale = 'de', \n    pattern = '{x}€'\n  ) |> \n  fmt_date(columns = 'date', date_style = \"yMMMEd\")\n\n\n\n\n  \n  \n  \n  \n    \n      num\n      currency\n      date\n    \n  \n  \n    0.1\n49,95€\nThu, Jan 15, 2015\n    2.2\n17,95€\nSun, Feb 15, 2015\n    33.3\n1,39€\nSun, Mar 15, 2015\n    444.4\n65.100,00€\nWed, Apr 15, 2015\n    5,550.0\n1.325,81€\nFri, May 15, 2015\n    NA\n13,26€\nMon, Jun 15, 2015\n    777,000.0\nNA\nNA\n    8,880,000.0\n0,44€\nSat, Aug 15, 2015\n  \n  \n  \n\n\n\n\n\n\n\n\nTo see the full list of available styles, you can run info_date_style().\n\ninfo_date_style()\n\n\n\n\n  \n  \n  \n    \n      Date Formatting Options\n    \n    \n      Usable in the fmt_date() and fmt_datetime() functions\n    \n  \n  \n    \n      \n      Format Name\n      \n      Formatted Date\n    \n  \n  \n    1\niso\n\n2000-02-29\n    2\nwday_month_day_year\n\nTuesday, February 29, 2000\n    3\nwd_m_day_year\n\nTue, Feb 29, 2000\n    4\nwday_day_month_year\n\nTuesday 29 February 2000\n    5\nmonth_day_year\n\nFebruary 29, 2000\n    6\nm_day_year\n\nFeb 29, 2000\n    7\nday_m_year\n\n29 Feb 2000\n    8\nday_month_year\n\n29 February 2000\n    9\nday_month\n\n29 February\n    10\nday_m\n\n29 Feb\n    11\nyear\n\n2000\n    12\nmonth\n\nFebruary\n    13\nday\n\n29\n    14\nyear.mn.day\n\n2000/02/29\n    15\ny.mn.day\n\n00/02/29\n    16\nyear_week\n\n2000-W09\n    17\nyear_quarter\n\n2000-Q1\n    18\nyMd\nFLEXIBLE\n2/29/2000\n    19\nyMEd\nFLEXIBLE\nTue, 2/29/2000\n    20\nyMMM\nFLEXIBLE\nFeb 2000\n    21\nyMMMM\nFLEXIBLE\nFebruary 2000\n    22\nyMMMd\nFLEXIBLE\nFeb 29, 2000\n    23\nyMMMEd\nFLEXIBLE\nTue, Feb 29, 2000\n    24\nGyMd\nFLEXIBLE\n2/29/2000 A\n    25\nGyMMMd\nFLEXIBLE\nFeb 29, 2000 AD\n    26\nGyMMMEd\nFLEXIBLE\nTue, Feb 29, 2000 AD\n    27\nyM\nFLEXIBLE\n2/2000\n    28\nMd\nFLEXIBLE\n2/29\n    29\nMEd\nFLEXIBLE\nTue, 2/29\n    30\nMMMd\nFLEXIBLE\nFeb 29\n    31\nMMMEd\nFLEXIBLE\nTue, Feb 29\n    32\nMMMMd\nFLEXIBLE\nFebruary 29\n    33\nGyMMM\nFLEXIBLE\nFeb 2000 AD\n    34\nyQQQ\nFLEXIBLE\nQ1 2000\n    35\nyQQQQ\nFLEXIBLE\n1st quarter 2000\n    36\nGy\nFLEXIBLE\n2000 AD\n    37\ny\nFLEXIBLE\n2000\n    38\nM\nFLEXIBLE\n2\n    39\nMMM\nFLEXIBLE\nFeb\n    40\nd\nFLEXIBLE\n29\n    41\nEd\nFLEXIBLE\n29 Tue\n  \n  \n  \n\n\n\n\n\nNotice that some of these styles are labeled as flexible. This means that they will adjust to locales. Beware that month names may adapt to the locale but not the formatting.\nHere’s an example of that with day_m_year (not flexible) and yMMMd (flexible) using the German locale. Notice how day_m_year does not set a . after the day but yMMMd does. The latter is the correct German formatting.\n\nday_m_yearyMMMd\n\n\n\n\nCode\nexibble |> \n  select(num, currency, date) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = 'num', decimals = 1) |>\n  fmt_number(\n    columns = 'currency', \n    decimals = 2, \n    locale = 'de',\n    pattern = '{x}€'\n  ) |> \n  fmt_date(\n    columns = 'date', \n    locale = 'de',\n    date_style = \"day_m_year\"\n  )\n\n\n\n\n\n  \n  \n  \n  \n    \n      num\n      currency\n      date\n    \n  \n  \n    0.1\n49,95€\n15 Jan. 2015\n    2.2\n17,95€\n15 Feb. 2015\n    33.3\n1,39€\n15 März 2015\n    444.4\n65.100,00€\n15 Apr. 2015\n    5,550.0\n1.325,81€\n15 Mai 2015\n    NA\n13,26€\n15 Juni 2015\n    777,000.0\nNA\nNA\n    8,880,000.0\n0,44€\n15 Aug. 2015\n  \n  \n  \n\n\n\n\n\n\n\n\n\nCode\nexibble |> \n  select(num, currency, date) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = 'num', decimals = 1) |>\n  fmt_number(\n    columns = 'currency', \n    decimals = 2, \n    locale = 'de',\n    pattern = '{x}€'\n  ) |> \n  fmt_date(\n    columns = 'date', \n    locale = 'de',\n    date_style = \"yMMMd\"\n  )\n\n\n\n\n\n  \n  \n  \n  \n    \n      num\n      currency\n      date\n    \n  \n  \n    0.1\n49,95€\n15. Jan. 2015\n    2.2\n17,95€\n15. Feb. 2015\n    33.3\n1,39€\n15. März 2015\n    444.4\n65.100,00€\n15. Apr. 2015\n    5,550.0\n1.325,81€\n15. Mai 2015\n    NA\n13,26€\n15. Juni 2015\n    777,000.0\nNA\nNA\n    8,880,000.0\n0,44€\n15. Aug. 2015\n  \n  \n  \n\n\n\n\n\n\n\n\nFormatting time works basically the same, so I’m just going to show one example.1\n\nexibble |> \n  select(num, currency, date, time) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = 'num', decimals = 1) |>\n  fmt_number(\n    columns = 'currency', \n    decimals = 2, \n    locale = 'de',\n    pattern = '{x}€'\n  ) |> \n  fmt_date(columns = 'date', locale = 'de', date_style = \"yMMMd\") |> \n  fmt_time(columns = 'time', time_style = \"Hms\")\n\n\n\n\n  \n  \n  \n  \n    \n      num\n      currency\n      date\n      time\n    \n  \n  \n    0.1\n49,95€\n15. Jan. 2015\n13:35:00\n    2.2\n17,95€\n15. Feb. 2015\n14:40:00\n    33.3\n1,39€\n15. März 2015\n15:45:00\n    444.4\n65.100,00€\n15. Apr. 2015\n16:50:00\n    5,550.0\n1.325,81€\n15. Mai 2015\n17:55:00\n    NA\n13,26€\n15. Juni 2015\nNA\n    777,000.0\nNA\nNA\n19:10:00\n    8,880,000.0\n0,44€\n15. Aug. 2015\n20:20:00\n  \n  \n  \n\n\n\n\n\nI have a date. I have a time. Uh! Datetime, cf. PPAP2.\nWorking with these magical columns is exactly what you’d expect. You use fmt_datetime() which has a date_style and a time_style argument.\n\nexibble |> \n  select(num, currency, date, time, datetime) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = 'num', decimals = 1) |>\n  fmt_number(\n    columns = 'currency', \n    decimals = 2, \n    locale = 'de',\n    pattern = '{x}€'\n  ) |> \n  fmt_date(columns = 'date', locale = 'de', date_style = \"yMMMd\") |> \n  fmt_time(columns = 'time', time_style = \"Hms\") |> \n  fmt_datetime(\n    columns = 'datetime', \n    date_style = \"yMMMd\", \n    time_style = \"Hms\"\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      num\n      currency\n      date\n      time\n      datetime\n    \n  \n  \n    0.1\n49,95€\n15. Jan. 2015\n13:35:00\nJan 1, 2018 02:22:00\n    2.2\n17,95€\n15. Feb. 2015\n14:40:00\nFeb 2, 2018 14:33:00\n    33.3\n1,39€\n15. März 2015\n15:45:00\nMar 3, 2018 03:44:00\n    444.4\n65.100,00€\n15. Apr. 2015\n16:50:00\nApr 4, 2018 15:55:00\n    5,550.0\n1.325,81€\n15. Mai 2015\n17:55:00\nMay 5, 2018 04:00:00\n    NA\n13,26€\n15. Juni 2015\nNA\nJun 6, 2018 16:11:00\n    777,000.0\nNA\nNA\n19:10:00\nJul 7, 2018 05:22:00\n    8,880,000.0\n0,44€\n15. Aug. 2015\n20:20:00\nNA\n  \n  \n  \n\n\n\n\n\n\n\n3.1.4 Markdown\nWe can also use Markdown and therefore HTML + CSS in our tables. Let’s use that to make our table a bit colorful. For example, we could wrap elements from the currency column into <span>-tags to colorize them.\n\nexibble |> \n  select(num, currency, date, time, datetime) |> \n  mutate(\n    currency = str_c(\n      '<span style=\"color:red;font-size:20pt\">',\n      currency,\n      '€</span>'\n    )\n  ) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = 'num', decimals = 1) |>\n  fmt_date(columns = 'date', locale = 'de', date_style = \"yMMMd\") |> \n  fmt_time(columns = 'time', time_style = \"Hms\") |> \n  fmt_datetime(\n    columns = 'datetime', \n    date_style = \"yMMMd\", \n    time_style = \"Hms\"\n  ) |> \n  fmt_markdown(columns = 'currency')\n\n\n\n\n  \n  \n  \n  \n    \n      num\n      currency\n      date\n      time\n      datetime\n    \n  \n  \n    0.1\n49.95€\n\n15. Jan. 2015\n13:35:00\nJan 1, 2018 02:22:00\n    2.2\n17.95€\n\n15. Feb. 2015\n14:40:00\nFeb 2, 2018 14:33:00\n    33.3\n1.39€\n\n15. März 2015\n15:45:00\nMar 3, 2018 03:44:00\n    444.4\n65100€\n\n15. Apr. 2015\n16:50:00\nApr 4, 2018 15:55:00\n    5,550.0\n1325.81€\n\n15. Mai 2015\n17:55:00\nMay 5, 2018 04:00:00\n    NA\n13.255€\n\n15. Juni 2015\nNA\nJun 6, 2018 16:11:00\n    777,000.0\nNA\nNA\n19:10:00\nJul 7, 2018 05:22:00\n    8,880,000.0\n0.44€\n\n15. Aug. 2015\n20:20:00\nNA\n  \n  \n  \n\n\n\n\n\nThis is one way you could style your table. But I’ve used this way only for demo purposes. We’ll learn more about styling in Chapter 4.\nThe real power of the fmt_markdown() layer is that you can put any html into the table and it will be formatted correctly afterwards. For example, I’ve copied the svg-code (which can be used in HTML) for the R logo from Wikipedia. Putting this code a {gt} table and using fmt_markdown(), let’s me use the R logo.\n\n## factor to apply to original width and height of svg from Wikipedia\nscale_size <- 0.5 \n\nr_logo_svg <- glue::glue('\n<svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" preserveAspectRatio=\"xMidYMid\" width=\"{724 * scale_size}\" height=\"{561 * scale_size}\" viewBox=\"0 0 724 561\">\n  <defs>\n    <linearGradient id=\"gradientFill-1\" x1=\"0\" x2=\"1\" y1=\"0\" y2=\"1\" gradientUnits=\"objectBoundingBox\" spreadMethod=\"pad\">\n      <stop offset=\"0\" stop-color=\"rgb(203,206,208)\" stop-opacity=\"1\"/>\n      <stop offset=\"1\" stop-color=\"rgb(132,131,139)\" stop-opacity=\"1\"/>\n    </linearGradient>\n    <linearGradient id=\"gradientFill-2\" x1=\"0\" x2=\"1\" y1=\"0\" y2=\"1\" gradientUnits=\"objectBoundingBox\" spreadMethod=\"pad\">\n      <stop offset=\"0\" stop-color=\"rgb(39,109,195)\" stop-opacity=\"1\"/>\n      <stop offset=\"1\" stop-color=\"rgb(22,92,170)\" stop-opacity=\"1\"/>\n    </linearGradient>\n  </defs>\n  <path d=\"M361.453,485.937 C162.329,485.937 0.906,377.828 0.906,244.469 C0.906,111.109 162.329,3.000 361.453,3.000 C560.578,3.000 722.000,111.109 722.000,244.469 C722.000,377.828 560.578,485.937 361.453,485.937 ZM416.641,97.406 C265.289,97.406 142.594,171.314 142.594,262.484 C142.594,353.654 265.289,427.562 416.641,427.562 C567.992,427.562 679.687,377.033 679.687,262.484 C679.687,147.971 567.992,97.406 416.641,97.406 Z\" fill=\"url(#gradientFill-1)\" fill-rule=\"evenodd\"/>\n  <path d=\"M550.000,377.000 C550.000,377.000 571.822,383.585 584.500,390.000 C588.899,392.226 596.510,396.668 602.000,402.500 C607.378,408.212 610.000,414.000 610.000,414.000 L696.000,559.000 L557.000,559.062 L492.000,437.000 C492.000,437.000 478.690,414.131 470.500,407.500 C463.668,401.969 460.755,400.000 454.000,400.000 C449.298,400.000 420.974,400.000 420.974,400.000 L421.000,558.974 L298.000,559.026 L298.000,152.938 L545.000,152.938 C545.000,152.938 657.500,154.967 657.500,262.000 C657.500,369.033 550.000,377.000 550.000,377.000 ZM496.500,241.024 L422.037,240.976 L422.000,310.026 L496.500,310.002 C496.500,310.002 531.000,309.895 531.000,274.877 C531.000,239.155 496.500,241.024 496.500,241.024 Z\" fill=\"url(#gradientFill-2)\" fill-rule=\"evenodd\"/>\n</svg>\n')\n\ntibble(logo = r_logo_svg) |> \n  gt() |> \n  fmt_markdown(columns = 'logo')\n\n\n\n\n  \n  \n  \n  \n    \n      logo\n    \n  \n  \n    \n  \n    \n      \n      \n    \n    \n      \n      \n    \n  \n  \n  \n\n\n  \n  \n  \n\n\n\n\n\nThis fmt_markdown() technique is super powerful. We could even use it to nest {gt}-tables (which are HTML) inside of each other. That’s what we’ll do in Chapter 5 to create elaborate tables.\n\n\n3.1.5 Any data format\nThere are some more fmt_*() functions for specific formats. Once again, you can look at them in the docs. Instead of showing them all, let me finish off this section with the most powerful function of them all. That’s fmt().\nYou can just apply any function that you like for formatting. For example, you could convert text entries to all-caps with str_to_upper().\n\nexibble |> \n  select(num, currency, date, time, datetime, char) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = 'num', decimals = 1) |>\n  fmt_number(\n    columns = 'currency', \n    decimals = 2, \n    locale = 'de',\n    pattern = '{x}€'\n  ) |> \n  fmt_date(columns = 'date', locale = 'de', date_style = \"yMMMd\") |> \n  fmt_time(columns = 'time', time_style = \"Hms\") |> \n  fmt_datetime(\n    columns = 'datetime', \n    date_style = \"yMMMd\", \n    time_style = \"Hms\"\n  ) |> \n  fmt(columns = 'char', fn = str_to_upper)\n\n\n\n\n  \n  \n  \n  \n    \n      num\n      currency\n      date\n      time\n      datetime\n      char\n    \n  \n  \n    0.1\n49,95€\n15. Jan. 2015\n13:35:00\nJan 1, 2018 02:22:00\nAPRICOT\n    2.2\n17,95€\n15. Feb. 2015\n14:40:00\nFeb 2, 2018 14:33:00\nBANANA\n    33.3\n1,39€\n15. März 2015\n15:45:00\nMar 3, 2018 03:44:00\nCOCONUT\n    444.4\n65.100,00€\n15. Apr. 2015\n16:50:00\nApr 4, 2018 15:55:00\nDURIAN\n    5,550.0\n1.325,81€\n15. Mai 2015\n17:55:00\nMay 5, 2018 04:00:00\nNA\n    NA\n13,26€\n15. Juni 2015\nNA\nJun 6, 2018 16:11:00\nFIG\n    777,000.0\nNA\nNA\n19:10:00\nJul 7, 2018 05:22:00\nGRAPEFRUIT\n    8,880,000.0\n0,44€\n15. Aug. 2015\n20:20:00\nNA\nHONEYDEW\n  \n  \n  \n\n\n\n\n\nOr you could write your own time-formatting function.\n\non_time_format <- function(time, target) {\n  if_else(parse_time(time) <= target, 'on time', 'too late')\n}\n\nexibble |> \n  select(time) |> \n  mutate(rep_time = time) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt(\n    columns = 'rep_time', \n    fns = function(x) {\n      on_time_format(x, hms::hms(hours = 16, minutes = 30))\n    }\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      time\n      rep_time\n    \n  \n  \n    13:35\non time\n    14:40\non time\n    15:45\non time\n    16:50\ntoo late\n    17:55\ntoo late\n    NA\nNA\n    19:10\ntoo late\n    20:20\ntoo late"
  },
  {
    "objectID": "formatting.html#sec-sub-functions",
    "href": "formatting.html#sec-sub-functions",
    "title": "3  Formatting",
    "section": "3.2 sub_ functions",
    "text": "3.2 sub_ functions\nThe sub_*() functions are straightforward to use. There are five functions that you can use.\n\nsub_missing() replaces NA values\nsub_zero() replaces zeroes\nsub_large_values() replaces large values (according to some threshold)\nsub_small_values() does… I think you can guess it\nsub_values() can replace large numbers or texts that match a regex\n\nThe first two are straight-forward to use. By default, they apply to the whole data. But you can also target only specific columns and rows by changing the columns and rows argument.\n\nReplace NAReplace zeros\n\n\n\nexibble |> \n  select(num, currency, date, time, datetime) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = 'num', decimals = 1) |>\n  fmt_number(\n    columns = 'currency', \n    decimals = 2, \n    locale = 'de',\n    pattern = '{x}€'\n  ) |> \n  fmt_date(columns = 'date', locale = 'de', date_style = \"yMMMd\") |> \n  fmt_time(columns = 'time', time_style = \"Hms\") |> \n  fmt_datetime(\n    columns = 'datetime', \n    date_style = \"yMMMd\", \n    time_style = \"Hms\"\n  ) |> \n  sub_missing(missing_text = '----------')\n\n\n\n\n  \n  \n  \n  \n    \n      num\n      currency\n      date\n      time\n      datetime\n    \n  \n  \n    0.1\n49,95€\n15. Jan. 2015\n13:35:00\nJan 1, 2018 02:22:00\n    2.2\n17,95€\n15. Feb. 2015\n14:40:00\nFeb 2, 2018 14:33:00\n    33.3\n1,39€\n15. März 2015\n15:45:00\nMar 3, 2018 03:44:00\n    444.4\n65.100,00€\n15. Apr. 2015\n16:50:00\nApr 4, 2018 15:55:00\n    5,550.0\n1.325,81€\n15. Mai 2015\n17:55:00\nMay 5, 2018 04:00:00\n    ----------\n13,26€\n15. Juni 2015\n----------\nJun 6, 2018 16:11:00\n    777,000.0\n----------\n----------\n19:10:00\nJul 7, 2018 05:22:00\n    8,880,000.0\n0,44€\n15. Aug. 2015\n20:20:00\n----------\n  \n  \n  \n\n\n\n\n\n\n\n\ntibble(demo_column = -3:3) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  sub_zero(zero_text = 'ZERO, WATCH OUT WHOOP WHOOP')\n\n\n\n\n  \n  \n  \n  \n    \n      demo_column\n    \n  \n  \n    -3\n    -2\n    -1\n    ZERO, WATCH OUT WHOOP WHOOP\n    1\n    2\n    3\n  \n  \n  \n\n\n\n\n\n\n\n\nWith sub_small_vals() and sub_large_vals() you have to be a bit careful about the sign of the number you’re replacing. Both functions will replace only positive or negative numbers. So, if you want to replace positive and negative numbers, you have to use the layers multiple times.\n\nReplace positivesReplace negativesReplace both\n\n\n\ntibble(x = c(-100, 100, 0.01, -0.01), demo_col = x) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = where(is.numeric)) |> \n  sub_small_vals(\n    columns = 'demo_col', threshold = 1, sign = '+'\n  ) |> \n  sub_large_vals(\n    columns = 'demo_col', threshold = 50, sign = '+'\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      x\n      demo_col\n    \n  \n  \n    −100.00\n−100.00\n    100.00\n≥50\n    0.01\n<1\n    −0.01\n−0.01\n  \n  \n  \n\n\n\n\n\n\n\n\ntibble(x = c(-100, 100, 0.01, -0.01), demo_col = x) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = where(is.numeric)) |> \n  sub_small_vals(\n    columns = 'demo_col', threshold = 1, sign = '-'\n  ) |> \n  sub_large_vals(\n    columns = 'demo_col', threshold = 50, sign = '-'\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      x\n      demo_col\n    \n  \n  \n    −100.00\n≤-50\n    100.00\n100.00\n    0.01\n0.01\n    −0.01\n<abs(-1)\n  \n  \n  \n\n\n\n\n\n\n\n\ntibble(x = c(-100, 100, 0.01, -0.01), demo_col = x) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = where(is.numeric)) |> \n  sub_small_vals(\n    columns = 'demo_col', threshold = 1, sign = '+'\n  ) |> \n  sub_large_vals(\n    columns = 'demo_col', threshold = 50, sign = '+'\n  ) |> \n  sub_small_vals(\n    columns = 'demo_col', threshold = 1, sign = '-'\n  ) |> \n  sub_large_vals(\n    columns = 'demo_col', threshold = 50, sign = '-'\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      x\n      demo_col\n    \n  \n  \n    −100.00\n≤-50\n    100.00\n≥50\n    0.01\n<1\n    −0.01\n<abs(-1)\n  \n  \n  \n\n\n\n\n\n\n\n\nThe last sub_*() function is sub_values(). It is the most powerful function of the sub_*() family because it can replace numbers and texts. To do that it has a values and pattern argument. In case you’re wondering, you can only use one of them at a time. If you specify both, pattern will always take precedence.\nBut there’s more. It also has an fn argument. You could use it to let an arbitrary function decide which values get replaced. In order for this to work, this function must take a column and return a TRUE/FALSE vector of the same length.\nLet’s take a look at a couple of examples.\n\nReplace by valuesReplace by patternReplace by function\n\n\n\nexibble |>\n  select(num) |> \n  mutate(demo_col = num) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = everything()) |> \n  sub_values(\n    columns = 'demo_col',\n    values = c(0.111, 777000),\n    replacement = 'REPLACED'\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      num\n      demo_col\n    \n  \n  \n    0.11\n0.11\n    2.22\n2.22\n    33.33\n33.33\n    444.40\n444.40\n    5,550.00\n5,550.00\n    NA\nNA\n    777,000.00\nREPLACED\n    8,880,000.00\n8,880,000.00\n  \n  \n  \n\n\n\n\n\n\n\n\nexibble |>\n  select(char) |> \n  mutate(demo_col = char) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  sub_values(\n    columns = 'demo_col',\n    pattern = '(a|e)',\n    replacement = 'fruit contains an a or e'\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      char\n      demo_col\n    \n  \n  \n    apricot\nfruit contains an a or e\n    banana\nfruit contains an a or e\n    coconut\ncoconut\n    durian\nfruit contains an a or e\n    NA\nNA\n    fig\nfig\n    grapefruit\nfruit contains an a or e\n    honeydew\nfruit contains an a or e\n  \n  \n  \n\n\n\n\n\n\n\n\nexibble |>\n  select(num) |> \n  mutate(demo_col = num) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = everything()) |> \n  sub_values(\n    columns = 'demo_col',\n    fn = function(x) between(x, 10, 10000),\n    replacement = 'Between 10 and 10000'\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      num\n      demo_col\n    \n  \n  \n    0.11\n0.11\n    2.22\n2.22\n    33.33\nBetween 10 and 10000\n    444.40\nBetween 10 and 10000\n    5,550.00\nBetween 10 and 10000\n    NA\nNA\n    777,000.00\n777,000.00\n    8,880,000.00\n8,880,000.00"
  },
  {
    "objectID": "formatting.html#summary",
    "href": "formatting.html#summary",
    "title": "3  Formatting",
    "section": "3.3 Summary",
    "text": "3.3 Summary\nThat’s a wrap on Chapter 3. We’ve got the formatting options covered. Time to get to the most complicated part of our tables: Their theme.\nJust like in a ggplot we can style more or less every part of our table. And if you’re familiar with HTML/CSS you can even apply custom styles that have not been implemented in {gt} yet."
  },
  {
    "objectID": "styling.html#sec-theming",
    "href": "styling.html#sec-theming",
    "title": "4  Styling",
    "section": "4.1 Theming",
    "text": "4.1 Theming\nThe easiest way to style a table is to apply a pre-installed theme via opt_stylize(). We’ve already done that in the first chapter because it’s really easy to do. But there’s nothing stopping us from overwritting the theme. Just apply another opt_stylize() layer to the table.\n\npenguins_table |> \n  opt_stylize(style = 6, color = 'pink')\n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      \n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Island: Biscoe\n    \n    2007\n5\n5\n-\n-\n16\n17\n    2008\n9\n9\n-\n-\n22\n23\n    2009\n8\n8\n-\n-\n20\n21\n    Maximum\n9\n9\n-\n-\n22\n23\n    Total\n22\n22\n-\n-\n58\n61\n    \n      Island: Dream\n    \n    2007\n9\n10\n13\n13\n-\n-\n    2008\n8\n8\n9\n9\n-\n-\n    2009\n10\n10\n12\n12\n-\n-\n    Maximum\n10\n10\n13\n13\n-\n-\n    Total\n27\n28\n34\n34\n-\n-\n    \n      Island: Torgersen\n    \n    2007\n8\n7\n-\n-\n-\n-\n    2008\n8\n8\n-\n-\n-\n-\n    2009\n8\n8\n-\n-\n-\n-\n    Maximum\n8\n8\n-\n-\n-\n-\n    Total\n24\n23\n-\n-\n-\n-\n  \n  \n  \n\n\n\n\n\n\n4.1.1 Tab options\nNext, we can tweak our table’s appearance with tab_options(). It’s basically the analogue of theme() in {ggplot2}. In Chapter 1, we’ve already used tab_options() to apply three small changes. Once again, there’s no harm in applying another layer of the same stuff.\n\npenguins_table |> \n  tab_options(\n    # These were the ones we applied in the first chapter\n    data_row.padding = px(2),\n    summary_row.padding = px(3), # A bit more padding for summaries\n    row_group.padding = px(4)    # And even more for our groups\n  )\n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      \n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Island: Biscoe\n    \n    2007\n5\n5\n-\n-\n16\n17\n    2008\n9\n9\n-\n-\n22\n23\n    2009\n8\n8\n-\n-\n20\n21\n    Maximum\n9\n9\n-\n-\n22\n23\n    Total\n22\n22\n-\n-\n58\n61\n    \n      Island: Dream\n    \n    2007\n9\n10\n13\n13\n-\n-\n    2008\n8\n8\n9\n9\n-\n-\n    2009\n10\n10\n12\n12\n-\n-\n    Maximum\n10\n10\n13\n13\n-\n-\n    Total\n27\n28\n34\n34\n-\n-\n    \n      Island: Torgersen\n    \n    2007\n8\n7\n-\n-\n-\n-\n    2008\n8\n8\n-\n-\n-\n-\n    2009\n8\n8\n-\n-\n-\n-\n    Maximum\n8\n8\n-\n-\n-\n-\n    Total\n24\n23\n-\n-\n-\n-\n  \n  \n  \n\n\n\n\n\nBut let’s change a couple of things. Warning: These changes may or may not “improve” the table. We’ll just apply stuff to learn what’s going on. We can worry about aesthetics later.\nWe’ll start by styling the heading a little bit. All of the arguments in tab_options() that target the header start with heading.\n\npenguins_table |> \n  tab_options(\n    # These were the ones we applied in the first chapter\n    data_row.padding = px(2),\n    summary_row.padding = px(3), # A bit more padding for summaries\n    row_group.padding = px(4)    # And even more for our groups\n  ) |> \n  # Change header theme\n  tab_options(\n    heading.align = 'left',\n    heading.background.color = 'darkgreen',\n    heading.title.font.size = px(20)\n  )\n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      \n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Island: Biscoe\n    \n    2007\n5\n5\n-\n-\n16\n17\n    2008\n9\n9\n-\n-\n22\n23\n    2009\n8\n8\n-\n-\n20\n21\n    Maximum\n9\n9\n-\n-\n22\n23\n    Total\n22\n22\n-\n-\n58\n61\n    \n      Island: Dream\n    \n    2007\n9\n10\n13\n13\n-\n-\n    2008\n8\n8\n9\n9\n-\n-\n    2009\n10\n10\n12\n12\n-\n-\n    Maximum\n10\n10\n13\n13\n-\n-\n    Total\n27\n28\n34\n34\n-\n-\n    \n      Island: Torgersen\n    \n    2007\n8\n7\n-\n-\n-\n-\n    2008\n8\n8\n-\n-\n-\n-\n    2009\n8\n8\n-\n-\n-\n-\n    Maximum\n8\n8\n-\n-\n-\n-\n    Total\n24\n23\n-\n-\n-\n-\n  \n  \n  \n\n\n\n\n\nNext, let us attack our column labels. We’ll do two things:\n\nChange the background color (simple)\nRemove the bottom border line (A bit tricky. You’ll see why in a sec.)\n\nTo achieve the latter thing, you need to change border-style. The most common are solid, dashed, dotted and none. Guess which one we’re choosing.\n\npenguins_table |> \n  tab_options(\n    # These were the ones we applied in the first chapter\n    data_row.padding = px(2),\n    summary_row.padding = px(3), # A bit more padding for summaries\n    row_group.padding = px(4)    # And even more for our groups\n  ) |> \n  # Change header theme\n  tab_options(\n    heading.align = 'left',\n    heading.background.color = 'darkgreen',\n    heading.title.font.size = px(20)\n  ) |> \n  tab_options(\n    column_labels.background.color = 'yellow',\n    column_labels.border.bottom.style = 'none'\n  )\n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      \n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Island: Biscoe\n    \n    2007\n5\n5\n-\n-\n16\n17\n    2008\n9\n9\n-\n-\n22\n23\n    2009\n8\n8\n-\n-\n20\n21\n    Maximum\n9\n9\n-\n-\n22\n23\n    Total\n22\n22\n-\n-\n58\n61\n    \n      Island: Dream\n    \n    2007\n9\n10\n13\n13\n-\n-\n    2008\n8\n8\n9\n9\n-\n-\n    2009\n10\n10\n12\n12\n-\n-\n    Maximum\n10\n10\n13\n13\n-\n-\n    Total\n27\n28\n34\n34\n-\n-\n    \n      Island: Torgersen\n    \n    2007\n8\n7\n-\n-\n-\n-\n    2008\n8\n8\n-\n-\n-\n-\n    2009\n8\n8\n-\n-\n-\n-\n    Maximum\n8\n8\n-\n-\n-\n-\n    Total\n24\n23\n-\n-\n-\n-\n  \n  \n  \n\n\n\n\n\nThe effect of the color change is clearly visible. But what’s that? There is still a line below the column labels. The reason for this is simple: There is no border below the column_labels area anymore. But there is still a border above the table_body and the row_group. Yes, that’s right. You can only remove one line at the cost of three1.\n\npenguins_table |> \n  tab_options(\n    # These were the ones we applied in the first chapter\n    data_row.padding = px(2),\n    summary_row.padding = px(3), # A bit more padding for summaries\n    row_group.padding = px(4)    # And even more for our groups\n  ) |> \n  # Change header theme\n  tab_options(\n    heading.align = 'left',\n    heading.background.color = 'darkgreen',\n    heading.title.font.size = px(20)\n  ) |> \n  tab_options(\n    column_labels.background.color = 'yellow',\n    column_labels.border.bottom.style = 'none',\n    row_group.border.top.style = 'none',\n    table_body.border.top.style = 'none'\n  )\n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      \n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Island: Biscoe\n    \n    2007\n5\n5\n-\n-\n16\n17\n    2008\n9\n9\n-\n-\n22\n23\n    2009\n8\n8\n-\n-\n20\n21\n    Maximum\n9\n9\n-\n-\n22\n23\n    Total\n22\n22\n-\n-\n58\n61\n    \n      Island: Dream\n    \n    2007\n9\n10\n13\n13\n-\n-\n    2008\n8\n8\n9\n9\n-\n-\n    2009\n10\n10\n12\n12\n-\n-\n    Maximum\n10\n10\n13\n13\n-\n-\n    Total\n27\n28\n34\n34\n-\n-\n    \n      Island: Torgersen\n    \n    2007\n8\n7\n-\n-\n-\n-\n    2008\n8\n8\n-\n-\n-\n-\n    2009\n8\n8\n-\n-\n-\n-\n    Maximum\n8\n8\n-\n-\n-\n-\n    Total\n24\n23\n-\n-\n-\n-\n  \n  \n  \n\n\n\n\n\nSo how do you find out which areas might affect whatever it is that you want to style? Lucky for us, the gt docs have a neat image that shows you the areas of a {gt} table.\n\n\n\n\n\nFigure 4.1: This figure is taken straight form the gt docs. I didn’t find a license for this image. But I hope it’s cool if I use it. Please let me know if not.\n\n\n\n\nThere’s one more way to find out what border you need to overwrite and we’ll talk about it in Section 4.2. For now, let me show you how you can target even more specific parts of your table.\n\n\n4.1.2 Cell styling\nImagine that you want to turn the Chinstrap column spanner blue (for whatever reason). You have seen that you can target only all column labels and all column spanners with tab_options(). For very specific wishes (like this one), there’s tab_style().\nThis function has two arguments: locations and style. Does this remind you of something? That’s right, it’s very similar to text_transform() which you learned in Chapter 2. But instead of applying a text transformation function to a cell, we apply a style.\nNow, to specify locations and style we have two sets of helper functions. The location helpers translate more or less to the areas that you see in Figure 4.1.\n\n\n\nLocation helpers\n\ncells_body()\ncells_column_labels()\ncells_column_spanners()\ncells_footnotes()\ncells_grand_summary()\ncells_row_groups()\ncells_stub()\ncells_stub_grand_summary()\ncells_stub_summary()\ncells_stubhead()\ncells_summary()\ncells_title()\n\n\n\n\nStyle helpers\n\ncell_borders()\ncell_fill()\ncell_text()\n\n\n\n\nApplying these helpers is pretty straightforward. Just use them for either locations or style in tab_style(). For example, we can use cells_column_spanners() to target all column spanners. And with cell_fill() we can turn them blue.\n\npenguins_table |> \n  tab_options(\n    # These were the ones we applied in the first chapter\n    data_row.padding = px(2),\n    summary_row.padding = px(3), # A bit more padding for summaries\n    row_group.padding = px(4)    # And even more for our groups\n  ) |> \n  # Change header theme\n  tab_options(\n    heading.align = 'left',\n    heading.background.color = 'darkgreen',\n    heading.title.font.size = px(20)\n  ) |> \n  tab_options(\n    column_labels.background.color = 'yellow',\n    column_labels.border.bottom.style = 'none',\n    row_group.border.top.style = 'none',\n    table_body.border.top.style = 'none'\n  ) |> \n  tab_style(\n    locations = cells_column_spanners(),\n    style = cell_fill(color = 'dodgerblue')\n  )\n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      \n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Island: Biscoe\n    \n    2007\n5\n5\n-\n-\n16\n17\n    2008\n9\n9\n-\n-\n22\n23\n    2009\n8\n8\n-\n-\n20\n21\n    Maximum\n9\n9\n-\n-\n22\n23\n    Total\n22\n22\n-\n-\n58\n61\n    \n      Island: Dream\n    \n    2007\n9\n10\n13\n13\n-\n-\n    2008\n8\n8\n9\n9\n-\n-\n    2009\n10\n10\n12\n12\n-\n-\n    Maximum\n10\n10\n13\n13\n-\n-\n    Total\n27\n28\n34\n34\n-\n-\n    \n      Island: Torgersen\n    \n    2007\n8\n7\n-\n-\n-\n-\n    2008\n8\n8\n-\n-\n-\n-\n    2009\n8\n8\n-\n-\n-\n-\n    Maximum\n8\n8\n-\n-\n-\n-\n    Total\n24\n23\n-\n-\n-\n-\n  \n  \n  \n\n\n\n\n\nAnother cool way to target cells is tab_style_body(). Basically, it is a combination of fmt() from Chapter 3 and tab_style(). So, you can apply a style to table cells that either match a regex, correspond to a specific value or fulfill criteria according to your own custom function. Here’s one example of that.\n\npenguins_table |> \n  tab_options(\n    # These were the ones we applied in the first chapter\n    data_row.padding = px(2),\n    summary_row.padding = px(3), # A bit more padding for summaries\n    row_group.padding = px(4)    # And even more for our groups\n  ) |> \n  # Change header theme\n  tab_options(\n    heading.align = 'left',\n    heading.background.color = 'darkgreen',\n    heading.title.font.size = px(20)\n  ) |> \n  tab_options(\n    column_labels.background.color = 'yellow',\n    column_labels.border.bottom.style = 'none',\n    row_group.border.top.style = 'none',\n    table_body.border.top.style = 'none'\n  ) |> \n  tab_style(\n    locations = cells_column_spanners(),\n    style = cell_fill(color = 'dodgerblue')\n  ) |> \n  tab_style_body(\n    fn = function(x) between(x, 5, 10),\n    style = cell_text(color = 'red', weight = 'bold')\n  )\n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      \n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Island: Biscoe\n    \n    2007\n5\n5\n-\n-\n16\n17\n    2008\n9\n9\n-\n-\n22\n23\n    2009\n8\n8\n-\n-\n20\n21\n    Maximum\n9\n9\n-\n-\n22\n23\n    Total\n22\n22\n-\n-\n58\n61\n    \n      Island: Dream\n    \n    2007\n9\n10\n13\n13\n-\n-\n    2008\n8\n8\n9\n9\n-\n-\n    2009\n10\n10\n12\n12\n-\n-\n    Maximum\n10\n10\n13\n13\n-\n-\n    Total\n27\n28\n34\n34\n-\n-\n    \n      Island: Torgersen\n    \n    2007\n8\n7\n-\n-\n-\n-\n    2008\n8\n8\n-\n-\n-\n-\n    2009\n8\n8\n-\n-\n-\n-\n    Maximum\n8\n8\n-\n-\n-\n-\n    Total\n24\n23\n-\n-\n-\n-\n  \n  \n  \n\n\n\n\n\nUnfortunately, this function works only on cells in the body. Thus we have to find some other way to target the Chinstrap column spanner. To make this work, we have to assign an ID to the column spanner. Then, we can target that ID within cells_column_spanners(). Here’s a minimal example of how that works.\n\nexibble |> \n  select(1:4) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = 'num') |> \n  tab_spanner(\n    columns = 1:2, \n    label = 'A column spanner', \n    id = 'spannerA' ## That's the ID we can target\n  ) |> \n  tab_spanner(\n    columns = 3:4, \n    label = 'Another column spanner', \n    id = 'spannerB' ## That's the ID we can target\n  )  |> \n  tab_style(\n    locations = cells_column_spanners(spanners = 'spannerA'),\n    style = cell_fill(color = 'darkgreen')\n  ) |> \n  tab_style(\n    locations = cells_column_spanners(spanners = 'spannerB'),\n    style = cell_fill(color = 'darkgreen', alpha = 0.5)\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      \n        A column spanner\n      \n      \n        Another column spanner\n      \n    \n    \n      num\n      char\n      fctr\n      date\n    \n  \n  \n    0.11\napricot\none\n2015-01-15\n    2.22\nbanana\ntwo\n2015-02-15\n    33.33\ncoconut\nthree\n2015-03-15\n    444.40\ndurian\nfour\n2015-04-15\n    5,550.00\nNA\nfive\n2015-05-15\n    NA\nfig\nsix\n2015-06-15\n    777,000.00\ngrapefruit\nseven\nNA\n    8,880,000.00\nhoneydew\neight\n2015-08-15\n  \n  \n  \n\n\n\n\n\nApplying this logic to our penguins table is straightforward. But you will have to copy the whole table code and insert an ID in the initial gt() layer. I think you get the idea. So here’s only the result (unfold for full code).\n\n\nCode\npenguin_counts_wider |> \n  mutate(across(.cols = -(1:2), ~if_else(. == 0, NA_integer_, .))) |> \n  mutate(\n    island = as.character(island), \n    year = as.numeric(year),\n    island = paste0('Island: ', island)\n  ) |> \n  gt(groupname_col = 'island', rowname_col = 'year') |> \n  cols_label(.list = desired_colnames) |> \n  tab_spanner(\n    label = md('**Adelie**'),\n    columns = 3:4\n  ) |> \n  tab_spanner(\n    label = md('**Chinstrap**'),\n    columns = c('Chinstrap_female', 'Chinstrap_male'),\n    id = 'chinstrap'\n  ) |> \n  tab_spanner(\n    label =  md('**Gentoo**'),\n    columns = contains('Gentoo')\n  ) |> \n  tab_header(\n    title = 'Penguins in the Palmer Archipelago',\n    subtitle = 'Data is courtesy of the {palmerpenguins} R package'\n  ) |> \n  sub_missing(missing_text = '-') |>\n  summary_rows(\n    groups = TRUE,\n    fns = list(\n      'Maximum' = ~max(.),\n      'Total' = ~sum(.) \n    ),\n    formatter = fmt_number,\n    decimals = 0,\n    missing_text = '-'\n  )  |> \n  tab_options(\n    data_row.padding = px(2),\n    summary_row.padding = px(3), # A bit more padding for summaries\n    row_group.padding = px(4)    # And even more for our groups\n  ) |> \n  opt_stylize(style = 6, color = 'gray') |> \n  tab_style(\n    locations = cells_column_spanners(spanners = 'chinstrap'),\n    style = cell_fill(color = 'dodgerblue')\n  )\n\n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      \n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Island: Biscoe\n    \n    2007\n5\n5\n-\n-\n16\n17\n    2008\n9\n9\n-\n-\n22\n23\n    2009\n8\n8\n-\n-\n20\n21\n    Maximum\n9\n9\n-\n-\n22\n23\n    Total\n22\n22\n-\n-\n58\n61\n    \n      Island: Dream\n    \n    2007\n9\n10\n13\n13\n-\n-\n    2008\n8\n8\n9\n9\n-\n-\n    2009\n10\n10\n12\n12\n-\n-\n    Maximum\n10\n10\n13\n13\n-\n-\n    Total\n27\n28\n34\n34\n-\n-\n    \n      Island: Torgersen\n    \n    2007\n8\n7\n-\n-\n-\n-\n    2008\n8\n8\n-\n-\n-\n-\n    2009\n8\n8\n-\n-\n-\n-\n    Maximum\n8\n8\n-\n-\n-\n-\n    Total\n24\n23\n-\n-\n-\n-\n  \n  \n  \n\n\n\n\n\nNotice that the grey border at the bottom of the Chinstrap column spanner looks kind of ugly. So, why not remove it? This is a great exercise of applying multiple styles. This is done by using multiple style helpers and collecting them in a list. The same works with location helpers. Here’s a small example again.\n\nexibble |> \n  select(1:4) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = 'num') |> \n  tab_spanner(\n    columns = 1:2, \n    label = 'A column spanner', \n    id = 'spannerA'\n  ) |> \n  tab_spanner(\n    columns = 3:4, \n    label = 'Another column spanner', \n    id = 'spannerB'\n  )  |> \n  tab_style(\n    locations = cells_column_spanners(spanners = 'spannerA'),\n    style = cell_fill(color = 'darkgreen')\n  ) |> \n  tab_style(\n    locations = cells_column_spanners(spanners = 'spannerB'),\n    style = cell_fill(color = 'darkgreen', alpha = 0.5)\n  ) |> \n  tab_style(\n    locations = list(\n      cells_column_labels(),\n      cells_body(\n        columns = c('char', 'date'), rows = c(3, 5, 8)\n      )\n    ),\n    style = list(\n      cell_fill(color = 'firebrick4'),\n      cell_text(color = 'white', size = 14, weight = 'bold'),\n      cell_borders(\n        sides = c('left', 'right'), \n        color = 'green', \n        weight = px(3)\n      )\n    )\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      \n        A column spanner\n      \n      \n        Another column spanner\n      \n    \n    \n      num\n      char\n      fctr\n      date\n    \n  \n  \n    0.11\napricot\none\n2015-01-15\n    2.22\nbanana\ntwo\n2015-02-15\n    33.33\ncoconut\nthree\n2015-03-15\n    444.40\ndurian\nfour\n2015-04-15\n    5,550.00\nNA\nfive\n2015-05-15\n    NA\nfig\nsix\n2015-06-15\n    777,000.00\ngrapefruit\nseven\nNA\n    8,880,000.00\nhoneydew\neight\n2015-08-15\n  \n  \n  \n\n\n\n\n\nNow, applying the same logic to our Chinstrap column spanner should be easy, right? It is. But unfortunately, it didn’t help. Have a look for yourself. The border is still there.\n\n\nCode\npenguin_counts_wider |> \n  mutate(across(.cols = -(1:2), ~if_else(. == 0, NA_integer_, .))) |> \n  mutate(\n    island = as.character(island), \n    year = as.numeric(year),\n    island = paste0('Island: ', island)\n  ) |> \n  gt(groupname_col = 'island', rowname_col = 'year') |> \n  cols_label(.list = desired_colnames) |> \n  tab_spanner(\n    label = md('**Adelie**'),\n    columns = 3:4\n  ) |> \n  tab_spanner(\n    label = md('**Chinstrap**'),\n    columns = c('Chinstrap_female', 'Chinstrap_male'),\n    id = 'chinstrap'\n  ) |> \n  tab_spanner(\n    label =  md('**Gentoo**'),\n    columns = contains('Gentoo')\n  ) |> \n  tab_header(\n    title = 'Penguins in the Palmer Archipelago',\n    subtitle = 'Data is courtesy of the {palmerpenguins} R package'\n  ) |> \n  sub_missing(missing_text = '-') |>\n  summary_rows(\n    groups = TRUE,\n    fns = list(\n      'Maximum' = ~max(.),\n      'Total' = ~sum(.) \n    ),\n    formatter = fmt_number,\n    decimals = 0,\n    missing_text = '-'\n  )  |> \n  tab_options(\n    data_row.padding = px(2),\n    summary_row.padding = px(3), # A bit more padding for summaries\n    row_group.padding = px(4)    # And even more for our groups\n  ) |> \n  opt_stylize(style = 6, color = 'gray') |> \n  tab_style(\n    locations = cells_column_spanners(spanners = 'chinstrap'),\n    style = list(\n      cell_fill(color = 'dodgerblue'),\n      cell_borders(style = 'hidden')\n    )\n  )\n\n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      \n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Island: Biscoe\n    \n    2007\n5\n5\n-\n-\n16\n17\n    2008\n9\n9\n-\n-\n22\n23\n    2009\n8\n8\n-\n-\n20\n21\n    Maximum\n9\n9\n-\n-\n22\n23\n    Total\n22\n22\n-\n-\n58\n61\n    \n      Island: Dream\n    \n    2007\n9\n10\n13\n13\n-\n-\n    2008\n8\n8\n9\n9\n-\n-\n    2009\n10\n10\n12\n12\n-\n-\n    Maximum\n10\n10\n13\n13\n-\n-\n    Total\n27\n28\n34\n34\n-\n-\n    \n      Island: Torgersen\n    \n    2007\n8\n7\n-\n-\n-\n-\n    2008\n8\n8\n-\n-\n-\n-\n    2009\n8\n8\n-\n-\n-\n-\n    Maximum\n8\n8\n-\n-\n-\n-\n    Total\n24\n23\n-\n-\n-\n-\n  \n  \n  \n\n\n\n\n\nThe reason why this is happening is simple. It’s a known bug. But that’s not a problem. Actually, that’s a great motivation for our next part.\nWhenever styling does not work as expected, {gt} allows you to sneak behind the HTML/CSS curtain. Then, you can manually apply whatever it is you want to apply.\nI know that this may sound daunting but it’s actually quite manageable. I’ve learned most of what I know about HTML/CSS from styling my Quarto blog. And most of that happened via copy-and-paste. With a little bit of effort, you can do the same."
  },
  {
    "objectID": "styling.html#sec-custom-css",
    "href": "styling.html#sec-custom-css",
    "title": "4  Styling",
    "section": "4.2 Custom CSS",
    "text": "4.2 Custom CSS\nLet’s do a HTML/CSS quick tour. First, let us start with something you’re already familiar with. You probably know that Markdown converts **blabla** to blabla, i.e. bold text. This means that with the right decoration, you can turn blabla into bold non-sense.\n\n4.2.1 Tags and their styling\nThe idea is the same for HTML/CSS. With the right decoration, you can transform any text into something else. The cool thing is that with HTML/CSS you can do more than “just” bold text. You have way more options to transform your text.\nUnfortunately, this power comes with a more verbose notation. For example, for bold inline text you could wrap blabla into <span style=\"font-weight:bold;\">...</span>. In this case, <span>...</span> is just the tag to use inline text. This is not a particularly sexy thing to write. But it gives you the power to change more than just the font-weight inside the span tags.\nYou could add styles as you see fit. For example, you continue the list within style= by adding. color:blue;, font-family:Merriweather;….and so on.\nOf course, there are not only <span> tags. For example, there’s <p> for paragraphs, <a> for hyperlinks and <div> for sections aka divisions. In our case there’s one more important tag that {gt} uses: <table>.\n\n\n4.2.2 Classes and IDs\nJust like your Markdown documents, websites are really just decorated texts. Every little tweak on a website can be accomplished by adding the right instruction into style=.\nNow, comes the good part. You don’t have to repeat your style instructions all the time. You can recycle your styles. That’s what CSS classes do.\nLet’s imagine that we want to recycle our previous style that used color:blue;, font-family:Merriweather; and font-weight:bold;. We can define a CSS class my-style that encodes that information as follows.\n.my-style {\n  color:blue;\n  font-family:Merriweather;\n  font-weight:bold;\n}\nNotice the . at the beginning. That’s the secret class symbol in CSS. And that’s also the only thing we need to know to overwrite the gt_table class to style our table like we want. The opt_css() layer will help us to get the CSS code into our website.\n\nlibrary(gt)\nexibble |> \n  gt() |> \n  opt_css(\n    '\n    .gt_table {\n      color:blue;\n      font-family:Merriweather;\n      font-weight:bold;\n    }\n    '\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      num\n      char\n      fctr\n      date\n      time\n      datetime\n      currency\n      row\n      group\n    \n  \n  \n    1.111e-01\napricot\none\n2015-01-15\n13:35\n2018-01-01 02:22\n49.950\nrow_1\ngrp_a\n    2.222e+00\nbanana\ntwo\n2015-02-15\n14:40\n2018-02-02 14:33\n17.950\nrow_2\ngrp_a\n    3.333e+01\ncoconut\nthree\n2015-03-15\n15:45\n2018-03-03 03:44\n1.390\nrow_3\ngrp_a\n    4.444e+02\ndurian\nfour\n2015-04-15\n16:50\n2018-04-04 15:55\n65100.000\nrow_4\ngrp_a\n    5.550e+03\nNA\nfive\n2015-05-15\n17:55\n2018-05-05 04:00\n1325.810\nrow_5\ngrp_b\n    NA\nfig\nsix\n2015-06-15\nNA\n2018-06-06 16:11\n13.255\nrow_6\ngrp_b\n    7.770e+05\ngrapefruit\nseven\nNA\n19:10\n2018-07-07 05:22\nNA\nrow_7\ngrp_b\n    8.880e+06\nhoneydew\neight\n2015-08-15\n20:20\nNA\n0.440\nrow_8\ngrp_b\n  \n  \n  \n\n\n\n\n\nUnfortunately, this did not change anything. Why? Because {gt} is clever enough to encode its styling not only with a global CSS class like .gt_table but also with a unique ID for every table. This ensures that you cannot accidentally change the styling of a different {gt} table.\nThat’s why you can assign a custom ID for your table in gt() and target that ID in your CSS code. The secret symbol for IDs in CSS is #. Armed with that knowledge, let us try again.\n\nlibrary(gt)\nexibble |> \n  gt(id = 'table_id') |> \n  opt_css(\n    '\n    #table_id .gt_table {\n      color:blue;\n      font-family:Merriweather;\n      font-weight:bold;\n    }\n    '\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      num\n      char\n      fctr\n      date\n      time\n      datetime\n      currency\n      row\n      group\n    \n  \n  \n    1.111e-01\napricot\none\n2015-01-15\n13:35\n2018-01-01 02:22\n49.950\nrow_1\ngrp_a\n    2.222e+00\nbanana\ntwo\n2015-02-15\n14:40\n2018-02-02 14:33\n17.950\nrow_2\ngrp_a\n    3.333e+01\ncoconut\nthree\n2015-03-15\n15:45\n2018-03-03 03:44\n1.390\nrow_3\ngrp_a\n    4.444e+02\ndurian\nfour\n2015-04-15\n16:50\n2018-04-04 15:55\n65100.000\nrow_4\ngrp_a\n    5.550e+03\nNA\nfive\n2015-05-15\n17:55\n2018-05-05 04:00\n1325.810\nrow_5\ngrp_b\n    NA\nfig\nsix\n2015-06-15\nNA\n2018-06-06 16:11\n13.255\nrow_6\ngrp_b\n    7.770e+05\ngrapefruit\nseven\nNA\n19:10\n2018-07-07 05:22\nNA\nrow_7\ngrp_b\n    8.880e+06\nhoneydew\neight\n2015-08-15\n20:20\nNA\n0.440\nrow_8\ngrp_b\n  \n  \n  \n\n\n\n\n\nAwesome. This worked. At least a bit. But the column labels remained the same. Here’s why.\nThe things that we want to change (color, font-family and font-weight of the column labels) are not styled in the .gt_table class. These are styled in .gt_col_heading.\nHence, you need to target that class as well. Maybe with different instructions.\n\nexibble |> \n  gt(id = 'table_id') |> \n  opt_css(\n    '\n    #table_id .gt_table {\n      color:blue;\n      font-family:Merriweather;\n      font-weight:bold;\n    }\n    \n    #table_id .gt_col_heading {\n      color:red;\n      font-family:\"Source Sans Pro\";\n      font-weight:bold;\n    }\n    '\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      num\n      char\n      fctr\n      date\n      time\n      datetime\n      currency\n      row\n      group\n    \n  \n  \n    1.111e-01\napricot\none\n2015-01-15\n13:35\n2018-01-01 02:22\n49.950\nrow_1\ngrp_a\n    2.222e+00\nbanana\ntwo\n2015-02-15\n14:40\n2018-02-02 14:33\n17.950\nrow_2\ngrp_a\n    3.333e+01\ncoconut\nthree\n2015-03-15\n15:45\n2018-03-03 03:44\n1.390\nrow_3\ngrp_a\n    4.444e+02\ndurian\nfour\n2015-04-15\n16:50\n2018-04-04 15:55\n65100.000\nrow_4\ngrp_a\n    5.550e+03\nNA\nfive\n2015-05-15\n17:55\n2018-05-05 04:00\n1325.810\nrow_5\ngrp_b\n    NA\nfig\nsix\n2015-06-15\nNA\n2018-06-06 16:11\n13.255\nrow_6\ngrp_b\n    7.770e+05\ngrapefruit\nseven\nNA\n19:10\n2018-07-07 05:22\nNA\nrow_7\ngrp_b\n    8.880e+06\nhoneydew\neight\n2015-08-15\n20:20\nNA\n0.440\nrow_8\ngrp_b\n  \n  \n  \n\n\n\n\n\nYou’d think that if you target the .gt_table class you’d also target the .gt_col_heading class. You know, because column headings are part of a table. But that’s not how CSS works. If you want to overwrite existing classes, you need to target the most specific one.\nSo, how do you find out which one is the right class to target? The short answer is: Check it with your browser. On any website, you can right-click anywhere and then hit “Inspect”. This will open the HTML and CSS code of the current website.\nJust use that on the website that displays your current table. In RStudio, I recommend that you hit the “Show in new window” button in the viewer panel. This will open your table in your default browser and then you can take a look at the table’s code.\nAnd I know that what you see after you hit “Inspect” can really confusing if you’ve never worked with HTML or CSS before. Here’s a video that can help you. I recorded this to help readers style their Quarto blog but the same principles apply here.\n\n\nIn this video, you can probably skip straight to 05:48 if you want to recap the HTML/CSS intro. Or you can skip to 10:28 if you just want to know how to navigate the code.\nSo, let us put our new-found knowledge into practice. Let’s do something that we couldn’t do before, i.e adding a color gradient. We will apply it to our brands table from Chapter 2. Remember that one? Here it is again.\n\nbrands <- tibble(\n  Brand = c('twitter', 'facebook', 'linkedin', 'github'),\n  color = c('#1DA1F2', '#4267B2', '#0077B5', '#333' )\n) |>\n  mutate(\n# Apply fa() function with all values from columns Brand and color\n    Emoji = map2(Brand, color, ~fontawesome::fa(.x, fill = .y)),\n# Apply html() function to previous results\n    Emoji = map(Emoji, html),\n    Brand = str_to_title(Brand)\n  ) |>\n  select(-color)\n\nbrands |>\n  gt(id = 'brands-tbl') |>\n  tab_header(\n    title = 'Brand table',\n    subtitle = 'Icons are taken from the {fontawesome} package'\n  )  |>\n  tab_style(\n    style = list(cell_text(size = px(25))),\n    locations = cells_body(columns = 'Emoji')\n  )\n\n\n\n\n  \n  \n  \n    \n      Brand table\n    \n    \n      Icons are taken from the {fontawesome} package\n    \n  \n  \n    \n      Brand\n      Emoji\n    \n  \n  \n    Twitter\n\n    Facebook\n\n    Linkedin\n\n    Github\n\n  \n  \n  \n\n\n\n\n\nTo use a color gradient, we can target the .gt_table class and set its background. The CSS-code for a linear gradient is linear-gradient(). Shocker, I know! It requires an angle, e.g. 135deg, and two colors.\n\nbrands |>\n  gt(id = 'brands-tbl') |>\n  tab_header(\n    title = 'Brand table',\n    subtitle = 'Icons are taken from the {fontawesome} package'\n  )  |>\n# This part makes emojis larger\n  tab_style(\n    style = list(cell_text(size = px(25))),\n    locations = cells_body(columns = 'Emoji')\n  ) |> \n  opt_css(\n    css = '\n    #brands-tbl .gt_table {\n      background: linear-gradient(135deg, #FFFB7D, #9599E2);\n    }\n    '\n  )\n\n\n\n\n  \n  \n  \n    \n      Brand table\n    \n    \n      Icons are taken from the {fontawesome} package\n    \n  \n  \n    \n      Brand\n      Emoji\n    \n  \n  \n    Twitter\n\n    Facebook\n\n    Linkedin\n\n    Github\n\n  \n  \n  \n\n\n\n\n\nThis worked almost as expected. The trick to color the full table is to target the column headings and the table heading and make their background transparent.\n\nbrands |>\n  gt(id = 'brands-tbl') |>\n  tab_header(\n    title = 'Brand table',\n    subtitle = 'Icons are taken from the {fontawesome} package'\n  )  |>\n# This part makes emojis larger\n  tab_style(\n    style = list(cell_text(size = px(25))),\n    locations = cells_body(columns = 'Emoji')\n  ) |> \n  opt_css(\n    css = '\n    #brands-tbl .gt_table {\n      background: linear-gradient(135deg, #FFFB7D, #9599E2);\n    }\n    \n     #brands-tbl .gt_heading, #brands-tbl .gt_col_heading {\n        background:transparent;\n      }\n    '\n  )\n\n\n\n\n  \n  \n  \n    \n      Brand table\n    \n    \n      Icons are taken from the {fontawesome} package\n    \n  \n  \n    \n      Brand\n      Emoji\n    \n  \n  \n    Twitter\n\n    Facebook\n\n    Linkedin\n\n    Github\n\n  \n  \n  \n\n\n\n\n\nAre color gradients useful for a table? I don’t know. But I think they look fancy. So here’s another familiar table restyled with a color gradient.\n\n\nCode\nlibrary(tidyverse)\nlibrary(gt)\n\nfiltered_penguins <- palmerpenguins::penguins |>\n    filter(!is.na(sex))\n\npenguin_weights <- palmerpenguins::penguins |>\n  filter(!is.na(sex)) |>\n  group_by(species) |>\n  summarise(\n    Min = min(body_mass_g),\n    Mean = mean(body_mass_g) |> round(digits = 2),\n    Max = max(body_mass_g)\n  ) |>\n  mutate(species = as.character(species), Distribution = species) |>\n  rename(Species = species)\n\nplot_density_species_gradient <- function(species, variable) {\n  full_range <- filtered_penguins |>\n    pull({{variable}}) |>\n    range()\n\n  filtered_penguins |>\n    filter(species == !!species) |>\n    ggplot(aes(x = {{variable}}, y = species)) +\n    geom_violin(fill = 'white', col = 'black', linewidth = 2) +\n    theme_minimal() +\n    scale_y_discrete(breaks = NULL) +\n    scale_x_continuous(breaks = NULL) +\n    labs(x = element_blank(), y = element_blank()) +\n    coord_cartesian(xlim = full_range)\n}\n\npenguin_weights |>\n  gt(id = 'weights-tbl') |>\n  tab_spanner(\n    label = 'Penguin\\'s weight',\n    columns = -Species\n  ) |>\n  text_transform(\n    locations = cells_body(columns = 'Distribution'),\n    # Create a function that takes the a column as input\n    # and gives a list of ggplots as output\n    fn = function(column) {\n      map(column, ~plot_density_species_gradient(., body_mass_g)) |>\n        ggplot_image(height = px(50), aspect_ratio = 3)\n    }\n  ) |>\n  cols_align(\n    align = 'center',\n    columns = 'Distribution'\n  ) |>\n  tab_options(\n    table.font.names = 'Merriweather',\n    table.font.color = 'white',\n    heading.align = 'left',\n    table_body.hlines.width = px(1),\n    table_body.hlines.color =  'white',\n    table_body.border.top.color = 'white',\n    table_body.border.top.style = px(1),\n    heading.border.bottom.width = px(1),\n    heading.border.bottom.color =  'white',\n    column_labels.border.bottom.width = px(1),\n    column_labels.border.bottom.color =  'white',\n    column_labels.font.weight = 'bold',\n    table.border.top.style = 'none',\n    table_body.border.bottom.color = 'white'\n  ) |>\n  opt_css(\n    css = '\n    #weights-tbl .gt_table {\n      background: linear-gradient(-135deg, #c31432, #240b36);\n    }\n\n    #weights-tbl .gt_heading, #weights-tbl .gt_col_heading, #weights-tbl .gt_column_spanner_outer {\n      background:transparent;\n    }\n\n    #weights-tbl .gt_col_headings {\n      border-top-color: white;\n      border-top-width:1px;\n    }\n\n    '\n  )\n\n\n\n\n\n  \n  \n  \n  \n    \n      Species\n      \n        Penguin's weight\n      \n    \n    \n      Min\n      Mean\n      Max\n      Distribution\n    \n  \n  \n    Adelie\n2850\n3706.16\n4775\n\n    Chinstrap\n2700\n3733.09\n4800\n\n    Gentoo\n3950\n5092.44\n6300\n\n  \n  \n  \n\n\n\n\n\nFinally, we can fix our penguin table from before. This will require another little CSS trick. The problem that prevented us to from erasing the spanner’s bottom border was this bug: The actual cell that we need to target is nested inside the cell that we targeted with tab_style(). Hence, our changes with tab_style() are not precise enough to change anything. Thus, the only way to circumvent the bug is to target the correct cell with CSS. Let’s do that for our dummy example first.\n\n\n\n\n\n  \n  \n  \n  \n    \n      \n        A column spanner\n      \n      \n        Another column spanner\n      \n    \n    \n      num\n      char\n      fctr\n      date\n    \n  \n  \n    0.11\napricot\none\n2015-01-15\n    2.22\nbanana\ntwo\n2015-02-15\n    33.33\ncoconut\nthree\n2015-03-15\n    444.40\ndurian\nfour\n2015-04-15\n    5,550.00\nNA\nfive\n2015-05-15\n    NA\nfig\nsix\n2015-06-15\n    777,000.00\ngrapefruit\nseven\nNA\n    8,880,000.00\nhoneydew\neight\n2015-08-15\n  \n  \n  \n\n\n\n\n\nIf you study the HTML code of this table, you’ll notice two things:\n\nThe cell that we need to target uses <span> tags.\nThis cell is nested inside <th> tags (th = table header).\nMore prescisely, it uses <th id=\"Another column spanner\">.\n\nHence, we need to use CSS code to target <span> tags inside <th> tags with id=\"Another column spanner\". The code for that is th[id='Another column spanner'] > span. Add the table ID to this and we’re can remove the border from one spanner.\n\nexibble |> \n  select(1:4) |> \n  gt(id = 'mini-table') |> \n  opt_stylize(style = 3) |> \n  fmt_number(columns = 'num') |> \n  tab_spanner(\n    columns = 1:2, \n    label = 'A column spanner', \n    id = 'spannerA'\n  ) |> \n  tab_spanner(\n    columns = 3:4, \n    label = 'Another column spanner', \n    id = 'spannerB'\n  )  |> \n  tab_style(\n    locations = cells_column_spanners(spanners = 'spannerA'),\n    style = cell_fill(color = 'darkgreen')\n  ) |> \n  tab_style(\n    locations = cells_column_spanners(spanners = 'spannerB'),\n    style = cell_fill(color = 'darkgreen', alpha = 0.5)\n  ) |> \n  tab_style(\n    locations = list(\n      cells_column_labels(),\n      cells_body(columns = c('char', 'date'), rows = c(3, 5, 8))\n    ),\n    style = list(\n      cell_fill(color = 'firebrick4'),\n      cell_text(color = 'white', size = 14, weight = 'bold'),\n      cell_borders(\n        sides = c('left', 'right'), \n        color = 'green', \n        weight = px(3)\n      )\n    )\n  ) |> \n  opt_css(\n    \"#mini-table th[id='Another column spanner'] > span {\n        border-bottom-style: none;\n      }\n    \"\n  )\n\n\n\n\n  \n  \n  \n  \n    \n      \n        A column spanner\n      \n      \n        Another column spanner\n      \n    \n    \n      num\n      char\n      fctr\n      date\n    \n  \n  \n    0.11\napricot\none\n2015-01-15\n    2.22\nbanana\ntwo\n2015-02-15\n    33.33\ncoconut\nthree\n2015-03-15\n    444.40\ndurian\nfour\n2015-04-15\n    5,550.00\nNA\nfive\n2015-05-15\n    NA\nfig\nsix\n2015-06-15\n    777,000.00\ngrapefruit\nseven\nNA\n    8,880,000.00\nhoneydew\neight\n2015-08-15\n  \n  \n  \n\n\n\n\n\nNotice that the ID we had to use is just the label of the spanner and not the id we assigned in tab_spanner(). Once you’ve understood that, you can also fix our penguin table. Though, you have to watch out that the Chinstrap ID has <strong> tags in them (because the text is bold).\n\n\n\n\n\nCode\npenguin_counts_wider |> \n  mutate(across(.cols = -(1:2), ~if_else(. == 0, NA_integer_, .))) |> \n  mutate(\n    island = as.character(island), \n    year = as.numeric(year),\n    island = paste0('Island: ', island)\n  ) |> \n  gt(\n    groupname_col = 'island', \n    rowname_col = 'year', \n    id = 'fixed-penguins'\n  ) |> \n  cols_label(.list = desired_colnames) |> \n  tab_spanner(\n    label = md('**Adelie**'),\n    columns = 3:4\n  ) |> \n  tab_spanner(\n    label = md('**Chinstrap**'),\n    columns = c('Chinstrap_female', 'Chinstrap_male'),\n    id = 'chinstrap'\n  ) |> \n  tab_spanner(\n    label =  md('**Gentoo**'),\n    columns = contains('Gentoo')\n  ) |> \n  tab_header(\n    title = 'Penguins in the Palmer Archipelago',\n    subtitle = 'Data is courtesy of the {palmerpenguins} R package'\n  ) |> \n  sub_missing(missing_text = '-') |>\n  summary_rows(\n    groups = TRUE,\n    fns = list(\n      'Maximum' = ~max(.),\n      'Total' = ~sum(.) \n    ),\n    formatter = fmt_number,\n    decimals = 0,\n    missing_text = '-'\n  )  |> \n  tab_options(\n    data_row.padding = px(2),\n    summary_row.padding = px(3), # A bit more padding for summaries\n    row_group.padding = px(4)    # And even more for our groups\n  ) |> \n  opt_stylize(style = 6, color = 'gray') |> \n  tab_style(\n    locations = cells_column_spanners(spanners = 'chinstrap'),\n    style = cell_fill(color = 'dodgerblue')\n  ) |> \n  opt_css(\n    \"#fixed-penguins th[id='<strong>Chinstrap</strong>'] > span {\n        border-bottom-style: none;\n      }\n    \"\n  )\n\n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      \n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Island: Biscoe\n    \n    2007\n5\n5\n-\n-\n16\n17\n    2008\n9\n9\n-\n-\n22\n23\n    2009\n8\n8\n-\n-\n20\n21\n    Maximum\n9\n9\n-\n-\n22\n23\n    Total\n22\n22\n-\n-\n58\n61\n    \n      Island: Dream\n    \n    2007\n9\n10\n13\n13\n-\n-\n    2008\n8\n8\n9\n9\n-\n-\n    2009\n10\n10\n12\n12\n-\n-\n    Maximum\n10\n10\n13\n13\n-\n-\n    Total\n27\n28\n34\n34\n-\n-\n    \n      Island: Torgersen\n    \n    2007\n8\n7\n-\n-\n-\n-\n    2008\n8\n8\n-\n-\n-\n-\n    2009\n8\n8\n-\n-\n-\n-\n    Maximum\n8\n8\n-\n-\n-\n-\n    Total\n24\n23\n-\n-\n-\n-"
  },
  {
    "objectID": "styling.html#summary",
    "href": "styling.html#summary",
    "title": "4  Styling",
    "section": "4.3 Summary",
    "text": "4.3 Summary\nWow. We made it. This was quite a chapter.\nFor me, this chapter was tricky to write because styling small details is hard. Especially if you’re trying to explain what’s going on along the way. I hope that you feel empowered to style your tables as you wish now.\nAs for the HTML/CSS part: I know that this is particularly hard if you’ve never done this before. But it get’s easier as you learn to navigate your way around the code with your browser.\nAt this point, we’ve learned everything we need to know to create great tables with {gt}. So, let’s do that. Next up, case studies."
  },
  {
    "objectID": "case_studies.html#fitness-pricing",
    "href": "case_studies.html#fitness-pricing",
    "title": "5  Case studies",
    "section": "5.1 Fitness pricing",
    "text": "5.1 Fitness pricing\nIn this chapter we’re going to build this Fitness pricing table I found online. It’s not really a data table but it’s a fun exercise to build this.\n\n\n\n\n\n  \n  \n  \n    \n    \n    \n    \n    \n    \n    \n  \n  \n    \n      Fitness Pricing Table\n    \n    \n  \n  \n    \n      Standard\n      \n      Popular\n      \n      Golden\n      \n      Ultimate\n    \n  \n  \n    $15/month\n\n\n$25/month\n\n\n$35/month\n\n\n$50/month\n\n    \n  \n  \n    \n    \n  \n  \n    \n\nBeginner Classes\n    \n\nTraining Overview\n    \n\nPersonal Training\n    \n\nOlympic Weightlifting\n    \n\nFoundation Training\n  \n\n\n\n\n\n  \n  \n    \n    \n  \n  \n    \n\nBeginner Classes\n    \n\nTraining Overview\n    \n\nPersonal Training\n    \n\nOlympic Weightlifting\n    \n\nFoundation Training\n  \n\n\n\n\n\n  \n  \n    \n    \n  \n  \n    \n\nBeginner Classes\n    \n\nTraining Overview\n    \n\nPersonal Training\n    \n\nOlympic Weightlifting\n    \n\nFoundation Training\n  \n\n\n\n\n\n  \n  \n    \n    \n  \n  \n    \n\nBeginner Classes\n    \n\nTraining Overview\n    \n\nPersonal Training\n    \n\nOlympic Weightlifting\n    \n\nFoundation Training\n  \n\n\n\n    Book now\n\n\nBook now\n\n\nBook now\n\n\nBook now\n\n  \n  \n  \n    \n       Design/Inspiration: @supacode | {gt} Remake: @rappa753\n    \n  \n\n\n\n\n\nNotice that I’ve even added a little interactive element. You can hover over the booking button. And clicking it redirects you to a certain web page. To get started, let us define the data we need.\n\nlibrary(tidyverse)\nlibrary(gt)\nlevels <- c('Standard', 'Popular', 'Golden', 'Ultimate')\nprices <- c(15, 25, 35, 50)\nnames(prices) <- levels\nprices\n## Standard  Popular   Golden Ultimate \n##       15       25       35       50\n\nfeatures <- c('Beginner Classes', 'Training Overview', 'Personal Training', 'Olympic Weightlifting', 'Foundation Training')\n\ndat <- tibble(\n  level = levels,\n  monthly_price = prices[levels],\n  features = list(features[1], features[1:2], features[1:3], features),\n  booking_link = 'https://www.youtube.com/watch?v=dQw4w9WgXcQ'\n) |>\n  unnest(features) |>\n  select(level, features)\ndat\n## # A tibble: 11 × 2\n##    level    features             \n##    <chr>    <chr>                \n##  1 Standard Beginner Classes     \n##  2 Popular  Beginner Classes     \n##  3 Popular  Training Overview    \n##  4 Golden   Beginner Classes     \n##  5 Golden   Training Overview    \n##  6 Golden   Personal Training    \n##  7 Ultimate Beginner Classes     \n##  8 Ultimate Training Overview    \n##  9 Ultimate Personal Training    \n## 10 Ultimate Olympic Weightlifting\n## 11 Ultimate Foundation Training\n\nlevel_colors <- c(\n  Standard = \"#c40d53\",\n  Popular = \"#26559b\",\n  Golden = \"#f90\",\n  Ultimate =  \"#0d833e\"\n)\nlevel_colors\n##  Standard   Popular    Golden  Ultimate \n## \"#c40d53\" \"#26559b\"    \"#f90\" \"#0d833e\"\n\n\n5.1.1 Feature tables\nFrom this we can create a table for the features of a single tier, e.g. the “Popular” tier. First, we need to create the data set for this. To do so, we’re going to proceed as follows:\n\nFilter dat so that we have only the features of our current tier\nAdd a new column in_level and set it to true (since all the filtered features are in the tier)\nExpand the tibble so that the other features are also present in the data set (with in_level false)\n\n\nlevel <- 'Popular'\ndat |>\n    ## We use !! here so that this filter actually filters\n    filter(level == !!level) |>\n    mutate(in_level = TRUE)  |>\n    complete(\n      expand(dat, features),\n      fill = list(in_level = FALSE, level = 'Popular')\n    )\n## # A tibble: 5 × 3\n##   features              level   in_level\n##   <chr>                 <chr>   <lgl>   \n## 1 Beginner Classes      Popular TRUE    \n## 2 Foundation Training   Popular FALSE   \n## 3 Olympic Weightlifting Popular FALSE   \n## 4 Personal Training     Popular FALSE   \n## 5 Training Overview     Popular TRUE\n\nNext, we can throw away the level column and sort the rows by the features (which we saved in the vector features).\n\nlevel <- 'Popular'\ndat |>\n    ## We use !! here so that this filter actually filters\n    filter(level == !!level) |>\n    mutate(in_level = TRUE)  |>\n    complete(\n      expand(dat, features),\n      fill = list(in_level = FALSE, level = 'Popular')\n    ) |>\n    select(in_level, features) |> \n    arrange(features = fct_relevel(features, !!features)) \n## # A tibble: 5 × 2\n##   in_level features             \n##   <lgl>    <chr>                \n## 1 TRUE     Beginner Classes     \n## 2 TRUE     Training Overview    \n## 3 FALSE    Personal Training    \n## 4 FALSE    Olympic Weightlifting\n## 5 FALSE    Foundation Training\n\nFinally, we turn the column in_level into fontawesome icons. The colors of these icons are taken from our vector level_colors.\n\nlevel_data <- dat |>\n    ## We use !! here so that this filter actually filters\n    filter(level == !!level) |>\n    mutate(in_level = TRUE)  |>\n    complete(\n      expand(dat, features),\n      fill = list(in_level = FALSE)\n    ) |>\n    select(in_level, features) |> \n    arrange(features = fct_relevel(features, !!features)) |> \n    mutate(\n      in_level = ifelse(\n        in_level,\n        fontawesome::fa('check', fill = level_colors[level]) |> html(),\n        fontawesome::fa('xmark', fill = level_colors[level]) |> html()\n      )\n    )\nlevel_data\n## # A tibble: 5 × 2\n##   in_level                                                               featu…¹\n##   <chr>                                                                  <chr>  \n## 1 \"<svg aria-hidden=\\\"true\\\" role=\\\"img\\\" viewBox=\\\"0 0 512 512\\\" style… Beginn…\n## 2 \"<svg aria-hidden=\\\"true\\\" role=\\\"img\\\" viewBox=\\\"0 0 512 512\\\" style… Traini…\n## 3 \"<svg aria-hidden=\\\"true\\\" role=\\\"img\\\" viewBox=\\\"0 0 320 512\\\" style… Person…\n## 4 \"<svg aria-hidden=\\\"true\\\" role=\\\"img\\\" viewBox=\\\"0 0 320 512\\\" style… Olympi…\n## 5 \"<svg aria-hidden=\\\"true\\\" role=\\\"img\\\" viewBox=\\\"0 0 320 512\\\" style… Founda…\n## # … with abbreviated variable name ¹​features\n\nSweet. Now we can turn this into a {gt} table. We have to use fmt_markdown() on our in_leel column so that the icons are actually displayed as icons. While we’re at it, we can style the table a tiny bit. This includes getting rid of the column labels.\n\nlevel_data |> \n    gt() |>\n    fmt_markdown(columns = 'in_level') |>\n    cols_width(in_level ~ px(25), everything() ~ px(175)) |>\n    tab_options(\n      column_labels.hidden = TRUE,\n      table.font.names = 'Source Sans Pro',\n      table_body.border.top.style = 'none',\n      table.border.top.style = 'none',\n      table_body.border.bottom.style = 'none',\n      table.border.bottom.style = 'none',\n      table_body.hlines.style = 'none',\n    ) \n\n\n\n\n  \n  \n  \n    \n    \n  \n  \n  \n  \n    \n\nBeginner Classes\n    \n\nTraining Overview\n    \n\nPersonal Training\n    \n\nOlympic Weightlifting\n    \n\nFoundation Training\n  \n  \n  \n\n\n\n\n\nAlright, this looks already pretty good. We’ll get rid of the grid lines once we have assembled the full table. Of course, we have to create this table for all tiers. So let’s wrap this into a function.\n\n\nCode\ntier_feature_table <- function(level) {\n  level_data <- dat |>\n    ## We use !! here so that this filter actually filters\n    filter(level == !!level) |>\n    mutate(in_level = TRUE)  |>\n    complete(\n      expand(dat, features),\n      fill = list(in_level = FALSE)\n    ) |>\n    select(in_level, features) |> \n    arrange(features = fct_relevel(features, !!features)) |> \n    mutate(\n      in_level = ifelse(\n        in_level,\n        fontawesome::fa('check', fill = level_colors[level]) |> html(),\n        fontawesome::fa('xmark', fill = level_colors[level]) |> html()\n      )\n    )\n  \n  level_data |> \n    gt() |>\n    fmt_markdown(columns = 'in_level') |>\n    cols_width(in_level ~ px(25), everything() ~ px(175)) |>\n    tab_options(\n      column_labels.hidden = TRUE,\n      table.font.names = 'Source Sans Pro',\n      table_body.border.top.style = 'none',\n      table.border.top.style = 'none',\n      table_body.border.bottom.style = 'none',\n      table.border.bottom.style = 'none',\n      table_body.hlines.style = 'none',\n    ) \n}\n\n\n\nStandardPopularGoldenUltimate\n\n\n\ntier_feature_table('Standard')\n\n\n\n\n  \n  \n  \n    \n    \n  \n  \n  \n  \n    \n\nBeginner Classes\n    \n\nTraining Overview\n    \n\nPersonal Training\n    \n\nOlympic Weightlifting\n    \n\nFoundation Training\n  \n  \n  \n\n\n\n\n\n\n\n\ntier_feature_table('Popular')\n\n\n\n\n  \n  \n  \n    \n    \n  \n  \n  \n  \n    \n\nBeginner Classes\n    \n\nTraining Overview\n    \n\nPersonal Training\n    \n\nOlympic Weightlifting\n    \n\nFoundation Training\n  \n  \n  \n\n\n\n\n\n\n\n\ntier_feature_table('Golden')\n\n\n\n\n  \n  \n  \n    \n    \n  \n  \n  \n  \n    \n\nBeginner Classes\n    \n\nTraining Overview\n    \n\nPersonal Training\n    \n\nOlympic Weightlifting\n    \n\nFoundation Training\n  \n  \n  \n\n\n\n\n\n\n\n\ntier_feature_table('Ultimate')\n\n\n\n\n  \n  \n  \n    \n    \n  \n  \n  \n  \n    \n\nBeginner Classes\n    \n\nTraining Overview\n    \n\nPersonal Training\n    \n\nOlympic Weightlifting\n    \n\nFoundation Training\n  \n  \n  \n\n\n\n\n\n\n\n\nAnd we can save all tables as HTML in a tibble. For such occasions, {gt} has the function as_raw_html().\n\ntables_tib <- tibble(\n  level = levels,\n  table = map_chr(levels, ~as_raw_html(tier_feature_table(.)))\n) |>\n  pivot_wider(names_from = level, values_from = table)\ntables_tib\n## # A tibble: 1 × 4\n##   Standard                                                Popular Golden Ultim…¹\n##   <chr>                                                   <chr>   <chr>  <chr>  \n## 1 \"<div id=\\\"ntkmgsxdof\\\" style=\\\"padding-left:0px;paddi… \"<div … \"<div… \"<div …\n## # … with abbreviated variable name ¹​Ultimate\n\n\n\n5.1.2 Prices and links\nWe can create similar tibbles for our prices. Really, this table contains only the HTML-text for the monthly price tag where the price is larger than the rest.\n\nprice_tib <- tibble(\n  level = levels,\n  price = paste0('$<span style=\"font-size:40px;\">', prices, '</span>/month')\n) |>\n  pivot_wider(names_from = level, values_from = price)\nprice_tib\n## # A tibble: 1 × 4\n##   Standard                                           Popular      Golden Ultim…¹\n##   <chr>                                              <chr>        <chr>  <chr>  \n## 1 \"$<span style=\\\"font-size:40px;\\\">15</span>/month\" \"$<span sty… \"$<sp… \"$<spa…\n## # … with abbreviated variable name ¹​Ultimate\n\nNext, we can create yet another similar tibble for our URLs. For this, I use the a() function from {htmltools} here. More precisely, I have wrapped a() into a function style_url() that turns a URL into a colored box.\n\nstyle_url <- function(link, color) {\n  htmltools::a(\n      href = link,\n      \"Book now\",\n      style = glue::glue(\"border-radius: 5px;color: white;background-color: {color};border-radius: 5px;padding: 8px 20px;display: inline-block;text-decoration:none\")\n  )\n}\n\nurl_tib <- tibble(\n  level = levels,\n  level_colors = level_colors[level],\n  booking_link = 'https://www.youtube.com/watch?v=dQw4w9WgXcQ'\n) |>\n  mutate(\n    booking_link = map2(booking_link, level_colors, style_url),\n    booking_link = map_chr(booking_link, ~as.character(.x))\n  ) |>\n  select(-level_colors) |>\n  pivot_wider(names_from = level, values_from = booking_link)\nurl_tib\n## # A tibble: 1 × 4\n##   Standard                                                Popular Golden Ultim…¹\n##   <chr>                                                   <chr>   <chr>  <chr>  \n## 1 \"<a href=\\\"https://www.youtube.com/watch?v=dQw4w9WgXcQ… \"<a hr… \"<a h… \"<a hr…\n## # … with abbreviated variable name ¹​Ultimate\n\n\n\n5.1.3 Assembling the tables\nNow we can put everything together. And in order to get white space between the tiers, we insert a few empty dummy columns.\n\nlevels_text_size <- px(30)\n\nunstyled_fitness_table <- bind_rows(price_tib, tables_tib, url_tib) |>\n  mutate(dummy1 = '', .after = 1) |>\n  mutate(dummy2 = '', .after = 3) |>\n  mutate(dummy3 = '', .after = 5) |>\n  gt(id = 'fitness_table') |>\n  fmt_markdown(columns = everything()) |>\n  cols_align(align = 'center') |>\n  cols_label(\n    dummy1 = '',\n    dummy2 = '',\n    dummy3 = ''\n  ) |>\n  cols_width(\n    dummy1 ~ px(15),\n    dummy2 ~ px(15),\n    dummy3 ~ px(15)\n  )  |>\n  tab_header(\n    title = 'Fitness Pricing Table'\n  ) |>\n  tab_footnote(\n    footnote = 'Design/Inspiration: @supacode | {gt} Remake: @rappa753',\n    placement = 'right'\n  )\nunstyled_fitness_table\n\n\n\n\n  \n  \n  \n    \n    \n    \n    \n    \n    \n    \n  \n  \n    \n      Fitness Pricing Table\n    \n    \n  \n  \n    \n      Standard\n      \n      Popular\n      \n      Golden\n      \n      Ultimate\n    \n  \n  \n    $15/month\n\n\n$25/month\n\n\n$35/month\n\n\n$50/month\n\n    \n  \n  \n    \n    \n  \n  \n    \n\nBeginner Classes\n    \n\nTraining Overview\n    \n\nPersonal Training\n    \n\nOlympic Weightlifting\n    \n\nFoundation Training\n  \n\n\n\n\n\n  \n  \n    \n    \n  \n  \n    \n\nBeginner Classes\n    \n\nTraining Overview\n    \n\nPersonal Training\n    \n\nOlympic Weightlifting\n    \n\nFoundation Training\n  \n\n\n\n\n\n  \n  \n    \n    \n  \n  \n    \n\nBeginner Classes\n    \n\nTraining Overview\n    \n\nPersonal Training\n    \n\nOlympic Weightlifting\n    \n\nFoundation Training\n  \n\n\n\n\n\n  \n  \n    \n    \n  \n  \n    \n\nBeginner Classes\n    \n\nTraining Overview\n    \n\nPersonal Training\n    \n\nOlympic Weightlifting\n    \n\nFoundation Training\n  \n\n\n\n    Book now\n\n\nBook now\n\n\nBook now\n\n\nBook now\n\n  \n  \n  \n    \n       Design/Inspiration: @supacode | {gt} Remake: @rappa753\n    \n  \n\n\n\n\n\nAnd the rest is “just” a series of tab_style() calls plus tab_options() and a bit of custom CSS.\n\n\nCode\nunstyled_fitness_table |>\n  tab_style(\n    style = list(\n      cell_fill(color = level_colors['Standard']),\n      cell_text(color = 'white', weight = 'bold')\n    ),\n    locations = list(\n      cells_body(columns = 'Standard', rows = 1),\n      cells_column_labels(column = 'Standard')\n    )\n  ) |>\n  tab_style(\n    style = list(\n      cell_fill(color = level_colors['Popular']),\n      cell_text(color = 'white', weight = 'bold')\n    ),\n    locations = list(\n      cells_body(columns = 'Popular', rows = 1),\n      cells_column_labels(column = 'Popular')\n    )\n  ) |>\n  tab_style(\n    style = list(\n      cell_fill(color = level_colors['Golden']),\n      cell_text(color = 'white', weight = 'bold')\n    ),\n    locations = list(\n      cells_body(columns = 'Golden', rows = 1),\n      cells_column_labels(column = 'Golden')\n    )\n  ) |>\n  tab_style(\n    style = list(\n      cell_fill(color = level_colors['Ultimate']),\n      cell_text(color = 'white', weight = 'bold')\n    ),\n    locations = list(\n      cells_body(columns = 'Ultimate', rows = 1),\n      cells_column_labels(column = 'Ultimate')\n    )\n  ) |>\n  tab_style(\n    style = cell_text(size = levels_text_size),\n    locations = cells_column_labels()\n  ) |>\n  tab_style(\n    style = list(cell_fill(color = 'white')),\n    locations = list(\n      cells_body(columns = contains('dummy')),\n      cells_column_labels(columns = contains('dummy'))\n    )\n  ) |>\n  tab_style(\n    style = cell_borders(sides = 'bottom', color = '#D3D3D3'),\n    locations = cells_body(rows = 3, columns = c(1, 3, 5, 7))\n  ) |>\n  tab_options(\n    table_body.border.top.style = 'none',\n    table.border.top.style = 'none',\n    table_body.border.bottom.style = 'none',\n    table.border.bottom.style = 'none',\n    table_body.hlines.style = 'none',\n    table_body.vlines.style = 'solid',\n    column_labels.border.top.style = 'none',\n    column_labels.border.bottom.style = 'none',\n    column_labels.border.lr.style = 'solid', # not working, set in css\n    column_labels.border.lr.width = px(1),\n    column_labels.padding = px(1),\n    data_row.padding = px(2),\n    table.font.names = 'Source Sans Pro',\n    heading.title.font.size = px(45),\n    heading.padding = px(10),\n    heading.border.bottom.style = 'none'\n  ) |>\n  opt_css(\n    '#fitness_table .gt_footnote {\n      text-align: right; padding-top: 5px;\n    }\n\n    #fitness_table .gt_title {\n      font-family:\"Oleo Script\";\n    }\n\n    #fitness_table .gt_col_heading {\n      border-left-style:solid;\n      border-right-style:solid;\n    }\n    \n    #fitness_table thead, tbody, tfoot, tr, td, th {\n      border-color: inherit;\n      border-style: solid;\n      border-width: 0;\n    }\n    \n    #fitness_table a {\n    &:hover {\n        transform: translateY(-3px);\n        box-shadow: 0 5px 5px rgba(0, 0, 0, 0.4);\n      }\n      &:active {\n        box-shadow: inset 0 -3px 5px rgba(0, 0, 0, 0.4);\n      }\n    }\n\n    '\n  )\n\n\n\n\n\n  \n  \n  \n    \n    \n    \n    \n    \n    \n    \n  \n  \n    \n      Fitness Pricing Table\n    \n    \n  \n  \n    \n      Standard\n      \n      Popular\n      \n      Golden\n      \n      Ultimate\n    \n  \n  \n    $15/month\n\n\n$25/month\n\n\n$35/month\n\n\n$50/month\n\n    \n  \n  \n    \n    \n  \n  \n    \n\nBeginner Classes\n    \n\nTraining Overview\n    \n\nPersonal Training\n    \n\nOlympic Weightlifting\n    \n\nFoundation Training\n  \n\n\n\n\n\n  \n  \n    \n    \n  \n  \n    \n\nBeginner Classes\n    \n\nTraining Overview\n    \n\nPersonal Training\n    \n\nOlympic Weightlifting\n    \n\nFoundation Training\n  \n\n\n\n\n\n  \n  \n    \n    \n  \n  \n    \n\nBeginner Classes\n    \n\nTraining Overview\n    \n\nPersonal Training\n    \n\nOlympic Weightlifting\n    \n\nFoundation Training\n  \n\n\n\n\n\n  \n  \n    \n    \n  \n  \n    \n\nBeginner Classes\n    \n\nTraining Overview\n    \n\nPersonal Training\n    \n\nOlympic Weightlifting\n    \n\nFoundation Training\n  \n\n\n\n    Book now\n\n\nBook now\n\n\nBook now\n\n\nBook now\n\n  \n  \n  \n    \n       Design/Inspiration: @supacode | {gt} Remake: @rappa753"
  },
  {
    "objectID": "case_studies.html#nyt-bestseller",
    "href": "case_studies.html#nyt-bestseller",
    "title": "5  Case studies",
    "section": "5.2 NYT bestseller",
    "text": "5.2 NYT bestseller\nThis one is a recreation of an awesome table Tanya Shapiro made with {ggplot2}. It is a huge table, so you’ll probably need to look at this on a large screen. But just to be safe. Here’s a screenshot of the table as well.\n\n\n\n\n\n  \n  \n  \n    \n    \n    \n  \n  \n    \n       The New York Times Best Selling AuthorsTop authors by decade. Ranking based on number of weeks author appeared on list. Sparkline depicts total weeksby year (counts multiple books). Top performing book included beneath each author's name. Data from Post45 Data Collective.\n    \n    \n  \n  \n  \n    \n  \n  \n    \n    \n    \n    \n  \n  \n    \n      1960s\n    \n    1\n176 WEEKS ON THE LIST Allen DruryAdvise And Consent\n\n\n\n    2\n158 WEEKS ON THE LIST John O'HaraElizabeth Appleton\n\n\n\n    3\n157 WEEKS ON THE LIST Taylor CaldwellTestimony Of Two Men\n\n\n\n    4\n136 WEEKS ON THE LIST Irving WallaceThe Man\n\n\n\n    5\n135 WEEKS ON THE LIST Leon UrisTopaz\n\n\n\n  \n\n\n\n\n  \n  \n    \n    \n    \n    \n  \n  \n    \n      1970s\n    \n    1\n172 WEEKS ON THE LIST Richard BachIllusions\n\n\n\n    2\n125 WEEKS ON THE LIST Robert LudlumThe Matarese Circle\n\n\n\n    3\n123 WEEKS ON THE LIST Herman WoukThe Winds Of War\n\n\n\n    4\n119 WEEKS ON THE LIST Agatha ChristieCurtain\n\n\n\n    5\n119 WEEKS ON THE LIST Frederick ForsythThe Odessa File\n\n\n\n  \n\n\n\n\n  \n  \n    \n    \n    \n    \n  \n  \n    \n      1980s\n    \n    1\n336 WEEKS ON THE LIST Stephen KingFirestarter\n\n\n\n    2\n271 WEEKS ON THE LIST Danielle SteelChanges\n\n\n\n    3\n205 WEEKS ON THE LIST James A. MichenerThe Covenant\n\n\n\n    4\n176 WEEKS ON THE LIST Tom ClancyRed Storm Rising\n\n\n\n    5\n170 WEEKS ON THE LIST Robert LudlumThe Parsifal Mosaic\n\n\n\n  \n\n\n\n    \n  \n  \n    \n    \n    \n    \n  \n  \n    \n      1990s\n    \n    1\n311 WEEKS ON THE LIST Danielle SteelThe Gift\n\n\n\n    2\n307 WEEKS ON THE LIST John GrishamThe Pelican Brief\n\n\n\n    3\n244 WEEKS ON THE LIST Stephen KingThe Stand\n\n\n\n    4\n212 WEEKS ON THE LIST Robert WallerThe Bridges Of Madison County\n\n\n\n    5\n192 WEEKS ON THE LIST Mary Higgins ClarkLoves Music, Loves To Dance\n\n\n\n  \n\n\n\n\n  \n  \n    \n    \n    \n    \n  \n  \n    \n      2000s\n    \n    1\n232 WEEKS ON THE LIST John GrishamSkipping Christmas\n\n\n\n    2\n218 WEEKS ON THE LIST Dan BrownThe Da Vinci Code\n\n\n\n    3\n200 WEEKS ON THE LIST Danielle SteelThe House On Hope Street\n\n\n\n    4\n178 WEEKS ON THE LIST James PattersonCross\n\n\n\n    5\n176 WEEKS ON THE LIST Nicholas SparksA Bend In The Road\n\n\n\n  \n\n\n\n\n  \n  \n    \n    \n    \n    \n  \n  \n    \n      2010s\n    \n    1\n216 WEEKS ON THE LIST John GrishamSycamore Row\n\n\n\n    2\n207 WEEKS ON THE LIST David BaldacciThe Escape\n\n\n\n    3\n157 WEEKS ON THE LIST Danielle SteelThe Mistress\n\n\n\n    4\n157 WEEKS ON THE LIST Stephen King11/22/63\n\n\n\n    5\n132 WEEKS ON THE LIST Anthony DoerrAll The Light We Cannot See\n\n\n\n  \n\n\n\n  \n  \n  \n    \n       {ggplot2} Original: @tanya_shapiro | \n{gt} recreation: @rappa753\n    \n  \n\n\n\n\n\n\n5.2.1 Data Preparation\nThe first thing we need to do is get the data. This requires a bit of data wrangling on the underlying TidyTuesdaty data set. The following code finds the top 5 authors by decade, their best book and the data for the sparkline plot.\n\n# Book finder helper function\nfind_best_book <- function(decade, author) {\n  best_books <- nyt_dat |> \n    filter(decade == !!decade, author == !!author) |> \n    count(title, sort = TRUE)\n  \n  best_books[[1, 'title']] |> str_to_title()\n}\n\n# Sparkline helper function \nfind_number_of_weeks_per_year <- function(decade, author){\n  nyt_dat |> \n    filter(decade == !!decade, author == !!author) |> \n    count(year, name = 'weeks') |> \n    complete(tibble(year = decade:(decade + 9)), fill = list(weeks = 0)) |> \n    arrange(year)  |> \n    pull(weeks)\n}\n\n# Data from the TidyTuesday repo\nnyt_dat <- readr::read_tsv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2022/2022-05-10/nyt_full.tsv') |> \n  mutate(decade = (year %/% 10) * 10) \n\n# Find top 5 authors\ntop5_authors_by_decade <- nyt_dat |> \n  filter(between(year, 1960, 2019)) |> \n  count(author, decade, sort = T, name = 'weeks') |> \n  group_by(decade) |> \n  slice_max(weeks, n = 5) |> \n  ungroup()\n\n\n# Find their best book and the info for the sparlines\ntop5_authors_and_book_by_decade <- top5_authors_by_decade |> \n  mutate(\n    best_book = map2_chr(decade, author, find_best_book),\n    sparkline_weeks = map2(decade, author, find_number_of_weeks_per_year)\n  )\ntop5_authors_and_book_by_decade\n## # A tibble: 30 × 5\n##    author            decade weeks best_book            sparkline_weeks\n##    <chr>              <dbl> <int> <chr>                <list>         \n##  1 Allen Drury         1960   176 Advise And Consent   <int [10]>     \n##  2 John O'Hara         1960   158 Elizabeth Appleton   <int [10]>     \n##  3 Taylor Caldwell     1960   157 Testimony Of Two Men <int [10]>     \n##  4 Irving Wallace      1960   136 The Man              <int [10]>     \n##  5 Leon Uris           1960   135 Topaz                <int [10]>     \n##  6 Richard Bach        1970   172 Illusions            <int [10]>     \n##  7 Robert Ludlum       1970   125 The Matarese Circle  <int [10]>     \n##  8 Herman Wouk         1970   123 The Winds Of War     <int [10]>     \n##  9 Agatha Christie     1970   119 Curtain              <int [10]>     \n## 10 Frederick Forsyth   1970   119 The Odessa File      <int [10]>     \n## # … with 20 more rows\n\nNext, we find images of the authors online and save them in a tibble image_links. This tibble can then be joined with top5_authors_and_book_by_decade.\n\nimage_links <- tibble(\n  author = top5_authors_and_book_by_decade |> pull(author) |> unique(),\n  img = c(\n    'https://images.gr-assets.com/authors/1327446818p8/77616.jpg',\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/c/c5/John_O%27Hara_cph.3b08576.jpg/1024px-John_O%27Hara_cph.3b08576.jpg',\n    'https://upload.wikimedia.org/wikipedia/commons/8/88/Taylor_caldwell_a.jpg',\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/0/0c/Irving_Wallace%2C_1972.jpg/330px-Irving_Wallace%2C_1972.jpg',\n    'https://upload.wikimedia.org/wikipedia/commons/d/d6/Leon_Uris_%28cropped%29.jpg',\n    'https://images-na.ssl-images-amazon.com/images/I/41RMdx8BJHL.__01_SX120_CR0,0,120,120__.jpg',\n    'https://upload.wikimedia.org/wikipedia/en/a/a2/Robert_Ludlum_%281927-2001%29.jpg',\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/4/49/Herman_Wouk_%28cropped%29.jpg/330px-Herman_Wouk_%28cropped%29.jpg',\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/c/cf/Agatha_Christie.png/330px-Agatha_Christie.png',\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/9/9d/Frederick_Forsyth_-_01.jpg/375px-Frederick_Forsyth_-_01.jpg',\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/e/e3/Stephen_King%2C_Comicon.jpg/330px-Stephen_King%2C_Comicon.jpg',\n    'https://images1.penguinrandomhouse.com/author/29599',\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/d/dc/James_Albert_Michener_%C2%B7_DN-SC-92-05368.JPEG/330px-James_Albert_Michener_%C2%B7_DN-SC-92-05368.JPEG',\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/9/98/Tom_Clancy_at_Burns_Library_cropped.jpg/330px-Tom_Clancy_at_Burns_Library_cropped.jpg',\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/5/5f/Grisham_John_by_C_Harrison_.jpg/300px-Grisham_John_by_C_Harrison_.jpg',\n    'https://upload.wikimedia.org/wikipedia/en/7/70/Robert_James_Waller.jpg',\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/b/bf/Mary_Higgins_Clark_at_the_Mazza_Museum.jpg/330px-Mary_Higgins_Clark_at_the_Mazza_Museum.jpg',\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/8/8b/Dan_Brown_bookjacket_cropped.jpg/330px-Dan_Brown_bookjacket_cropped.jpg',\n    'https://upload.wikimedia.org/wikipedia/commons/1/1d/James_Patterson.jpg',\n    'https://upload.wikimedia.org/wikipedia/commons/a/af/Nicholas-Sparks-Autograph-1-4-06.jpg',\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/3/3d/David_Baldacci_-_2015_National_Book_Festival_%286%29.jpg/330px-David_Baldacci_-_2015_National_Book_Festival_%286%29.jpg',\n    'https://upload.wikimedia.org/wikipedia/commons/thumb/6/61/Anthony_Doerr_%282015%29.jpg/330px-Anthony_Doerr_%282015%29.jpg'\n  )\n)\n\nfull_dat <- top5_authors_and_book_by_decade |> \n  left_join(image_links)\n\n\n\n5.2.2 Sparklines\nNext, we can create the sparklines for each table entry. This requires two steps.\n\nFind the highest number per year of how many times an author appeared in the bestseller list. This number can be higher than 52 due to multiple books. Knowing this number ensures that all of our sparklines are using the same y-axis.\nBuild a function that transforms the vector of weeks per year into a ggplot. Keep in mind that the sizes need to be large in the ggplot so that they are legible in the small table image later on.\n\n\n# can be higher than 52 bc of multiple books\nhighest_week_count_per_year <- full_dat |> \n  pull(sparkline_weeks) |> \n  map_dbl(max) |>\n  max()\n\ncreate_sparkline <- function(sparkline) {\n  ggplot() +\n    geom_line(\n      mapping = aes(x = seq_along(sparkline), y = sparkline),\n      color = 'white',\n      linewidth = 3\n    ) +\n    annotate(\n      'text',\n      x = c(1, 10),\n      y = sparkline[c(1, 10)],\n      label = sparkline[c(1, 10)],\n      color = 'white',\n      hjust = c(1.2, -0.2),\n      size = 16\n    ) +\n    coord_cartesian(xlim = c(-5, 15), ylim = c(0, highest_week_count_per_year)) +\n    theme_void() +\n    theme(plot.background = element_rect(fill = 'black'))\n}\ncreate_sparkline(25 * runif(10))\n\n\n\n\n\n\n5.2.3 Decade table\nOk great, we have a function for sparklines now. Now, let us create the table for a singledecade. For that we will need three things.\n\nA function that maps the number of weeks to a color (for the little colored circles)\nA function that creates the HTML code for the small colored circles\nA function that stacks the following information as we’ve seen in the intial table using HTML:\n\nnumber of weeks\nauthor name\nauthor’s best book\nHTML code of circle\n\n\nThese three functions look like this.\n\n# Maps number of weeks to colors\nmap2color <- function(x, pal = rev(RColorBrewer::brewer.pal(11, 'Spectral')), limits=NULL){\n    if(is.null(limits)) limits <- range(x)\n    pal[findInterval(x,seq(limits[1],limits[2],length.out=length(pal)+1), all.inside=TRUE)]\n}\n\n# Creates colored circle which is really just a styled <span> tag\ncreate_point_span <- function(color, size) {\n  glue::glue(\n    '<span style=\"height: {size}em;width: {size}em;background-color: {color};border-radius: 50%;margin-top:4px;display:inline-block;margin-left:2px;\"></span>'\n  )\n}\n\n# Formats the author infos via styled <span> tags and line breaks <br>\nformat_text <- function(weeks, author, best_book, colors) {\n  glue::glue(\n    '<span style = \"color:white;font-weight:lighter;font-size:12pt;\">{str_to_upper(weeks)} WEEKS ON THE LIST</span> {create_point_span(colors, 0.75)}',\n    '<br>',\n    '<span style = \"color:white;font-weight:bold;font-size:22pt;\">{author}</span>',\n    '<br>',\n    '<span style = \"color:white;font-size:12pt;\">{best_book}</span>'\n  )\n}\n\nNow we can apply these functions to get our data set ready for gt(). Here, we will use the data of the 1960s.\n\ndecade <- 1960\ndecade_data <- full_dat |> \n  # Create colors before filtering (for consistent colors across decades)\n  mutate(color = map2color(weeks)) |> \n  filter(decade == !!decade) |> \n  mutate(\n    # Shorten long names\n    author = if_else(\n      author == 'Robert James Waller', \n      'Robert Waller', \n      author\n    ),\n    # Add ranking (authors are already sorted)\n    rank = 1:5,\n    # Format decade label\n    decade = paste0(decade, 's'),\n    # create stacked author info\n    joined_text = pmap_chr(\n      .l = list(weeks, author, best_book, color), \n      format_text\n    )\n  ) |> \n  select(rank, decade, joined_text, sparkline_weeks, img)\n\ndecade_data\n## # A tibble: 5 × 5\n##    rank decade joined_text                                         spark…¹ img  \n##   <int> <chr>  <chr>                                               <list>  <chr>\n## 1     1 1960s  \"<span style = \\\"color:white;font-weight:lighter;f… <int>   http…\n## 2     2 1960s  \"<span style = \\\"color:white;font-weight:lighter;f… <int>   http…\n## 3     3 1960s  \"<span style = \\\"color:white;font-weight:lighter;f… <int>   http…\n## 4     4 1960s  \"<span style = \\\"color:white;font-weight:lighter;f… <int>   http…\n## 5     5 1960s  \"<span style = \\\"color:white;font-weight:lighter;f… <int>   http…\n## # … with abbreviated variable name ¹​sparkline_weeks\n\nPerfect. We’re ready to pass this to gt(). Once we do that we will\n\nUse decade as groupname_col so that the label appears on top\nTurn image URLs into images\nTransform the sparkline data into plots\nAdjust widths so that the texts fit into their column and image are round\nFormat the joined_text column as Markdown (so that the HTML code is rendered)\nTurn background black so text is legible\n\n\nimg_size <- 75\nbarely_styled_decade_table <- decade_data |> \n  gt(groupname_col = 'decade') |> \n  gt_img_circle(column = 'img', height = img_size) |> \n  text_transform(\n    locations = cells_body(columns = sparkline_weeks),\n    fn = function(column) {\n      map(column, ~c(str_split_1(., pattern = ', '))) |> \n        map(parse_number) |> \n        map(create_sparkline) |> \n        ggplot_image(height = 75)\n    }\n  ) |> \n  cols_width(\n    img ~ px(82), # needs to be a little more than 75px\n    joined_text ~ px(300),\n    sparkline_weeks ~ px(100)\n  ) |> \n  fmt_markdown(columns = c('joined_text')) |> \n  tab_options(table.background.color = 'black')\nbarely_styled_decade_table\n\n\n\n\n  \n  \n  \n    \n    \n    \n    \n  \n  \n  \n    \n      rank\n      joined_text\n      sparkline_weeks\n      img\n    \n  \n  \n    \n      1960s\n    \n    1\n176 WEEKS ON THE LIST Allen DruryAdvise And Consent\n\n\n\n    2\n158 WEEKS ON THE LIST John O'HaraElizabeth Appleton\n\n\n\n    3\n157 WEEKS ON THE LIST Taylor CaldwellTestimony Of Two Men\n\n\n\n    4\n136 WEEKS ON THE LIST Irving WallaceThe Man\n\n\n\n    5\n135 WEEKS ON THE LIST Leon UrisTopaz\n\n\n\n  \n  \n  \n\n\n\n\n\nFinally, we apply some more styling and then our decade table is good to go.\n\nbarely_styled_decade_table |> \n  tab_style(\n    style = cell_text(size = '15pt', weight = 'bold', v_align = 'top'),\n    locations = cells_body('rank')\n  )  |> \n  tab_style(\n    locations = cells_row_groups(),\n    style = cell_text(align = 'center')\n  ) |> \n  tab_options(\n    table.background.color = 'black',\n    table.font.color = 'white',\n    table.font.names = 'Open Sans',\n    column_labels.hidden = TRUE,\n    row_group.border.top.style = 'none',\n    row_group.border.bottom.style = 'none',\n    table.border.bottom.style = 'solid',\n    table.border.bottom.width = px(1),\n    table.border.top.style = 'none',\n    table_body.border.bottom.style = 'none',\n    table_body.border.top.style = 'none',\n    heading.border.bottom.style = 'none',\n    column_labels.border.top.style = 'none',\n  ) \n\n\n\n\n  \n  \n  \n    \n    \n    \n    \n  \n  \n  \n  \n    \n      1960s\n    \n    1\n176 WEEKS ON THE LIST Allen DruryAdvise And Consent\n\n\n\n    2\n158 WEEKS ON THE LIST John O'HaraElizabeth Appleton\n\n\n\n    3\n157 WEEKS ON THE LIST Taylor CaldwellTestimony Of Two Men\n\n\n\n    4\n136 WEEKS ON THE LIST Irving WallaceThe Man\n\n\n\n    5\n135 WEEKS ON THE LIST Leon UrisTopaz\n\n\n\n  \n  \n  \n\n\n\n\n\nNow we know how to create one decade table. Time to wrap the logic into a function. We’ll call it create_decade_table(). Very original, I know.\n\n\nCode\ncreate_decade_table <- function(decade, img_size = 75) {\n  decade_data <- full_dat |> \n    # Create colors before filtering (for consistent colors across decades)\n    mutate(color = map2color(weeks)) |> \n    filter(decade == !!decade) |> \n    mutate(\n      # Shorten long names\n      author = if_else(\n        author == 'Robert James Waller', \n        'Robert Waller', \n        author\n      ),\n      # Add ranking (authors are already sorted)\n      rank = 1:5,\n      # Format decade label\n      decade = paste0(decade, 's'),\n      # create stacked author info\n      joined_text = pmap_chr(\n        .l = list(weeks, author, best_book, color), \n        format_text\n      )\n    ) |> \n    select(rank, decade, joined_text, sparkline_weeks, img)\n  \n  barely_styled_decade_table <- decade_data |> \n    gt(groupname_col = 'decade') |> \n    gt_img_circle(column = 'img', height = img_size) |> \n    text_transform(\n      locations = cells_body(columns = sparkline_weeks),\n      fn = function(column) {\n        map(column, ~c(str_split_1(., pattern = ', '))) |> \n          map(parse_number) |> \n          map(create_sparkline) |> \n          ggplot_image(height = 75)\n      }\n    ) |> \n    cols_width(\n      img ~ px(82), # needs to be a little more than 75px\n      joined_text ~ px(300),\n      sparkline_weeks ~ px(100)\n    ) |> \n    fmt_markdown(columns = c('joined_text')) |> \n    tab_options(table.background.color = 'black')\n  \n  barely_styled_decade_table |> \n    tab_style(\n      style = cell_text(size = '15pt', weight = 'bold', v_align = 'top'),\n      locations = cells_body('rank')\n    )  |> \n    tab_style(\n      locations = cells_row_groups(),\n      style = cell_text(align = 'center')\n    ) |> \n    tab_options(\n      table.background.color = 'black',\n      table.font.color = 'white',\n      table.font.names = 'Open Sans',\n      column_labels.hidden = TRUE,\n      row_group.border.top.style = 'none',\n      row_group.border.bottom.style = 'none',\n      table.border.bottom.style = 'solid',\n      table.border.bottom.width = px(1),\n      table.border.top.style = 'none',\n      table_body.border.bottom.style = 'none',\n      table_body.border.top.style = 'none',\n      heading.border.bottom.style = 'none',\n      column_labels.border.top.style = 'none',\n    ) \n}\n\n\n\n1960s1970s1980s1990s2000s2010s\n\n\n\ncreate_decade_table(1960)\n\n\n\n\n  \n  \n  \n    \n    \n    \n    \n  \n  \n  \n  \n    \n      1960s\n    \n    1\n176 WEEKS ON THE LIST Allen DruryAdvise And Consent\n\n\n\n    2\n158 WEEKS ON THE LIST John O'HaraElizabeth Appleton\n\n\n\n    3\n157 WEEKS ON THE LIST Taylor CaldwellTestimony Of Two Men\n\n\n\n    4\n136 WEEKS ON THE LIST Irving WallaceThe Man\n\n\n\n    5\n135 WEEKS ON THE LIST Leon UrisTopaz\n\n\n\n  \n  \n  \n\n\n\n\n\n\n\n\ncreate_decade_table(1970)\n\n\n\n\n  \n  \n  \n    \n    \n    \n    \n  \n  \n  \n  \n    \n      1970s\n    \n    1\n172 WEEKS ON THE LIST Richard BachIllusions\n\n\n\n    2\n125 WEEKS ON THE LIST Robert LudlumThe Matarese Circle\n\n\n\n    3\n123 WEEKS ON THE LIST Herman WoukThe Winds Of War\n\n\n\n    4\n119 WEEKS ON THE LIST Agatha ChristieCurtain\n\n\n\n    5\n119 WEEKS ON THE LIST Frederick ForsythThe Odessa File\n\n\n\n  \n  \n  \n\n\n\n\n\n\n\n\ncreate_decade_table(1980)\n\n\n\n\n  \n  \n  \n    \n    \n    \n    \n  \n  \n  \n  \n    \n      1980s\n    \n    1\n336 WEEKS ON THE LIST Stephen KingFirestarter\n\n\n\n    2\n271 WEEKS ON THE LIST Danielle SteelChanges\n\n\n\n    3\n205 WEEKS ON THE LIST James A. MichenerThe Covenant\n\n\n\n    4\n176 WEEKS ON THE LIST Tom ClancyRed Storm Rising\n\n\n\n    5\n170 WEEKS ON THE LIST Robert LudlumThe Parsifal Mosaic\n\n\n\n  \n  \n  \n\n\n\n\n\n\n\n\ncreate_decade_table(1990)\n\n\n\n\n  \n  \n  \n    \n    \n    \n    \n  \n  \n  \n  \n    \n      1990s\n    \n    1\n311 WEEKS ON THE LIST Danielle SteelThe Gift\n\n\n\n    2\n307 WEEKS ON THE LIST John GrishamThe Pelican Brief\n\n\n\n    3\n244 WEEKS ON THE LIST Stephen KingThe Stand\n\n\n\n    4\n212 WEEKS ON THE LIST Robert WallerThe Bridges Of Madison County\n\n\n\n    5\n192 WEEKS ON THE LIST Mary Higgins ClarkLoves Music, Loves To Dance\n\n\n\n  \n  \n  \n\n\n\n\n\n\n\n\ncreate_decade_table(2000)\n\n\n\n\n  \n  \n  \n    \n    \n    \n    \n  \n  \n  \n  \n    \n      2000s\n    \n    1\n232 WEEKS ON THE LIST John GrishamSkipping Christmas\n\n\n\n    2\n218 WEEKS ON THE LIST Dan BrownThe Da Vinci Code\n\n\n\n    3\n200 WEEKS ON THE LIST Danielle SteelThe House On Hope Street\n\n\n\n    4\n178 WEEKS ON THE LIST James PattersonCross\n\n\n\n    5\n176 WEEKS ON THE LIST Nicholas SparksA Bend In The Road\n\n\n\n  \n  \n  \n\n\n\n\n\n\n\n\ncreate_decade_table(2010)\n\n\n\n\n  \n  \n  \n    \n    \n    \n    \n  \n  \n  \n  \n    \n      2010s\n    \n    1\n216 WEEKS ON THE LIST John GrishamSycamore Row\n\n\n\n    2\n207 WEEKS ON THE LIST David BaldacciThe Escape\n\n\n\n    3\n157 WEEKS ON THE LIST Danielle SteelThe Mistress\n\n\n\n    4\n157 WEEKS ON THE LIST Stephen King11/22/63\n\n\n\n    5\n132 WEEKS ON THE LIST Anthony DoerrAll The Light We Cannot See\n\n\n\n  \n  \n  \n\n\n\n\n\n\n\n\n\n\n5.2.4 Assembling the table\nWith some functional programming we can collect the HTML code for all tables in one tibble. Then, we can assemble a custom HTML text for the table and create our first table prototype.\n\n# Create tables for each decade and convert them to HTML\nraw_tables <- map(seq(1960, 2010, 10), create_decade_table) |> \n  map_chr(as_raw_html)\n\nordered_tibble <- tibble(\n  col1 = raw_tables[c(1, 4)],\n  col2 = raw_tables[c(2, 5)],\n  col3 = raw_tables[c(3, 6)]\n)\n\n## Create custom HTML text for title to use many different styles\ntitle <- paste0(\n  \"<span style='font-family:Chomsky;font-size:42pt;color:white;'> The New York Times</span>\",\n  \"<span style='font-family:opensans;font-size:24pt;color:white;'> **Best Selling Authors**</span>\",\n  \"<br><span style='font-family:opensans;font-size:18pt;color:#D6D6D6'>Top authors by decade. Ranking based on number of weeks author appeared on list. Sparkline depicts total weeks<br>by year (counts multiple books). Top performing book included beneath each author's name. Data from Post45 Data Collective.</span><br>\"\n)\n\nordered_tibble  |> \n  gt(id = 'bestseller_collected') |> \n  fmt_markdown(columns = everything()) |> \n  tab_header(title = md(title))  |> \n  tab_footnote(\n    html(glue::glue(\n      '{ggplot2} Original: <<fontawesome::fa(\"twitter\")>>@tanya_shapiro | \n      {gt} recreation: <<fontawesome::fa(\"twitter\")>>@rappa753',\n      .open = \"<<\", .close = \">>\"\n    ))\n  ) |> \n  cols_width(\n    col1 ~ px(600),\n    col2 ~ px(600),\n    col3 ~ px(600)\n  ) |> \n  tab_style(\n    locations = cells_body(rows = 1),\n    style = cell_borders(style = 'hidden')\n  ) |> \n  tab_options(table.background.color = 'black')\n\n\n\n\n  \n  \n  \n    \n    \n    \n  \n  \n    \n       The New York Times Best Selling AuthorsTop authors by decade. Ranking based on number of weeks author appeared on list. Sparkline depicts total weeksby year (counts multiple books). Top performing book included beneath each author's name. Data from Post45 Data Collective.\n    \n    \n  \n  \n    \n      col1\n      col2\n      col3\n    \n  \n  \n    \n  \n  \n    \n    \n    \n    \n  \n  \n    \n      1960s\n    \n    1\n176 WEEKS ON THE LIST Allen DruryAdvise And Consent\n\n\n\n    2\n158 WEEKS ON THE LIST John O'HaraElizabeth Appleton\n\n\n\n    3\n157 WEEKS ON THE LIST Taylor CaldwellTestimony Of Two Men\n\n\n\n    4\n136 WEEKS ON THE LIST Irving WallaceThe Man\n\n\n\n    5\n135 WEEKS ON THE LIST Leon UrisTopaz\n\n\n\n  \n\n\n\n\n  \n  \n    \n    \n    \n    \n  \n  \n    \n      1970s\n    \n    1\n172 WEEKS ON THE LIST Richard BachIllusions\n\n\n\n    2\n125 WEEKS ON THE LIST Robert LudlumThe Matarese Circle\n\n\n\n    3\n123 WEEKS ON THE LIST Herman WoukThe Winds Of War\n\n\n\n    4\n119 WEEKS ON THE LIST Agatha ChristieCurtain\n\n\n\n    5\n119 WEEKS ON THE LIST Frederick ForsythThe Odessa File\n\n\n\n  \n\n\n\n\n  \n  \n    \n    \n    \n    \n  \n  \n    \n      1980s\n    \n    1\n336 WEEKS ON THE LIST Stephen KingFirestarter\n\n\n\n    2\n271 WEEKS ON THE LIST Danielle SteelChanges\n\n\n\n    3\n205 WEEKS ON THE LIST James A. MichenerThe Covenant\n\n\n\n    4\n176 WEEKS ON THE LIST Tom ClancyRed Storm Rising\n\n\n\n    5\n170 WEEKS ON THE LIST Robert LudlumThe Parsifal Mosaic\n\n\n\n  \n\n\n\n    \n  \n  \n    \n    \n    \n    \n  \n  \n    \n      1990s\n    \n    1\n311 WEEKS ON THE LIST Danielle SteelThe Gift\n\n\n\n    2\n307 WEEKS ON THE LIST John GrishamThe Pelican Brief\n\n\n\n    3\n244 WEEKS ON THE LIST Stephen KingThe Stand\n\n\n\n    4\n212 WEEKS ON THE LIST Robert WallerThe Bridges Of Madison County\n\n\n\n    5\n192 WEEKS ON THE LIST Mary Higgins ClarkLoves Music, Loves To Dance\n\n\n\n  \n\n\n\n\n  \n  \n    \n    \n    \n    \n  \n  \n    \n      2000s\n    \n    1\n232 WEEKS ON THE LIST John GrishamSkipping Christmas\n\n\n\n    2\n218 WEEKS ON THE LIST Dan BrownThe Da Vinci Code\n\n\n\n    3\n200 WEEKS ON THE LIST Danielle SteelThe House On Hope Street\n\n\n\n    4\n178 WEEKS ON THE LIST James PattersonCross\n\n\n\n    5\n176 WEEKS ON THE LIST Nicholas SparksA Bend In The Road\n\n\n\n  \n\n\n\n\n  \n  \n    \n    \n    \n    \n  \n  \n    \n      2010s\n    \n    1\n216 WEEKS ON THE LIST John GrishamSycamore Row\n\n\n\n    2\n207 WEEKS ON THE LIST David BaldacciThe Escape\n\n\n\n    3\n157 WEEKS ON THE LIST Danielle SteelThe Mistress\n\n\n\n    4\n157 WEEKS ON THE LIST Stephen King11/22/63\n\n\n\n    5\n132 WEEKS ON THE LIST Anthony DoerrAll The Light We Cannot See\n\n\n\n  \n\n\n\n  \n  \n  \n    \n       {ggplot2} Original: @tanya_shapiro | \n{gt} recreation: @rappa753\n    \n  \n\n\n\n\n\nOf course we still have some styling to do. So let’s finish off with this.\n\nordered_tibble  |> \n  gt(id = 'bestseller_collected_styled') |> \n  fmt_markdown(columns = everything()) |> \n  tab_header(title = md(title))  |> \n  tab_footnote(\n    html(glue::glue(\n      '{ggplot2} Original: <<fontawesome::fa(\"twitter\")>>@tanya_shapiro | \n      {gt} recreation: <<fontawesome::fa(\"twitter\")>>@rappa753',\n      .open = \"<<\", .close = \">>\"\n    ))\n  ) |> \n  cols_width(\n    col1 ~ px(600),\n    col2 ~ px(600),\n    col3 ~ px(600)\n  ) |> \n  tab_style(\n    locations = cells_body(rows = 1),\n    style = cell_borders(style = 'hidden')\n  ) |> \n  tab_options(table.background.color = 'black') |> \n  tab_style(\n    locations = cells_body(rows = 1),\n    style = cell_borders(style = 'hidden')\n  ) |> \n  tab_options(\n    table.background.color = 'black',\n    column_labels.hidden = TRUE,\n    table_body.border.bottom.style = 'none',\n  ) |> \n  opt_css(\n    '#bestseller_collected_styled .gt_footnote {\n      text-align: right; \n      padding-top: 20px;\n      padding-bottom:5px;\n      font-family:\"Open Sans\";\n      font-size:10pt;\n      font-weight:bold;\n    }\n    \n    #bestseller_collected_styled .gt_row {\n      border-top-color: grey;\n      border-bottom-color: grey;\n    }\n    \n    #bestseller_collected_styled thead, tbody, tfoot, tr, td, th {\n      border-color: inherit;\n      border-style: solid;\n      border-width: 0;\n    }\n    \n    #bestseller_collected_styled thead, tbody, tfoot, tr, td, th {\n      border-color: inherit;\n      border-style: solid;\n      border-width: 0;\n    }\n    \n    div#bestseller_collected_styled {line-height:1.1;}\n    '\n  ) \n\n\n\n\n  \n  \n  \n    \n    \n    \n  \n  \n    \n       The New York Times Best Selling AuthorsTop authors by decade. Ranking based on number of weeks author appeared on list. Sparkline depicts total weeksby year (counts multiple books). Top performing book included beneath each author's name. Data from Post45 Data Collective.\n    \n    \n  \n  \n  \n    \n  \n  \n    \n    \n    \n    \n  \n  \n    \n      1960s\n    \n    1\n176 WEEKS ON THE LIST Allen DruryAdvise And Consent\n\n\n\n    2\n158 WEEKS ON THE LIST John O'HaraElizabeth Appleton\n\n\n\n    3\n157 WEEKS ON THE LIST Taylor CaldwellTestimony Of Two Men\n\n\n\n    4\n136 WEEKS ON THE LIST Irving WallaceThe Man\n\n\n\n    5\n135 WEEKS ON THE LIST Leon UrisTopaz\n\n\n\n  \n\n\n\n\n  \n  \n    \n    \n    \n    \n  \n  \n    \n      1970s\n    \n    1\n172 WEEKS ON THE LIST Richard BachIllusions\n\n\n\n    2\n125 WEEKS ON THE LIST Robert LudlumThe Matarese Circle\n\n\n\n    3\n123 WEEKS ON THE LIST Herman WoukThe Winds Of War\n\n\n\n    4\n119 WEEKS ON THE LIST Agatha ChristieCurtain\n\n\n\n    5\n119 WEEKS ON THE LIST Frederick ForsythThe Odessa File\n\n\n\n  \n\n\n\n\n  \n  \n    \n    \n    \n    \n  \n  \n    \n      1980s\n    \n    1\n336 WEEKS ON THE LIST Stephen KingFirestarter\n\n\n\n    2\n271 WEEKS ON THE LIST Danielle SteelChanges\n\n\n\n    3\n205 WEEKS ON THE LIST James A. MichenerThe Covenant\n\n\n\n    4\n176 WEEKS ON THE LIST Tom ClancyRed Storm Rising\n\n\n\n    5\n170 WEEKS ON THE LIST Robert LudlumThe Parsifal Mosaic\n\n\n\n  \n\n\n\n    \n  \n  \n    \n    \n    \n    \n  \n  \n    \n      1990s\n    \n    1\n311 WEEKS ON THE LIST Danielle SteelThe Gift\n\n\n\n    2\n307 WEEKS ON THE LIST John GrishamThe Pelican Brief\n\n\n\n    3\n244 WEEKS ON THE LIST Stephen KingThe Stand\n\n\n\n    4\n212 WEEKS ON THE LIST Robert WallerThe Bridges Of Madison County\n\n\n\n    5\n192 WEEKS ON THE LIST Mary Higgins ClarkLoves Music, Loves To Dance\n\n\n\n  \n\n\n\n\n  \n  \n    \n    \n    \n    \n  \n  \n    \n      2000s\n    \n    1\n232 WEEKS ON THE LIST John GrishamSkipping Christmas\n\n\n\n    2\n218 WEEKS ON THE LIST Dan BrownThe Da Vinci Code\n\n\n\n    3\n200 WEEKS ON THE LIST Danielle SteelThe House On Hope Street\n\n\n\n    4\n178 WEEKS ON THE LIST James PattersonCross\n\n\n\n    5\n176 WEEKS ON THE LIST Nicholas SparksA Bend In The Road\n\n\n\n  \n\n\n\n\n  \n  \n    \n    \n    \n    \n  \n  \n    \n      2010s\n    \n    1\n216 WEEKS ON THE LIST John GrishamSycamore Row\n\n\n\n    2\n207 WEEKS ON THE LIST David BaldacciThe Escape\n\n\n\n    3\n157 WEEKS ON THE LIST Danielle SteelThe Mistress\n\n\n\n    4\n157 WEEKS ON THE LIST Stephen King11/22/63\n\n\n\n    5\n132 WEEKS ON THE LIST Anthony DoerrAll The Light We Cannot See\n\n\n\n  \n\n\n\n  \n  \n  \n    \n       {ggplot2} Original: @tanya_shapiro | \n{gt} recreation: @rappa753"
  },
  {
    "objectID": "case_studies.html#latex-formulas",
    "href": "case_studies.html#latex-formulas",
    "title": "5  Case studies",
    "section": "5.3 LaTeX formulas",
    "text": "5.3 LaTeX formulas\nLet’s do one more little case study. This one does not require any custom styling. In the absence of support for formulas with MathJax, this is a workaround of incorporating formulas in your tables. It probably won’t work on exports to PDF but for HTML outputs it should do.\nThe trick we’re going to use is as follows.\n\nPass LaTeX formulas to tex2image() from {exams}. This will transform your formula into an svg image and save it to a file.\nRead that file and change the colors to whatever you like via text replacement using str_replace_all(). By default all elements are black.\n\n\nexams::tex2image(\n  '$\\\\overline{X_n} = \\\\sum\\\\limits_{k = 1}^{n} x_k $', \n  format = 'svg', \n  dir = here::here(), \n  name = 'formula'\n)\nsvg_formula_black <- read_lines('formula.svg') |> \n  str_flatten() \n  \nsvg_formula_white <- svg_formula_black |> \n  # Overline color uses stroke, rest uses fill\n  str_replace_all('stroke:rgb\\\\(0%,0%,0%\\\\)', 'stroke:#FFFFFF') |> \n  str_replace_all('fill:rgb\\\\(0%,0%,0%\\\\)', 'fill:#FFFFFF')\n\n\ntibble(char = svg_formula_black, char2 = 'bla') |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  tab_spanner(\n    label = md(svg_formula_white),\n    columns = 1:2\n  ) |> \n  fmt_markdown(columns = 'char') |> \n  tab_header(title = 'This is a table with formulas as svgs')\n\n\n\n\n  \n  \n  \n    \n      This is a table with formulas as svgs\n    \n    \n  \n  \n    \n      \n                            \n\n      \n    \n    \n      char\n      char2\n    \n  \n  \n                        \n\nbla\n  \n  \n  \n\n\n\n\n\nNow let’s use a second formula in the table. The idea is basically the same. But you have to be careful for one very small reason.\nThe svg code for the formula images that we get from tex2image() always contains IDs that start with glyph. But all IDs need to be unique. Hence, the second svg code that we generate with tex2image() cannot use glyph for its IDs. Text replacement solves this issue.\n\nexams::tex2image(\n  '$\\\\int_0^\\\\infty f(x) dx$', \n  format = 'svg', \n  dir = here::here(), \n  name = 'second_formula'\n)\n\nsvg_formula_black_integral <- readLines('formula2.svg') |> \n  str_flatten() |> \n  str_replace_all('glyph', 'some_other_id')\n\ntibble(char = svg_formula_black, char2 = svg_formula_black_integral) |> \n  gt() |> \n  opt_stylize(style = 3) |> \n  tab_spanner(\n    label = md(svg_formula_white),\n    columns = 1:2\n  ) |> \n  fmt_markdown(columns = c('char', 'char2')) |>\n  tab_header(title = 'This is a table with formulas as svgs')\n\n\n\n\n  \n  \n  \n    \n      This is a table with formulas as svgs\n    \n    \n  \n  \n    \n      \n                            \n\n      \n    \n    \n      char\n      char2"
  },
  {
    "objectID": "case_studies.html#summary",
    "href": "case_studies.html#summary",
    "title": "5  Case studies",
    "section": "5.4 Summary",
    "text": "5.4 Summary\nAlright, alright, alright. What a ride.1 I hope this chapter showed you how everything we’ve learned in this book can be put together to create a range of cool tables.\nYou probably want to share your tables with the world. Sharing them in Quarto documents can be one way to do that. But there’s one thing you have to watch out for. Next stop: Quarto."
  },
  {
    "objectID": "quarto_gt.html#sec-convert-table-to-html",
    "href": "quarto_gt.html#sec-convert-table-to-html",
    "title": "6  Quarto and {gt}",
    "section": "6.1 Convert table to HTML",
    "text": "6.1 Convert table to HTML\nAs you have seen in Chapter 5 you can transform any {gt} table to HTML code with as_raw_html(). Let’s have a look how this compares to the regular output.\n\nQuarto outputRegular output\n\n\n\npenguin_table |> as_raw_html()\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      \n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Island: Biscoe\n    \n    2007\n5\n5\n-\n-\n16\n17\n    2008\n9\n9\n-\n-\n22\n23\n    2009\n8\n8\n-\n-\n20\n21\n    Maximum\n9\n9\n-\n-\n22\n23\n    Total\n22\n22\n-\n-\n58\n61\n    \n      Island: Dream\n    \n    2007\n9\n10\n13\n13\n-\n-\n    2008\n8\n8\n9\n9\n-\n-\n    2009\n10\n10\n12\n12\n-\n-\n    Maximum\n10\n10\n13\n13\n-\n-\n    Total\n27\n28\n34\n34\n-\n-\n    \n      Island: Torgersen\n    \n    2007\n8\n7\n-\n-\n-\n-\n    2008\n8\n8\n-\n-\n-\n-\n    2009\n8\n8\n-\n-\n-\n-\n    Maximum\n8\n8\n-\n-\n-\n-\n    Total\n24\n23\n-\n-\n-\n-\n  \n  \n  \n\n\n\n\n\n\n\n\npenguin_table |> as_raw_html()\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      \n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Island: Biscoe\n    \n    2007\n5\n5\n-\n-\n16\n17\n    2008\n9\n9\n-\n-\n22\n23\n    2009\n8\n8\n-\n-\n20\n21\n    Maximum\n9\n9\n-\n-\n22\n23\n    Total\n22\n22\n-\n-\n58\n61\n    \n      Island: Dream\n    \n    2007\n9\n10\n13\n13\n-\n-\n    2008\n8\n8\n9\n9\n-\n-\n    2009\n10\n10\n12\n12\n-\n-\n    Maximum\n10\n10\n13\n13\n-\n-\n    Total\n27\n28\n34\n34\n-\n-\n    \n      Island: Torgersen\n    \n    2007\n8\n7\n-\n-\n-\n-\n    2008\n8\n8\n-\n-\n-\n-\n    2009\n8\n8\n-\n-\n-\n-\n    Maximum\n8\n8\n-\n-\n-\n-\n    Total\n24\n23\n-\n-\n-\n-\n  \n  \n  \n\n\n\n\n\n\n\n\nAs you can see in the “Quarto Output” panel, as_raw_html() fixes most of the problems already. But notice that the regular table uses narrower line heights. So, as_raw_html() may not be enough. Behind the scenes, I applied the second secret ingredient to the “Regular output” panel. Let me tell you what I did."
  },
  {
    "objectID": "quarto_gt.html#reset-css-styles.",
    "href": "quarto_gt.html#reset-css-styles.",
    "title": "6  Quarto and {gt}",
    "section": "6.2 Reset CSS styles.",
    "text": "6.2 Reset CSS styles.\nThe CSS code to reset any styles is style=\"all:initial;\". T hus, you can wrap your code chunk into an HTML div with that style. So, what I wrote in my Quarto document looked something like\n::: {style=\"all:initial;\"}\n    ```{.r}\n    penguin_table |> as_raw_html()\n    ```\n:::\nIn the actual document, I would use {r} instead of {.r}. Also, you don’t need the indentation in front of the code chunk. This was just added here so that the code is displayed properly."
  },
  {
    "objectID": "quarto_gt.html#apply-style-isolation-to-all-gt-outputs-automatically",
    "href": "quarto_gt.html#apply-style-isolation-to-all-gt-outputs-automatically",
    "title": "6  Quarto and {gt}",
    "section": "6.3 Apply style isolation to all {gt} outputs automatically",
    "text": "6.3 Apply style isolation to all {gt} outputs automatically\nObviously, you do not want to write as_raw_html() all the time. And that’s not what I did in this book. Thus, here’s a third bonus ingredient for you. What you’ll need to do is the following:\n\nWrite a function knit_print.gt(x, ...) that\n\ntransforms a {gt} table into HTML,\nwraps the HTML code into a <div> with reseted style and\napplies knitr::asis_output() which ensures proper HTML output.\n\nOverwrite the default {gt} output function with registerS3method().\n\n\n```{r}\nlibrary(knitr)\nknit_print.gt <- function(x, ...) {\n  stringr::str_c(\n    \"<div style='all:initial';>\\n\", \n    gt::as_raw_html(x), \n    \"\\n</div>\"\n  ) |> \n    knitr::asis_output()\n    \n}\nregisterS3method(\n  \"knit_print\", 'gt_tbl', knit_print.gt, \n  envir = asNamespace(\"gt\") \n  # important to overwrite {gt}s knit_print\n)\n```\n\nOnce this code chunk is run, you don’t need to call as_raw_html() anymore. But if you do, then style=\"all:initial;\" is not applied to the output. That’s because our change only affects those outputs that are {gt} tables and not HTML code (that may correspond to a {gt} table).\n\nas_raw_html()Regular output\n\n\n\npenguin_table |> as_raw_html()\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      \n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Island: Biscoe\n    \n    2007\n5\n5\n-\n-\n16\n17\n    2008\n9\n9\n-\n-\n22\n23\n    2009\n8\n8\n-\n-\n20\n21\n    Maximum\n9\n9\n-\n-\n22\n23\n    Total\n22\n22\n-\n-\n58\n61\n    \n      Island: Dream\n    \n    2007\n9\n10\n13\n13\n-\n-\n    2008\n8\n8\n9\n9\n-\n-\n    2009\n10\n10\n12\n12\n-\n-\n    Maximum\n10\n10\n13\n13\n-\n-\n    Total\n27\n28\n34\n34\n-\n-\n    \n      Island: Torgersen\n    \n    2007\n8\n7\n-\n-\n-\n-\n    2008\n8\n8\n-\n-\n-\n-\n    2009\n8\n8\n-\n-\n-\n-\n    Maximum\n8\n8\n-\n-\n-\n-\n    Total\n24\n23\n-\n-\n-\n-\n  \n  \n  \n\n\n\n\n\n\n\npenguin_table\n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      \n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Island: Biscoe\n    \n    2007\n5\n5\n-\n-\n16\n17\n    2008\n9\n9\n-\n-\n22\n23\n    2009\n8\n8\n-\n-\n20\n21\n    Maximum\n9\n9\n-\n-\n22\n23\n    Total\n22\n22\n-\n-\n58\n61\n    \n      Island: Dream\n    \n    2007\n9\n10\n13\n13\n-\n-\n    2008\n8\n8\n9\n9\n-\n-\n    2009\n10\n10\n12\n12\n-\n-\n    Maximum\n10\n10\n13\n13\n-\n-\n    Total\n27\n28\n34\n34\n-\n-\n    \n      Island: Torgersen\n    \n    2007\n8\n7\n-\n-\n-\n-\n    2008\n8\n8\n-\n-\n-\n-\n    2009\n8\n8\n-\n-\n-\n-\n    Maximum\n8\n8\n-\n-\n-\n-\n    Total\n24\n23\n-\n-\n-\n-\n  \n  \n  \n\n\n\n\n\n\n\n\nAlso, there is one more advantage of overwriting knit_print.gt(). This way, only the style of the output is reseted. But if you wrap your whole code chunk into ::: {style=\"all:initial;} the display of the code chunk is also affected.\nThis is what happened earlier. In case you haven’t notice, go back to Section 6.1 and compare the code chunks of the panels. The second one uses a smaller font."
  },
  {
    "objectID": "quarto_gt.html#a-fallback-plan",
    "href": "quarto_gt.html#a-fallback-plan",
    "title": "6  Quarto and {gt}",
    "section": "6.4 A fallback plan",
    "text": "6.4 A fallback plan\nWhat happens if our strategy fails? Most of the time you can just add your own custom CSS code via opt_css(). This should overwrite Quarto’s defaults most of the time.\nBut there has been one case in this book where this did not work. Remember this table from the end of Chapter 4?\n\n\nCode\npenguins_styled_tabspanner <- penguin_counts_wider |> \n  mutate(across(.cols = -(1:2), ~if_else(. == 0, NA_integer_, .))) |> \n  mutate(\n    island = as.character(island), \n    year = as.numeric(year),\n    island = paste0('Island: ', island)\n  ) |> \n  gt(\n    groupname_col = 'island', \n    rowname_col = 'year', \n    id = 'fixed-penguins'\n  ) |> \n  cols_label(.list = desired_colnames) |> \n  tab_spanner(\n    label = md('**Adelie**'),\n    columns = 3:4\n  ) |> \n  tab_spanner(\n    label = md('**Chinstrap**'),\n    columns = c('Chinstrap_female', 'Chinstrap_male'),\n    id = 'chinstrap'\n  ) |> \n  tab_spanner(\n    label =  md('**Gentoo**'),\n    columns = contains('Gentoo')\n  ) |> \n  tab_header(\n    title = 'Penguins in the Palmer Archipelago',\n    subtitle = 'Data is courtesy of the {palmerpenguins} R package'\n  ) |> \n  sub_missing(missing_text = '-') |>\n  summary_rows(\n    groups = TRUE,\n    fns = list(\n      'Maximum' = ~max(.),\n      'Total' = ~sum(.) \n    ),\n    formatter = fmt_number,\n    decimals = 0,\n    missing_text = '-'\n  )  |> \n  tab_options(\n    data_row.padding = px(2),\n    summary_row.padding = px(3), # A bit more padding for summaries\n    row_group.padding = px(4)    # And even more for our groups\n  ) |> \n  opt_stylize(style = 6, color = 'gray') |> \n  tab_style(\n    locations = cells_column_spanners(spanners = 'chinstrap'),\n    style = cell_fill(color = 'dodgerblue')\n  ) |> \n  opt_css(\n    \"#fixed-penguins th[id='<strong>Chinstrap</strong>'] > span {\n        border-bottom-style: none;\n      }\n    \"\n  )\npenguins_styled_tabspanner\n\n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      \n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Island: Biscoe\n    \n    2007\n5\n5\n-\n-\n16\n17\n    2008\n9\n9\n-\n-\n22\n23\n    2009\n8\n8\n-\n-\n20\n21\n    Maximum\n9\n9\n-\n-\n22\n23\n    Total\n22\n22\n-\n-\n58\n61\n    \n      Island: Dream\n    \n    2007\n9\n10\n13\n13\n-\n-\n    2008\n8\n8\n9\n9\n-\n-\n    2009\n10\n10\n12\n12\n-\n-\n    Maximum\n10\n10\n13\n13\n-\n-\n    Total\n27\n28\n34\n34\n-\n-\n    \n      Island: Torgersen\n    \n    2007\n8\n7\n-\n-\n-\n-\n    2008\n8\n8\n-\n-\n-\n-\n    2009\n8\n8\n-\n-\n-\n-\n    Maximum\n8\n8\n-\n-\n-\n-\n    Total\n24\n23\n-\n-\n-\n-\n  \n  \n  \n\n\n\n\n\nNotice that there is a grey border in the blue cell. This border should not be there as we have already included the CSS code to fix that. I’m not sure what’s going on there but here’s a fix.\nI’ve written a (rudimentary) function make_tbl_quarto_robust() that\n\nconverts a {gt} table to HTML,\nsplits out the CSS part from that using text manipulation and\nreplaces all .gt_* classes with some other name so that Quarto can’t target it.\n\n\n\nCode\nmake_tbl_quarto_robust <- function(tbl) {\n  # Get tbl html code (without the inline stuff)\n  tbl_html <- tbl |>\n    as_raw_html(inline_css = FALSE) \n  \n  # Find table id\n  tbl_id <-  str_match(tbl_html, 'id=\"(.*)\"\\\\s')[,2] \n  \n  # Split html so that we only replace strings in the css part at first\n  # That's important for performance\n  split_html <- tbl_html |> \n    str_split_1('<table class=\"gt_table\".{0,}>')\n  css_part <- split_html[1] |> \n    str_split_1('<style>')\n  \n  # Create regex to add table id\n  my_regex <- str_c('(', tbl_id, ' )?(.* \\\\{)')\n  replaced_css <- css_part[2] |>\n    # Make global html changes more specific\n    str_replace_all('html \\\\{', str_c(tbl_id, ' .gt_table {')) |> \n    # Make changes to everything specific to the table id\n    str_replace_all(my_regex, str_c('\\\\#', tbl_id, ' \\\\2')) |> \n    # Replace duplicate names \n    str_replace_all(\n      str_c('\\\\#', tbl_id, ' \\\\#', tbl_id),\n      str_c('\\\\#', tbl_id)\n    )\n  \n  # Put split html back together\n  str_c(\n    css_part[1], '<style>', \n    replaced_css, '<table class=\"gt_table\">', \n    split_html[2]\n  ) |> \n    # Rename all gt_* classes to new_gt_*\n    str_replace_all('(\\\\.|class=\"| )gt', '\\\\1new_gt') |> \n    # Reformat as html\n    html()\n}\n\n\nWith this function we could do the same trick as before. This will give us the output we desire.\n\nlibrary(knitr)\nknit_print.gt <- function(x, ...) {\n  stringr::str_c(\n    \"<div style='all:initial';>\\n\", \n    make_tbl_quarto_robust(x), \n    \"\\n</div>\"\n  ) |> \n    knitr::asis_output()\n    \n}\nregisterS3method(\n  \"knit_print\", 'gt_tbl', knit_print.gt, \n  envir = asNamespace(\"gt\") \n  # important to overwrite {gt}s knit_print\n)\npenguins_styled_tabspanner \n\n\n\n\n  \n  \n  \n    \n      Penguins in the Palmer Archipelago\n    \n    \n      Data is courtesy of the {palmerpenguins} R package\n    \n  \n  \n    \n      \n      \n        Adelie\n      \n      \n        Chinstrap\n      \n      \n        Gentoo\n      \n    \n    \n      Female\n      Male\n      Female\n      Male\n      Female\n      Male\n    \n  \n  \n    \n      Island: Biscoe\n    \n    2007\n5\n5\n-\n-\n16\n17\n    2008\n9\n9\n-\n-\n22\n23\n    2009\n8\n8\n-\n-\n20\n21\n    Maximum\n9\n9\n-\n-\n22\n23\n    Total\n22\n22\n-\n-\n58\n61\n    \n      Island: Dream\n    \n    2007\n9\n10\n13\n13\n-\n-\n    2008\n8\n8\n9\n9\n-\n-\n    2009\n10\n10\n12\n12\n-\n-\n    Maximum\n10\n10\n13\n13\n-\n-\n    Total\n27\n28\n34\n34\n-\n-\n    \n      Island: Torgersen\n    \n    2007\n8\n7\n-\n-\n-\n-\n    2008\n8\n8\n-\n-\n-\n-\n    2009\n8\n8\n-\n-\n-\n-\n    Maximum\n8\n8\n-\n-\n-\n-\n    Total\n24\n23\n-\n-\n-\n-\n  \n  \n  \n\n\n\n\n\nBut I really do not recommend this approach generally. It is a brute-force solution to a slightly annoying problem that will likely be fixed in the future anyway. Also, compared to as_raw_html() my function will likely not work for nested tables. Thus, I use my own function only when as_raw_html() and opt_css() fail me (which is rare)."
  },
  {
    "objectID": "quarto_gt.html#summary",
    "href": "quarto_gt.html#summary",
    "title": "6  Quarto and {gt}",
    "section": "6.5 Summary",
    "text": "6.5 Summary\nQuarto and {gt} are great projects. But as it is right now, they do not always play well together. That’s no problem, though. As we have seen in this chapter, we can force them to play nicely like we want them to.\nMy guess is that less force will be necessary in the future. Both projects improve all the time. So, it is only a matter of time until this chapter becomes obsolete. Until then, I hope that you could find the solutions you were looking for in this chapter."
  }
]